
ASSIGNMENT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004248  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004418  08004418  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08004418  08004418  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004418  08004418  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000090  080044b0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  080044b0  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce5b  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201f  00000000  00000000  0002cf14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0002ef38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  0002fc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000029c7  00000000  00000000  000308b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d54b  00000000  00000000  00033277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af45  00000000  00000000  000407c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb707  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039ac  00000000  00000000  000cb75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	0800433c 	.word	0x0800433c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	0800433c 	.word	0x0800433c

0800014c <toogleRed>:
#define OneSec 100
#include "fsm.h"
#include "main.h"
//HAL_GPIO_WritePin(GPIOB, ledpa_Pin|led1b_Pin|led2b_Pin|led2a_Pin, GPIO_PIN_RESET);
//HAL_GPIO_WritePin(GPIOA, ledpb_Pin|led1a_Pin, GPIO_PIN_RESET);
void toogleRed(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,led1a_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000156:	4805      	ldr	r0, [pc, #20]	; (800016c <toogleRed+0x20>)
 8000158:	f002 f801 	bl	800215e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led1b_Pin, GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	2108      	movs	r1, #8
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <toogleRed+0x24>)
 8000162:	f001 fffc 	bl	800215e <HAL_GPIO_WritePin>
}
 8000166:	bf00      	nop
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	40010800 	.word	0x40010800
 8000170:	40010c00 	.word	0x40010c00

08000174 <toogleGreen>:
void toogleGreen(){
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,led1a_Pin, GPIO_PIN_SET);
 8000178:	2201      	movs	r2, #1
 800017a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800017e:	4805      	ldr	r0, [pc, #20]	; (8000194 <toogleGreen+0x20>)
 8000180:	f001 ffed 	bl	800215e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led1b_Pin, GPIO_PIN_RESET);
 8000184:	2200      	movs	r2, #0
 8000186:	2108      	movs	r1, #8
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <toogleGreen+0x24>)
 800018a:	f001 ffe8 	bl	800215e <HAL_GPIO_WritePin>
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40010800 	.word	0x40010800
 8000198:	40010c00 	.word	0x40010c00

0800019c <toogleYellow>:
void toogleYellow(){
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,led1a_Pin, GPIO_PIN_SET);
 80001a0:	2201      	movs	r2, #1
 80001a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001a6:	4805      	ldr	r0, [pc, #20]	; (80001bc <toogleYellow+0x20>)
 80001a8:	f001 ffd9 	bl	800215e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led1b_Pin, GPIO_PIN_SET);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2108      	movs	r1, #8
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <toogleYellow+0x24>)
 80001b2:	f001 ffd4 	bl	800215e <HAL_GPIO_WritePin>
}
 80001b6:	bf00      	nop
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	40010800 	.word	0x40010800
 80001c0:	40010c00 	.word	0x40010c00

080001c4 <toogleRed1>:
void toogleRed1(){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,led2a_Pin, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2120      	movs	r1, #32
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <toogleRed1+0x1c>)
 80001ce:	f001 ffc6 	bl	800215e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led2b_Pin, GPIO_PIN_SET);
 80001d2:	2201      	movs	r2, #1
 80001d4:	2110      	movs	r1, #16
 80001d6:	4802      	ldr	r0, [pc, #8]	; (80001e0 <toogleRed1+0x1c>)
 80001d8:	f001 ffc1 	bl	800215e <HAL_GPIO_WritePin>
}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	40010c00 	.word	0x40010c00

080001e4 <toogleGreen1>:
void toogleGreen1(){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,led2a_Pin, GPIO_PIN_SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2120      	movs	r1, #32
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <toogleGreen1+0x1c>)
 80001ee:	f001 ffb6 	bl	800215e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led2b_Pin, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2110      	movs	r1, #16
 80001f6:	4802      	ldr	r0, [pc, #8]	; (8000200 <toogleGreen1+0x1c>)
 80001f8:	f001 ffb1 	bl	800215e <HAL_GPIO_WritePin>
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	40010c00 	.word	0x40010c00

08000204 <toogleYellow1>:
void toogleYellow1(){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,led2a_Pin, GPIO_PIN_SET);
 8000208:	2201      	movs	r2, #1
 800020a:	2120      	movs	r1, #32
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <toogleYellow1+0x1c>)
 800020e:	f001 ffa6 	bl	800215e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led2b_Pin, GPIO_PIN_SET);
 8000212:	2201      	movs	r2, #1
 8000214:	2110      	movs	r1, #16
 8000216:	4802      	ldr	r0, [pc, #8]	; (8000220 <toogleYellow1+0x1c>)
 8000218:	f001 ffa1 	bl	800215e <HAL_GPIO_WritePin>
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	40010c00 	.word	0x40010c00

08000224 <redP>:
void redP(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ledpa_Pin, GPIO_PIN_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800022e:	4805      	ldr	r0, [pc, #20]	; (8000244 <redP+0x20>)
 8000230:	f001 ff95 	bl	800215e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ledpb_Pin, GPIO_PIN_SET);
 8000234:	2201      	movs	r2, #1
 8000236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023a:	4803      	ldr	r0, [pc, #12]	; (8000248 <redP+0x24>)
 800023c:	f001 ff8f 	bl	800215e <HAL_GPIO_WritePin>
}
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40010c00 	.word	0x40010c00
 8000248:	40010800 	.word	0x40010800

0800024c <greenP>:
void greenP(){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ledpa_Pin, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000256:	4805      	ldr	r0, [pc, #20]	; (800026c <greenP+0x20>)
 8000258:	f001 ff81 	bl	800215e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ledpb_Pin, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000262:	4803      	ldr	r0, [pc, #12]	; (8000270 <greenP+0x24>)
 8000264:	f001 ff7b 	bl	800215e <HAL_GPIO_WritePin>
}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40010c00 	.word	0x40010c00
 8000270:	40010800 	.word	0x40010800

08000274 <yellowP>:
void yellowP(){
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ledpa_Pin, GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <yellowP+0x20>)
 8000280:	f001 ff6d 	bl	800215e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ledpb_Pin, GPIO_PIN_SET);
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028a:	4803      	ldr	r0, [pc, #12]	; (8000298 <yellowP+0x24>)
 800028c:	f001 ff67 	bl	800215e <HAL_GPIO_WritePin>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40010c00 	.word	0x40010c00
 8000298:	40010800 	.word	0x40010800

0800029c <offP>:
void offP(){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ledpa_Pin, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002a6:	4805      	ldr	r0, [pc, #20]	; (80002bc <offP+0x20>)
 80002a8:	f001 ff59 	bl	800215e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ledpb_Pin, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b2:	4803      	ldr	r0, [pc, #12]	; (80002c0 <offP+0x24>)
 80002b4:	f001 ff53 	bl	800215e <HAL_GPIO_WritePin>
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40010c00 	.word	0x40010c00
 80002c0:	40010800 	.word	0x40010800

080002c4 <fsm_automatic_run1>:
void fsm_automatic_run1(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	switch (status1	) {
 80002c8:	4b31      	ldr	r3, [pc, #196]	; (8000390 <fsm_automatic_run1+0xcc>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <fsm_automatic_run1+0xd0>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d00b      	beq.n	80002ea <fsm_automatic_run1+0x26>
 80002d2:	4a30      	ldr	r2, [pc, #192]	; (8000394 <fsm_automatic_run1+0xd0>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	dc52      	bgt.n	800037e <fsm_automatic_run1+0xba>
 80002d8:	2b03      	cmp	r3, #3
 80002da:	d03c      	beq.n	8000356 <fsm_automatic_run1+0x92>
 80002dc:	2b03      	cmp	r3, #3
 80002de:	dc4e      	bgt.n	800037e <fsm_automatic_run1+0xba>
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d010      	beq.n	8000306 <fsm_automatic_run1+0x42>
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d022      	beq.n	800032e <fsm_automatic_run1+0x6a>
//				setTimer1(RED_TIME);
				timer=RED_TIME/OneSec;
			}
			break;
		default:
			break;
 80002e8:	e049      	b.n	800037e <fsm_automatic_run1+0xba>
			status1 = AUTO_RED;
 80002ea:	4b29      	ldr	r3, [pc, #164]	; (8000390 <fsm_automatic_run1+0xcc>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	601a      	str	r2, [r3, #0]
			timer = RED_TIME/OneSec;
 80002f0:	4b29      	ldr	r3, [pc, #164]	; (8000398 <fsm_automatic_run1+0xd4>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a29      	ldr	r2, [pc, #164]	; (800039c <fsm_automatic_run1+0xd8>)
 80002f6:	fb82 1203 	smull	r1, r2, r2, r3
 80002fa:	1152      	asrs	r2, r2, #5
 80002fc:	17db      	asrs	r3, r3, #31
 80002fe:	1ad3      	subs	r3, r2, r3
 8000300:	4a27      	ldr	r2, [pc, #156]	; (80003a0 <fsm_automatic_run1+0xdc>)
 8000302:	6013      	str	r3, [r2, #0]
			break;
 8000304:	e042      	b.n	800038c <fsm_automatic_run1+0xc8>
			toogleRed();
 8000306:	f7ff ff21 	bl	800014c <toogleRed>
			if(timer==STOP){
 800030a:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <fsm_automatic_run1+0xdc>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d137      	bne.n	8000382 <fsm_automatic_run1+0xbe>
				status1 = AUTO_GREEN;
 8000312:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <fsm_automatic_run1+0xcc>)
 8000314:	2202      	movs	r2, #2
 8000316:	601a      	str	r2, [r3, #0]
				timer=GREEN_TIME/OneSec;
 8000318:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <fsm_automatic_run1+0xe0>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a1f      	ldr	r2, [pc, #124]	; (800039c <fsm_automatic_run1+0xd8>)
 800031e:	fb82 1203 	smull	r1, r2, r2, r3
 8000322:	1152      	asrs	r2, r2, #5
 8000324:	17db      	asrs	r3, r3, #31
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	4a1d      	ldr	r2, [pc, #116]	; (80003a0 <fsm_automatic_run1+0xdc>)
 800032a:	6013      	str	r3, [r2, #0]
			break;
 800032c:	e029      	b.n	8000382 <fsm_automatic_run1+0xbe>
			toogleGreen();
 800032e:	f7ff ff21 	bl	8000174 <toogleGreen>
			if(timer==STOP){
 8000332:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <fsm_automatic_run1+0xdc>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d125      	bne.n	8000386 <fsm_automatic_run1+0xc2>
				status1 = AUTO_YELLOW;
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <fsm_automatic_run1+0xcc>)
 800033c:	2203      	movs	r2, #3
 800033e:	601a      	str	r2, [r3, #0]
				timer=YELLOW_TIME/OneSec;
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <fsm_automatic_run1+0xe4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a15      	ldr	r2, [pc, #84]	; (800039c <fsm_automatic_run1+0xd8>)
 8000346:	fb82 1203 	smull	r1, r2, r2, r3
 800034a:	1152      	asrs	r2, r2, #5
 800034c:	17db      	asrs	r3, r3, #31
 800034e:	1ad3      	subs	r3, r2, r3
 8000350:	4a13      	ldr	r2, [pc, #76]	; (80003a0 <fsm_automatic_run1+0xdc>)
 8000352:	6013      	str	r3, [r2, #0]
			break;
 8000354:	e017      	b.n	8000386 <fsm_automatic_run1+0xc2>
			toogleYellow();
 8000356:	f7ff ff21 	bl	800019c <toogleYellow>
			if(timer==STOP){
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <fsm_automatic_run1+0xdc>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d113      	bne.n	800038a <fsm_automatic_run1+0xc6>
				status1 = AUTO_RED;
 8000362:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <fsm_automatic_run1+0xcc>)
 8000364:	2201      	movs	r2, #1
 8000366:	601a      	str	r2, [r3, #0]
				timer=RED_TIME/OneSec;
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <fsm_automatic_run1+0xd4>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a0b      	ldr	r2, [pc, #44]	; (800039c <fsm_automatic_run1+0xd8>)
 800036e:	fb82 1203 	smull	r1, r2, r2, r3
 8000372:	1152      	asrs	r2, r2, #5
 8000374:	17db      	asrs	r3, r3, #31
 8000376:	1ad3      	subs	r3, r2, r3
 8000378:	4a09      	ldr	r2, [pc, #36]	; (80003a0 <fsm_automatic_run1+0xdc>)
 800037a:	6013      	str	r3, [r2, #0]
			break;
 800037c:	e005      	b.n	800038a <fsm_automatic_run1+0xc6>
			break;
 800037e:	bf00      	nop
 8000380:	e004      	b.n	800038c <fsm_automatic_run1+0xc8>
			break;
 8000382:	bf00      	nop
 8000384:	e002      	b.n	800038c <fsm_automatic_run1+0xc8>
			break;
 8000386:	bf00      	nop
 8000388:	e000      	b.n	800038c <fsm_automatic_run1+0xc8>
			break;
 800038a:	bf00      	nop
	}
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000000 	.word	0x20000000
 8000394:	01605b22 	.word	0x01605b22
 8000398:	20000010 	.word	0x20000010
 800039c:	51eb851f 	.word	0x51eb851f
 80003a0:	200000c4 	.word	0x200000c4
 80003a4:	20000014 	.word	0x20000014
 80003a8:	20000018 	.word	0x20000018

080003ac <fsm_automatic_run2>:


void fsm_automatic_run2(){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	switch (status2	) {
 80003b0:	4b31      	ldr	r3, [pc, #196]	; (8000478 <fsm_automatic_run2+0xcc>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a31      	ldr	r2, [pc, #196]	; (800047c <fsm_automatic_run2+0xd0>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d00b      	beq.n	80003d2 <fsm_automatic_run2+0x26>
 80003ba:	4a30      	ldr	r2, [pc, #192]	; (800047c <fsm_automatic_run2+0xd0>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	dc52      	bgt.n	8000466 <fsm_automatic_run2+0xba>
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	d03c      	beq.n	800043e <fsm_automatic_run2+0x92>
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	dc4e      	bgt.n	8000466 <fsm_automatic_run2+0xba>
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d010      	beq.n	80003ee <fsm_automatic_run2+0x42>
 80003cc:	2b02      	cmp	r3, #2
 80003ce:	d022      	beq.n	8000416 <fsm_automatic_run2+0x6a>
				timer2=RED_TIME/OneSec;
			}

			break;
		default:
			break;
 80003d0:	e049      	b.n	8000466 <fsm_automatic_run2+0xba>
			status2 = AUTO_GREEN;
 80003d2:	4b29      	ldr	r3, [pc, #164]	; (8000478 <fsm_automatic_run2+0xcc>)
 80003d4:	2202      	movs	r2, #2
 80003d6:	601a      	str	r2, [r3, #0]
			timer2=GREEN_TIME/OneSec;
 80003d8:	4b29      	ldr	r3, [pc, #164]	; (8000480 <fsm_automatic_run2+0xd4>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a29      	ldr	r2, [pc, #164]	; (8000484 <fsm_automatic_run2+0xd8>)
 80003de:	fb82 1203 	smull	r1, r2, r2, r3
 80003e2:	1152      	asrs	r2, r2, #5
 80003e4:	17db      	asrs	r3, r3, #31
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	4a27      	ldr	r2, [pc, #156]	; (8000488 <fsm_automatic_run2+0xdc>)
 80003ea:	6013      	str	r3, [r2, #0]
			break;
 80003ec:	e042      	b.n	8000474 <fsm_automatic_run2+0xc8>
			toogleRed1();
 80003ee:	f7ff fee9 	bl	80001c4 <toogleRed1>
			if(timer2==STOP){
 80003f2:	4b25      	ldr	r3, [pc, #148]	; (8000488 <fsm_automatic_run2+0xdc>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d137      	bne.n	800046a <fsm_automatic_run2+0xbe>
				status2 = AUTO_GREEN;
 80003fa:	4b1f      	ldr	r3, [pc, #124]	; (8000478 <fsm_automatic_run2+0xcc>)
 80003fc:	2202      	movs	r2, #2
 80003fe:	601a      	str	r2, [r3, #0]
				timer2=GREEN_TIME/OneSec;
 8000400:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <fsm_automatic_run2+0xd4>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a1f      	ldr	r2, [pc, #124]	; (8000484 <fsm_automatic_run2+0xd8>)
 8000406:	fb82 1203 	smull	r1, r2, r2, r3
 800040a:	1152      	asrs	r2, r2, #5
 800040c:	17db      	asrs	r3, r3, #31
 800040e:	1ad3      	subs	r3, r2, r3
 8000410:	4a1d      	ldr	r2, [pc, #116]	; (8000488 <fsm_automatic_run2+0xdc>)
 8000412:	6013      	str	r3, [r2, #0]
			break;
 8000414:	e029      	b.n	800046a <fsm_automatic_run2+0xbe>
			toogleGreen1();
 8000416:	f7ff fee5 	bl	80001e4 <toogleGreen1>
			if(timer2==STOP){
 800041a:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <fsm_automatic_run2+0xdc>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d125      	bne.n	800046e <fsm_automatic_run2+0xc2>
				status2 = AUTO_YELLOW;
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <fsm_automatic_run2+0xcc>)
 8000424:	2203      	movs	r2, #3
 8000426:	601a      	str	r2, [r3, #0]
				timer2=YELLOW_TIME/OneSec;
 8000428:	4b18      	ldr	r3, [pc, #96]	; (800048c <fsm_automatic_run2+0xe0>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a15      	ldr	r2, [pc, #84]	; (8000484 <fsm_automatic_run2+0xd8>)
 800042e:	fb82 1203 	smull	r1, r2, r2, r3
 8000432:	1152      	asrs	r2, r2, #5
 8000434:	17db      	asrs	r3, r3, #31
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	4a13      	ldr	r2, [pc, #76]	; (8000488 <fsm_automatic_run2+0xdc>)
 800043a:	6013      	str	r3, [r2, #0]
			break;
 800043c:	e017      	b.n	800046e <fsm_automatic_run2+0xc2>
			toogleYellow1();
 800043e:	f7ff fee1 	bl	8000204 <toogleYellow1>
			if(timer2==STOP){
 8000442:	4b11      	ldr	r3, [pc, #68]	; (8000488 <fsm_automatic_run2+0xdc>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d113      	bne.n	8000472 <fsm_automatic_run2+0xc6>
				status2 = AUTO_RED;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <fsm_automatic_run2+0xcc>)
 800044c:	2201      	movs	r2, #1
 800044e:	601a      	str	r2, [r3, #0]
				timer2=RED_TIME/OneSec;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <fsm_automatic_run2+0xe4>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <fsm_automatic_run2+0xd8>)
 8000456:	fb82 1203 	smull	r1, r2, r2, r3
 800045a:	1152      	asrs	r2, r2, #5
 800045c:	17db      	asrs	r3, r3, #31
 800045e:	1ad3      	subs	r3, r2, r3
 8000460:	4a09      	ldr	r2, [pc, #36]	; (8000488 <fsm_automatic_run2+0xdc>)
 8000462:	6013      	str	r3, [r2, #0]
			break;
 8000464:	e005      	b.n	8000472 <fsm_automatic_run2+0xc6>
			break;
 8000466:	bf00      	nop
 8000468:	e004      	b.n	8000474 <fsm_automatic_run2+0xc8>
			break;
 800046a:	bf00      	nop
 800046c:	e002      	b.n	8000474 <fsm_automatic_run2+0xc8>
			break;
 800046e:	bf00      	nop
 8000470:	e000      	b.n	8000474 <fsm_automatic_run2+0xc8>
			break;
 8000472:	bf00      	nop
	}
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000004 	.word	0x20000004
 800047c:	01605b22 	.word	0x01605b22
 8000480:	20000014 	.word	0x20000014
 8000484:	51eb851f 	.word	0x51eb851f
 8000488:	200000c8 	.word	0x200000c8
 800048c:	20000018 	.word	0x20000018
 8000490:	20000010 	.word	0x20000010

08000494 <fsm_p>:
void fsm_p(){
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	switch (status4) {
 8000498:	4b35      	ldr	r3, [pc, #212]	; (8000570 <fsm_p+0xdc>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a35      	ldr	r2, [pc, #212]	; (8000574 <fsm_p+0xe0>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d00b      	beq.n	80004ba <fsm_p+0x26>
 80004a2:	4a34      	ldr	r2, [pc, #208]	; (8000574 <fsm_p+0xe0>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	dc59      	bgt.n	800055c <fsm_p+0xc8>
 80004a8:	2b63      	cmp	r3, #99	; 0x63
 80004aa:	d059      	beq.n	8000560 <fsm_p+0xcc>
 80004ac:	2b63      	cmp	r3, #99	; 0x63
 80004ae:	dc55      	bgt.n	800055c <fsm_p+0xc8>
 80004b0:	2b1f      	cmp	r3, #31
 80004b2:	d00b      	beq.n	80004cc <fsm_p+0x38>
 80004b4:	2b20      	cmp	r3, #32
 80004b6:	d033      	beq.n	8000520 <fsm_p+0x8c>
			if(timer3==STOP){
				status4=INIT;
			}
			break;
		default:
			break;
 80004b8:	e050      	b.n	800055c <fsm_p+0xc8>
			status4=Waiting;
 80004ba:	4b2d      	ldr	r3, [pc, #180]	; (8000570 <fsm_p+0xdc>)
 80004bc:	2263      	movs	r2, #99	; 0x63
 80004be:	601a      	str	r2, [r3, #0]
			timer3 = 0;
 80004c0:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <fsm_p+0xe4>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
			offP();
 80004c6:	f7ff fee9 	bl	800029c <offP>
			break;
 80004ca:	e04e      	b.n	800056a <fsm_p+0xd6>
			yellowP();//red led ????
 80004cc:	f7ff fed2 	bl	8000274 <yellowP>
			if( timer3_flag == 1) {
 80004d0:	4b2a      	ldr	r3, [pc, #168]	; (800057c <fsm_p+0xe8>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d10f      	bne.n	80004f8 <fsm_p+0x64>
				Print_Mode(P_RED);
 80004d8:	201f      	movs	r0, #31
 80004da:	f000 fca5 	bl	8000e28 <Print_Mode>
				Print_TimeOut(timer3);
 80004de:	4b26      	ldr	r3, [pc, #152]	; (8000578 <fsm_p+0xe4>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 fc82 	bl	8000dec <Print_TimeOut>
				timer3--;
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <fsm_p+0xe4>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	3b01      	subs	r3, #1
 80004ee:	4a22      	ldr	r2, [pc, #136]	; (8000578 <fsm_p+0xe4>)
 80004f0:	6013      	str	r3, [r2, #0]
				setTimer3 (OneSec) ;
 80004f2:	2064      	movs	r0, #100	; 0x64
 80004f4:	f001 faa6 	bl	8001a44 <setTimer3>
			if(timer3==STOP){
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <fsm_p+0xe4>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d131      	bne.n	8000564 <fsm_p+0xd0>
				status4=P_GREEN;
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <fsm_p+0xdc>)
 8000502:	2220      	movs	r2, #32
 8000504:	601a      	str	r2, [r3, #0]
				timer3 = RED_TIME/OneSec;
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <fsm_p+0xec>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a1e      	ldr	r2, [pc, #120]	; (8000584 <fsm_p+0xf0>)
 800050c:	fb82 1203 	smull	r1, r2, r2, r3
 8000510:	1152      	asrs	r2, r2, #5
 8000512:	17db      	asrs	r3, r3, #31
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	4a18      	ldr	r2, [pc, #96]	; (8000578 <fsm_p+0xe4>)
 8000518:	6013      	str	r3, [r2, #0]
				offP();
 800051a:	f7ff febf 	bl	800029c <offP>
			break;
 800051e:	e021      	b.n	8000564 <fsm_p+0xd0>
			greenP();
 8000520:	f7ff fe94 	bl	800024c <greenP>
			if( timer3_flag == 1) {
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <fsm_p+0xe8>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d10f      	bne.n	800054c <fsm_p+0xb8>
				Print_Mode(P_GREEN);
 800052c:	2020      	movs	r0, #32
 800052e:	f000 fc7b 	bl	8000e28 <Print_Mode>
				Print_TimeOut(timer3);
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <fsm_p+0xe4>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fc58 	bl	8000dec <Print_TimeOut>
				timer3--;
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <fsm_p+0xe4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	3b01      	subs	r3, #1
 8000542:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <fsm_p+0xe4>)
 8000544:	6013      	str	r3, [r2, #0]
				setTimer3 (OneSec) ;
 8000546:	2064      	movs	r0, #100	; 0x64
 8000548:	f001 fa7c 	bl	8001a44 <setTimer3>
			if(timer3==STOP){
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <fsm_p+0xe4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d109      	bne.n	8000568 <fsm_p+0xd4>
				status4=INIT;
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <fsm_p+0xdc>)
 8000556:	4a07      	ldr	r2, [pc, #28]	; (8000574 <fsm_p+0xe0>)
 8000558:	601a      	str	r2, [r3, #0]
			break;
 800055a:	e005      	b.n	8000568 <fsm_p+0xd4>
			break;
 800055c:	bf00      	nop
 800055e:	e004      	b.n	800056a <fsm_p+0xd6>
			break;
 8000560:	bf00      	nop
 8000562:	e002      	b.n	800056a <fsm_p+0xd6>
			break;
 8000564:	bf00      	nop
 8000566:	e000      	b.n	800056a <fsm_p+0xd6>
			break;
 8000568:	bf00      	nop
	}
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000008 	.word	0x20000008
 8000574:	01605b22 	.word	0x01605b22
 8000578:	200000cc 	.word	0x200000cc
 800057c:	200000e0 	.word	0x200000e0
 8000580:	20000010 	.word	0x20000010
 8000584:	51eb851f 	.word	0x51eb851f

08000588 <fsm_automatic_run3>:
void fsm_automatic_run3(){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	switch (status3	) {
 800058c:	4b88      	ldr	r3, [pc, #544]	; (80007b0 <fsm_automatic_run3+0x228>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a88      	ldr	r2, [pc, #544]	; (80007b4 <fsm_automatic_run3+0x22c>)
 8000592:	4293      	cmp	r3, r2
 8000594:	f000 80f3 	beq.w	800077e <fsm_automatic_run3+0x1f6>
 8000598:	4a86      	ldr	r2, [pc, #536]	; (80007b4 <fsm_automatic_run3+0x22c>)
 800059a:	4293      	cmp	r3, r2
 800059c:	f300 832f 	bgt.w	8000bfe <fsm_automatic_run3+0x676>
 80005a0:	2b17      	cmp	r3, #23
 80005a2:	dc23      	bgt.n	80005ec <fsm_automatic_run3+0x64>
 80005a4:	2b0b      	cmp	r3, #11
 80005a6:	f2c0 832a 	blt.w	8000bfe <fsm_automatic_run3+0x676>
 80005aa:	3b0b      	subs	r3, #11
 80005ac:	2b0c      	cmp	r3, #12
 80005ae:	f200 8326 	bhi.w	8000bfe <fsm_automatic_run3+0x676>
 80005b2:	a201      	add	r2, pc, #4	; (adr r2, 80005b8 <fsm_automatic_run3+0x30>)
 80005b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b8:	080007e9 	.word	0x080007e9
 80005bc:	080008cd 	.word	0x080008cd
 80005c0:	080009b1 	.word	0x080009b1
 80005c4:	08000bff 	.word	0x08000bff
 80005c8:	08000bff 	.word	0x08000bff
 80005cc:	08000bff 	.word	0x08000bff
 80005d0:	08000bff 	.word	0x08000bff
 80005d4:	08000bff 	.word	0x08000bff
 80005d8:	08000bff 	.word	0x08000bff
 80005dc:	08000bff 	.word	0x08000bff
 80005e0:	08000aa1 	.word	0x08000aa1
 80005e4:	08000b0f 	.word	0x08000b0f
 80005e8:	08000b87 	.word	0x08000b87
 80005ec:	2b64      	cmp	r3, #100	; 0x64
 80005ee:	f040 8306 	bne.w	8000bfe <fsm_automatic_run3+0x676>
		case RUNNING:
			if( timer0_flag == 1) {
 80005f2:	4b71      	ldr	r3, [pc, #452]	; (80007b8 <fsm_automatic_run3+0x230>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d116      	bne.n	8000628 <fsm_automatic_run3+0xa0>
//				Pri
				Print_Time1(timer);
 80005fa:	4b70      	ldr	r3, [pc, #448]	; (80007bc <fsm_automatic_run3+0x234>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fc4e 	bl	8000ea0 <Print_Time1>
				Print_Time2(timer2);
 8000604:	4b6e      	ldr	r3, [pc, #440]	; (80007c0 <fsm_automatic_run3+0x238>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fc67 	bl	8000edc <Print_Time2>
				timer--;
 800060e:	4b6b      	ldr	r3, [pc, #428]	; (80007bc <fsm_automatic_run3+0x234>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3b01      	subs	r3, #1
 8000614:	4a69      	ldr	r2, [pc, #420]	; (80007bc <fsm_automatic_run3+0x234>)
 8000616:	6013      	str	r3, [r2, #0]
				timer2--;
 8000618:	4b69      	ldr	r3, [pc, #420]	; (80007c0 <fsm_automatic_run3+0x238>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	3b01      	subs	r3, #1
 800061e:	4a68      	ldr	r2, [pc, #416]	; (80007c0 <fsm_automatic_run3+0x238>)
 8000620:	6013      	str	r3, [r2, #0]
				setTimer0 (OneSec);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f001 f9fa 	bl	8001a1c <setTimer0>
//					Print_HELLO();
				}
			if(button_flag[0]==1){
 8000628:	4b66      	ldr	r3, [pc, #408]	; (80007c4 <fsm_automatic_run3+0x23c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d128      	bne.n	8000682 <fsm_automatic_run3+0xfa>
				button_flag[0]=0;
 8000630:	4b64      	ldr	r3, [pc, #400]	; (80007c4 <fsm_automatic_run3+0x23c>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
				status1=Waiting;
 8000636:	4b64      	ldr	r3, [pc, #400]	; (80007c8 <fsm_automatic_run3+0x240>)
 8000638:	2263      	movs	r2, #99	; 0x63
 800063a:	601a      	str	r2, [r3, #0]
				status2=Waiting;
 800063c:	4b63      	ldr	r3, [pc, #396]	; (80007cc <fsm_automatic_run3+0x244>)
 800063e:	2263      	movs	r2, #99	; 0x63
 8000640:	601a      	str	r2, [r3, #0]
				status4=Waiting;
 8000642:	4b63      	ldr	r3, [pc, #396]	; (80007d0 <fsm_automatic_run3+0x248>)
 8000644:	2263      	movs	r2, #99	; 0x63
 8000646:	601a      	str	r2, [r3, #0]
				status3=MAN_RED;
 8000648:	4b59      	ldr	r3, [pc, #356]	; (80007b0 <fsm_automatic_run3+0x228>)
 800064a:	220b      	movs	r2, #11
 800064c:	601a      	str	r2, [r3, #0]
				setTimer0(OneSec);
 800064e:	2064      	movs	r0, #100	; 0x64
 8000650:	f001 f9e4 	bl	8001a1c <setTimer0>
				timer = MAN_RED;
 8000654:	4b59      	ldr	r3, [pc, #356]	; (80007bc <fsm_automatic_run3+0x234>)
 8000656:	220b      	movs	r2, #11
 8000658:	601a      	str	r2, [r3, #0]
				timer2=RED_TIME/OneSec;
 800065a:	4b5e      	ldr	r3, [pc, #376]	; (80007d4 <fsm_automatic_run3+0x24c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a5e      	ldr	r2, [pc, #376]	; (80007d8 <fsm_automatic_run3+0x250>)
 8000660:	fb82 1203 	smull	r1, r2, r2, r3
 8000664:	1152      	asrs	r2, r2, #5
 8000666:	17db      	asrs	r3, r3, #31
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	4a55      	ldr	r2, [pc, #340]	; (80007c0 <fsm_automatic_run3+0x238>)
 800066c:	6013      	str	r3, [r2, #0]
//				setTimerOut1(TIME_OUT);
				timer3= TIME_OUT/OneSec;
 800066e:	4b5b      	ldr	r3, [pc, #364]	; (80007dc <fsm_automatic_run3+0x254>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a59      	ldr	r2, [pc, #356]	; (80007d8 <fsm_automatic_run3+0x250>)
 8000674:	fb82 1203 	smull	r1, r2, r2, r3
 8000678:	1152      	asrs	r2, r2, #5
 800067a:	17db      	asrs	r3, r3, #31
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	4a58      	ldr	r2, [pc, #352]	; (80007e0 <fsm_automatic_run3+0x258>)
 8000680:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[1]==1)
 8000682:	4b50      	ldr	r3, [pc, #320]	; (80007c4 <fsm_automatic_run3+0x23c>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d132      	bne.n	80006f0 <fsm_automatic_run3+0x168>
			{
				button_flag[1] = 0;
 800068a:	4b4e      	ldr	r3, [pc, #312]	; (80007c4 <fsm_automatic_run3+0x23c>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
				Print_HELLO();
 8000690:	f000 fb94 	bl	8000dbc <Print_HELLO>
//				HAL_GPIO_WritePin(GPIOB,ledpa_Pin, GPIO_PIN_RESET);
//				HAL_GPIO_WritePin(GPIOA,ledpb_Pin, GPIO_PIN_SET);
				switch (status1) {
 8000694:	4b4c      	ldr	r3, [pc, #304]	; (80007c8 <fsm_automatic_run3+0x240>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b03      	cmp	r3, #3
 800069a:	d00a      	beq.n	80006b2 <fsm_automatic_run3+0x12a>
 800069c:	2b03      	cmp	r3, #3
 800069e:	dc10      	bgt.n	80006c2 <fsm_automatic_run3+0x13a>
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d002      	beq.n	80006aa <fsm_automatic_run3+0x122>
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d008      	beq.n	80006ba <fsm_automatic_run3+0x132>
						break;
					case AUTO_GREEN:
						status3 = HAND_YELLOW;
						break;
					default:
						break;
 80006a8:	e00b      	b.n	80006c2 <fsm_automatic_run3+0x13a>
						status3 = HAND_GREEN;
 80006aa:	4b41      	ldr	r3, [pc, #260]	; (80007b0 <fsm_automatic_run3+0x228>)
 80006ac:	2216      	movs	r2, #22
 80006ae:	601a      	str	r2, [r3, #0]
						break;
 80006b0:	e008      	b.n	80006c4 <fsm_automatic_run3+0x13c>
						status3 = HAND_RED;
 80006b2:	4b3f      	ldr	r3, [pc, #252]	; (80007b0 <fsm_automatic_run3+0x228>)
 80006b4:	2215      	movs	r2, #21
 80006b6:	601a      	str	r2, [r3, #0]
						break;
 80006b8:	e004      	b.n	80006c4 <fsm_automatic_run3+0x13c>
						status3 = HAND_YELLOW;
 80006ba:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <fsm_automatic_run3+0x228>)
 80006bc:	2217      	movs	r2, #23
 80006be:	601a      	str	r2, [r3, #0]
						break;
 80006c0:	e000      	b.n	80006c4 <fsm_automatic_run3+0x13c>
						break;
 80006c2:	bf00      	nop
				}
				setTimer0 (OneSec);
 80006c4:	2064      	movs	r0, #100	; 0x64
 80006c6:	f001 f9a9 	bl	8001a1c <setTimer0>
//				setTimerOut1(TIME_OUT);
				timer=TIME_OUT/OneSec;
 80006ca:	4b44      	ldr	r3, [pc, #272]	; (80007dc <fsm_automatic_run3+0x254>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a42      	ldr	r2, [pc, #264]	; (80007d8 <fsm_automatic_run3+0x250>)
 80006d0:	fb82 1203 	smull	r1, r2, r2, r3
 80006d4:	1152      	asrs	r2, r2, #5
 80006d6:	17db      	asrs	r3, r3, #31
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	4a38      	ldr	r2, [pc, #224]	; (80007bc <fsm_automatic_run3+0x234>)
 80006dc:	6013      	str	r3, [r2, #0]
				status1 = Waiting;
 80006de:	4b3a      	ldr	r3, [pc, #232]	; (80007c8 <fsm_automatic_run3+0x240>)
 80006e0:	2263      	movs	r2, #99	; 0x63
 80006e2:	601a      	str	r2, [r3, #0]
				status2 = Waiting;
 80006e4:	4b39      	ldr	r3, [pc, #228]	; (80007cc <fsm_automatic_run3+0x244>)
 80006e6:	2263      	movs	r2, #99	; 0x63
 80006e8:	601a      	str	r2, [r3, #0]
				status4 = Waiting;
 80006ea:	4b39      	ldr	r3, [pc, #228]	; (80007d0 <fsm_automatic_run3+0x248>)
 80006ec:	2263      	movs	r2, #99	; 0x63
 80006ee:	601a      	str	r2, [r3, #0]

			}
			if(button_flag[3]==1){
 80006f0:	4b34      	ldr	r3, [pc, #208]	; (80007c4 <fsm_automatic_run3+0x23c>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	f040 8284 	bne.w	8000c02 <fsm_automatic_run3+0x67a>
				button_flag[3]=0;
 80006fa:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <fsm_automatic_run3+0x23c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
				if(status1== AUTO_RED){//oke
 8000700:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <fsm_automatic_run3+0x240>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d10c      	bne.n	8000722 <fsm_automatic_run3+0x19a>
					status4=P_GREEN;
 8000708:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <fsm_automatic_run3+0x248>)
 800070a:	2220      	movs	r2, #32
 800070c:	601a      	str	r2, [r3, #0]
					redP();
 800070e:	f7ff fd89 	bl	8000224 <redP>
//					setTimerOut2(1000);
					setTimer3(OneSec);
 8000712:	2064      	movs	r0, #100	; 0x64
 8000714:	f001 f996 	bl	8001a44 <setTimer3>
					timer3=timer-1;
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <fsm_automatic_run3+0x234>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3b01      	subs	r3, #1
 800071e:	4a30      	ldr	r2, [pc, #192]	; (80007e0 <fsm_automatic_run3+0x258>)
 8000720:	6013      	str	r3, [r2, #0]
				}
				if(status1== AUTO_GREEN){//notoke
 8000722:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <fsm_automatic_run3+0x240>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b02      	cmp	r3, #2
 8000728:	d115      	bne.n	8000756 <fsm_automatic_run3+0x1ce>
					status4=P_RED;
 800072a:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <fsm_automatic_run3+0x248>)
 800072c:	221f      	movs	r2, #31
 800072e:	601a      	str	r2, [r3, #0]
					redP();
 8000730:	f7ff fd78 	bl	8000224 <redP>
//					setTimerOut2(timer*100+YELLOW_TIME);
					setTimer3(OneSec);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f001 f985 	bl	8001a44 <setTimer3>
					timer3=timer+YELLOW_TIME/OneSec-1;
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <fsm_automatic_run3+0x25c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a26      	ldr	r2, [pc, #152]	; (80007d8 <fsm_automatic_run3+0x250>)
 8000740:	fb82 1203 	smull	r1, r2, r2, r3
 8000744:	1152      	asrs	r2, r2, #5
 8000746:	17db      	asrs	r3, r3, #31
 8000748:	1ad2      	subs	r2, r2, r3
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <fsm_automatic_run3+0x234>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	3b01      	subs	r3, #1
 8000752:	4a23      	ldr	r2, [pc, #140]	; (80007e0 <fsm_automatic_run3+0x258>)
 8000754:	6013      	str	r3, [r2, #0]
				}
				if(status1== AUTO_YELLOW){//notoke
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <fsm_automatic_run3+0x240>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b03      	cmp	r3, #3
 800075c:	d10c      	bne.n	8000778 <fsm_automatic_run3+0x1f0>
					status4=P_RED;
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <fsm_automatic_run3+0x248>)
 8000760:	221f      	movs	r2, #31
 8000762:	601a      	str	r2, [r3, #0]
					offP();
 8000764:	f7ff fd9a 	bl	800029c <offP>
//					setTimer2(timer*100);
					setTimer3(OneSec);
 8000768:	2064      	movs	r0, #100	; 0x64
 800076a:	f001 f96b 	bl	8001a44 <setTimer3>
					timer3=timer-1;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <fsm_automatic_run3+0x234>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	3b01      	subs	r3, #1
 8000774:	4a1a      	ldr	r2, [pc, #104]	; (80007e0 <fsm_automatic_run3+0x258>)
 8000776:	6013      	str	r3, [r2, #0]
				}
				Print_HELLO();
 8000778:	f000 fb20 	bl	8000dbc <Print_HELLO>
			}
			break;
 800077c:	e241      	b.n	8000c02 <fsm_automatic_run3+0x67a>

		case INIT:
			Print_Mode(INIT);
 800077e:	480d      	ldr	r0, [pc, #52]	; (80007b4 <fsm_automatic_run3+0x22c>)
 8000780:	f000 fb52 	bl	8000e28 <Print_Mode>
			Print_ERROR();
 8000784:	f000 fbc8 	bl	8000f18 <Print_ERROR>
//			setTimerOut1(1);
			timer3=0;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <fsm_automatic_run3+0x258>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
			setTimer0(OneSec);
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f001 f944 	bl	8001a1c <setTimer0>
			status1=INIT;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <fsm_automatic_run3+0x240>)
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <fsm_automatic_run3+0x22c>)
 8000798:	601a      	str	r2, [r3, #0]
			status2=INIT;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <fsm_automatic_run3+0x244>)
 800079c:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <fsm_automatic_run3+0x22c>)
 800079e:	601a      	str	r2, [r3, #0]
			status4=INIT;
 80007a0:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <fsm_automatic_run3+0x248>)
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <fsm_automatic_run3+0x22c>)
 80007a4:	601a      	str	r2, [r3, #0]
			status3=RUNNING;
 80007a6:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <fsm_automatic_run3+0x228>)
 80007a8:	2264      	movs	r2, #100	; 0x64
 80007aa:	601a      	str	r2, [r3, #0]



			break;
 80007ac:	e230      	b.n	8000c10 <fsm_automatic_run3+0x688>
 80007ae:	bf00      	nop
 80007b0:	2000000c 	.word	0x2000000c
 80007b4:	01605b22 	.word	0x01605b22
 80007b8:	200000d8 	.word	0x200000d8
 80007bc:	200000c4 	.word	0x200000c4
 80007c0:	200000c8 	.word	0x200000c8
 80007c4:	200000f8 	.word	0x200000f8
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000004 	.word	0x20000004
 80007d0:	20000008 	.word	0x20000008
 80007d4:	20000010 	.word	0x20000010
 80007d8:	51eb851f 	.word	0x51eb851f
 80007dc:	2000001c 	.word	0x2000001c
 80007e0:	200000cc 	.word	0x200000cc
 80007e4:	20000018 	.word	0x20000018
		case MAN_RED:
			toogleRed();
 80007e8:	f7ff fcb0 	bl	800014c <toogleRed>
			toogleRed1();
 80007ec:	f7ff fcea 	bl	80001c4 <toogleRed1>
			if( timer0_flag == 1) {
 80007f0:	4b9f      	ldr	r3, [pc, #636]	; (8000a70 <fsm_automatic_run3+0x4e8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d116      	bne.n	8000826 <fsm_automatic_run3+0x29e>
				Print_Mode(timer);
 80007f8:	4b9e      	ldr	r3, [pc, #632]	; (8000a74 <fsm_automatic_run3+0x4ec>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fb13 	bl	8000e28 <Print_Mode>
				Print_Time(timer2);
 8000802:	4b9d      	ldr	r3, [pc, #628]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fb2c 	bl	8000e64 <Print_Time>
				Print_TimeOut(timer3);
 800080c:	4b9b      	ldr	r3, [pc, #620]	; (8000a7c <fsm_automatic_run3+0x4f4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f000 faeb 	bl	8000dec <Print_TimeOut>
				timer3--;
 8000816:	4b99      	ldr	r3, [pc, #612]	; (8000a7c <fsm_automatic_run3+0x4f4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3b01      	subs	r3, #1
 800081c:	4a97      	ldr	r2, [pc, #604]	; (8000a7c <fsm_automatic_run3+0x4f4>)
 800081e:	6013      	str	r3, [r2, #0]
				setTimer0 (OneSec) ;
 8000820:	2064      	movs	r0, #100	; 0x64
 8000822:	f001 f8fb 	bl	8001a1c <setTimer0>
				}
			if(timer2>99)timer2=0;
 8000826:	4b94      	ldr	r3, [pc, #592]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b63      	cmp	r3, #99	; 0x63
 800082c:	dd02      	ble.n	8000834 <fsm_automatic_run3+0x2ac>
 800082e:	4b92      	ldr	r3, [pc, #584]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
			RED_TIME=timer2*100;
 8000834:	4b90      	ldr	r3, [pc, #576]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2264      	movs	r2, #100	; 0x64
 800083a:	fb02 f303 	mul.w	r3, r2, r3
 800083e:	4a90      	ldr	r2, [pc, #576]	; (8000a80 <fsm_automatic_run3+0x4f8>)
 8000840:	6013      	str	r3, [r2, #0]
			if(button_flag[0]==1){
 8000842:	4b90      	ldr	r3, [pc, #576]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d11f      	bne.n	800088a <fsm_automatic_run3+0x302>
				button_flag[0]=0;
 800084a:	4b8e      	ldr	r3, [pc, #568]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
				timer2=GREEN_TIME/OneSec;
 8000850:	4b8d      	ldr	r3, [pc, #564]	; (8000a88 <fsm_automatic_run3+0x500>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a8d      	ldr	r2, [pc, #564]	; (8000a8c <fsm_automatic_run3+0x504>)
 8000856:	fb82 1203 	smull	r1, r2, r2, r3
 800085a:	1152      	asrs	r2, r2, #5
 800085c:	17db      	asrs	r3, r3, #31
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	4a85      	ldr	r2, [pc, #532]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 8000862:	6013      	str	r3, [r2, #0]
				timer = MAN_GREEN;
 8000864:	4b83      	ldr	r3, [pc, #524]	; (8000a74 <fsm_automatic_run3+0x4ec>)
 8000866:	220c      	movs	r2, #12
 8000868:	601a      	str	r2, [r3, #0]
				status3=MAN_GREEN;
 800086a:	4b89      	ldr	r3, [pc, #548]	; (8000a90 <fsm_automatic_run3+0x508>)
 800086c:	220c      	movs	r2, #12
 800086e:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000870:	2064      	movs	r0, #100	; 0x64
 8000872:	f001 f8d3 	bl	8001a1c <setTimer0>
//				setTimerOut1(TIME_OUT);
				timer3= TIME_OUT/OneSec;
 8000876:	4b87      	ldr	r3, [pc, #540]	; (8000a94 <fsm_automatic_run3+0x50c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a84      	ldr	r2, [pc, #528]	; (8000a8c <fsm_automatic_run3+0x504>)
 800087c:	fb82 1203 	smull	r1, r2, r2, r3
 8000880:	1152      	asrs	r2, r2, #5
 8000882:	17db      	asrs	r3, r3, #31
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	4a7d      	ldr	r2, [pc, #500]	; (8000a7c <fsm_automatic_run3+0x4f4>)
 8000888:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[1]==1){
 800088a:	4b7e      	ldr	r3, [pc, #504]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d107      	bne.n	80008a2 <fsm_automatic_run3+0x31a>
				button_flag[1]=0;
 8000892:	4b7c      	ldr	r3, [pc, #496]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
				timer2++;
 8000898:	4b77      	ldr	r3, [pc, #476]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a76      	ldr	r2, [pc, #472]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 80008a0:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 80008a2:	4b78      	ldr	r3, [pc, #480]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d107      	bne.n	80008ba <fsm_automatic_run3+0x332>
				button_flag[2]=0;
 80008aa:	4b76      	ldr	r3, [pc, #472]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
				timer2--;
 80008b0:	4b71      	ldr	r3, [pc, #452]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	4a70      	ldr	r2, [pc, #448]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 80008b8:	6013      	str	r3, [r2, #0]
			}
			if(timer3==STOP){
 80008ba:	4b70      	ldr	r3, [pc, #448]	; (8000a7c <fsm_automatic_run3+0x4f4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	f040 81a1 	bne.w	8000c06 <fsm_automatic_run3+0x67e>
				status3=INIT;
 80008c4:	4b72      	ldr	r3, [pc, #456]	; (8000a90 <fsm_automatic_run3+0x508>)
 80008c6:	4a74      	ldr	r2, [pc, #464]	; (8000a98 <fsm_automatic_run3+0x510>)
 80008c8:	601a      	str	r2, [r3, #0]
			}
			break;
 80008ca:	e19c      	b.n	8000c06 <fsm_automatic_run3+0x67e>
		case MAN_GREEN:

			if( timer0_flag == 1) {
 80008cc:	4b68      	ldr	r3, [pc, #416]	; (8000a70 <fsm_automatic_run3+0x4e8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d116      	bne.n	8000902 <fsm_automatic_run3+0x37a>
				Print_Mode(timer);
 80008d4:	4b67      	ldr	r3, [pc, #412]	; (8000a74 <fsm_automatic_run3+0x4ec>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 faa5 	bl	8000e28 <Print_Mode>
				Print_Time(timer2);
 80008de:	4b66      	ldr	r3, [pc, #408]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fabe 	bl	8000e64 <Print_Time>
				Print_TimeOut(timer3);
 80008e8:	4b64      	ldr	r3, [pc, #400]	; (8000a7c <fsm_automatic_run3+0x4f4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fa7d 	bl	8000dec <Print_TimeOut>
				timer3--;
 80008f2:	4b62      	ldr	r3, [pc, #392]	; (8000a7c <fsm_automatic_run3+0x4f4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	4a60      	ldr	r2, [pc, #384]	; (8000a7c <fsm_automatic_run3+0x4f4>)
 80008fa:	6013      	str	r3, [r2, #0]
				setTimer0 (OneSec) ;
 80008fc:	2064      	movs	r0, #100	; 0x64
 80008fe:	f001 f88d 	bl	8001a1c <setTimer0>
				}
			toogleGreen();
 8000902:	f7ff fc37 	bl	8000174 <toogleGreen>
			toogleGreen1();
 8000906:	f7ff fc6d 	bl	80001e4 <toogleGreen1>
			if(timer2>99)timer2=0;
 800090a:	4b5b      	ldr	r3, [pc, #364]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b63      	cmp	r3, #99	; 0x63
 8000910:	dd02      	ble.n	8000918 <fsm_automatic_run3+0x390>
 8000912:	4b59      	ldr	r3, [pc, #356]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]

			GREEN_TIME=timer2*100;
 8000918:	4b57      	ldr	r3, [pc, #348]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2264      	movs	r2, #100	; 0x64
 800091e:	fb02 f303 	mul.w	r3, r2, r3
 8000922:	4a59      	ldr	r2, [pc, #356]	; (8000a88 <fsm_automatic_run3+0x500>)
 8000924:	6013      	str	r3, [r2, #0]
			if(button_flag[0]==1){
 8000926:	4b57      	ldr	r3, [pc, #348]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d11f      	bne.n	800096e <fsm_automatic_run3+0x3e6>
				button_flag[0]=0;
 800092e:	4b55      	ldr	r3, [pc, #340]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
				timer2=YELLOW_TIME/OneSec;
 8000934:	4b59      	ldr	r3, [pc, #356]	; (8000a9c <fsm_automatic_run3+0x514>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a54      	ldr	r2, [pc, #336]	; (8000a8c <fsm_automatic_run3+0x504>)
 800093a:	fb82 1203 	smull	r1, r2, r2, r3
 800093e:	1152      	asrs	r2, r2, #5
 8000940:	17db      	asrs	r3, r3, #31
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	4a4c      	ldr	r2, [pc, #304]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 8000946:	6013      	str	r3, [r2, #0]
				status3=MAN_YELLOW;
 8000948:	4b51      	ldr	r3, [pc, #324]	; (8000a90 <fsm_automatic_run3+0x508>)
 800094a:	220d      	movs	r2, #13
 800094c:	601a      	str	r2, [r3, #0]
				timer = MAN_YELLOW;
 800094e:	4b49      	ldr	r3, [pc, #292]	; (8000a74 <fsm_automatic_run3+0x4ec>)
 8000950:	220d      	movs	r2, #13
 8000952:	601a      	str	r2, [r3, #0]
				setTimer0(OneSec);
 8000954:	2064      	movs	r0, #100	; 0x64
 8000956:	f001 f861 	bl	8001a1c <setTimer0>
//				setTimerOut1(TIME_OUT);
				timer3= TIME_OUT/OneSec;
 800095a:	4b4e      	ldr	r3, [pc, #312]	; (8000a94 <fsm_automatic_run3+0x50c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a4b      	ldr	r2, [pc, #300]	; (8000a8c <fsm_automatic_run3+0x504>)
 8000960:	fb82 1203 	smull	r1, r2, r2, r3
 8000964:	1152      	asrs	r2, r2, #5
 8000966:	17db      	asrs	r3, r3, #31
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	4a44      	ldr	r2, [pc, #272]	; (8000a7c <fsm_automatic_run3+0x4f4>)
 800096c:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[1]==1){
 800096e:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d107      	bne.n	8000986 <fsm_automatic_run3+0x3fe>
				button_flag[1]=0;
 8000976:	4b43      	ldr	r3, [pc, #268]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
				timer2++;
 800097c:	4b3e      	ldr	r3, [pc, #248]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	3301      	adds	r3, #1
 8000982:	4a3d      	ldr	r2, [pc, #244]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 8000984:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000986:	4b3f      	ldr	r3, [pc, #252]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d107      	bne.n	800099e <fsm_automatic_run3+0x416>
				button_flag[2]=0;
 800098e:	4b3d      	ldr	r3, [pc, #244]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
				timer2--;
 8000994:	4b38      	ldr	r3, [pc, #224]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3b01      	subs	r3, #1
 800099a:	4a37      	ldr	r2, [pc, #220]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 800099c:	6013      	str	r3, [r2, #0]
			}
			if(timer3==STOP){
 800099e:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <fsm_automatic_run3+0x4f4>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f040 8131 	bne.w	8000c0a <fsm_automatic_run3+0x682>
				status3=INIT;
 80009a8:	4b39      	ldr	r3, [pc, #228]	; (8000a90 <fsm_automatic_run3+0x508>)
 80009aa:	4a3b      	ldr	r2, [pc, #236]	; (8000a98 <fsm_automatic_run3+0x510>)
 80009ac:	601a      	str	r2, [r3, #0]
			}

			break;
 80009ae:	e12c      	b.n	8000c0a <fsm_automatic_run3+0x682>
		case MAN_YELLOW:
			if( timer0_flag == 1) {
 80009b0:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <fsm_automatic_run3+0x4e8>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d116      	bne.n	80009e6 <fsm_automatic_run3+0x45e>
				Print_Mode(timer);
 80009b8:	4b2e      	ldr	r3, [pc, #184]	; (8000a74 <fsm_automatic_run3+0x4ec>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 fa33 	bl	8000e28 <Print_Mode>
				Print_Time(timer2);
 80009c2:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fa4c 	bl	8000e64 <Print_Time>
				Print_TimeOut(timer3);
 80009cc:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <fsm_automatic_run3+0x4f4>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fa0b 	bl	8000dec <Print_TimeOut>
				setTimer0 (OneSec) ;
 80009d6:	2064      	movs	r0, #100	; 0x64
 80009d8:	f001 f820 	bl	8001a1c <setTimer0>
				timer3--;
 80009dc:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <fsm_automatic_run3+0x4f4>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	4a26      	ldr	r2, [pc, #152]	; (8000a7c <fsm_automatic_run3+0x4f4>)
 80009e4:	6013      	str	r3, [r2, #0]
				}
			toogleYellow();
 80009e6:	f7ff fbd9 	bl	800019c <toogleYellow>
			toogleYellow1();
 80009ea:	f7ff fc0b 	bl	8000204 <toogleYellow1>
			if(timer2>99)timer2=3;
 80009ee:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b63      	cmp	r3, #99	; 0x63
 80009f4:	dd02      	ble.n	80009fc <fsm_automatic_run3+0x474>
 80009f6:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 80009f8:	2203      	movs	r2, #3
 80009fa:	601a      	str	r2, [r3, #0]
			if(timer2<3)timer2=3;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	dc02      	bgt.n	8000a0a <fsm_automatic_run3+0x482>
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 8000a06:	2203      	movs	r2, #3
 8000a08:	601a      	str	r2, [r3, #0]
			YELLOW_TIME=timer2*100;
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2264      	movs	r2, #100	; 0x64
 8000a10:	fb02 f303 	mul.w	r3, r2, r3
 8000a14:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <fsm_automatic_run3+0x514>)
 8000a16:	6013      	str	r3, [r2, #0]
			if(button_flag[0]==1){
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d105      	bne.n	8000a2c <fsm_automatic_run3+0x4a4>
				button_flag[0]=0;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
				status3=INIT;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <fsm_automatic_run3+0x508>)
 8000a28:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <fsm_automatic_run3+0x510>)
 8000a2a:	601a      	str	r2, [r3, #0]
			}
			if(button_flag[1]==1){
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d107      	bne.n	8000a44 <fsm_automatic_run3+0x4bc>
				button_flag[1]=0;
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	605a      	str	r2, [r3, #4]
				timer2++;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 8000a42:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d107      	bne.n	8000a5c <fsm_automatic_run3+0x4d4>
				button_flag[2]=0;
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <fsm_automatic_run3+0x4fc>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
				timer2--;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <fsm_automatic_run3+0x4f0>)
 8000a5a:	6013      	str	r3, [r2, #0]
			}
			if(timer3==STOP){
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <fsm_automatic_run3+0x4f4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f040 80d4 	bne.w	8000c0e <fsm_automatic_run3+0x686>
				status3=INIT;
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <fsm_automatic_run3+0x508>)
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <fsm_automatic_run3+0x510>)
 8000a6a:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a6c:	e0cf      	b.n	8000c0e <fsm_automatic_run3+0x686>
 8000a6e:	bf00      	nop
 8000a70:	200000d8 	.word	0x200000d8
 8000a74:	200000c4 	.word	0x200000c4
 8000a78:	200000c8 	.word	0x200000c8
 8000a7c:	200000cc 	.word	0x200000cc
 8000a80:	20000010 	.word	0x20000010
 8000a84:	200000f8 	.word	0x200000f8
 8000a88:	20000014 	.word	0x20000014
 8000a8c:	51eb851f 	.word	0x51eb851f
 8000a90:	2000000c 	.word	0x2000000c
 8000a94:	2000001c 	.word	0x2000001c
 8000a98:	01605b22 	.word	0x01605b22
 8000a9c:	20000018 	.word	0x20000018
		case HAND_RED:
			if(timer0_flag == 1) {
 8000aa0:	4b5c      	ldr	r3, [pc, #368]	; (8000c14 <fsm_automatic_run3+0x68c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d10f      	bne.n	8000ac8 <fsm_automatic_run3+0x540>
				timer--;
 8000aa8:	4b5b      	ldr	r3, [pc, #364]	; (8000c18 <fsm_automatic_run3+0x690>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	4a5a      	ldr	r2, [pc, #360]	; (8000c18 <fsm_automatic_run3+0x690>)
 8000ab0:	6013      	str	r3, [r2, #0]
				Print_Mode(HAND_RED);
 8000ab2:	2015      	movs	r0, #21
 8000ab4:	f000 f9b8 	bl	8000e28 <Print_Mode>
				Print_TimeOut(timer);
 8000ab8:	4b57      	ldr	r3, [pc, #348]	; (8000c18 <fsm_automatic_run3+0x690>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 f995 	bl	8000dec <Print_TimeOut>
				setTimer0 (OneSec) ;
 8000ac2:	2064      	movs	r0, #100	; 0x64
 8000ac4:	f000 ffaa 	bl	8001a1c <setTimer0>
			}

			if(button_flag[1]==1){
 8000ac8:	4b54      	ldr	r3, [pc, #336]	; (8000c1c <fsm_automatic_run3+0x694>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d112      	bne.n	8000af6 <fsm_automatic_run3+0x56e>
				button_flag[1]=0;
 8000ad0:	4b52      	ldr	r3, [pc, #328]	; (8000c1c <fsm_automatic_run3+0x694>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
				status3=HAND_GREEN;
 8000ad6:	4b52      	ldr	r3, [pc, #328]	; (8000c20 <fsm_automatic_run3+0x698>)
 8000ad8:	2216      	movs	r2, #22
 8000ada:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000adc:	2064      	movs	r0, #100	; 0x64
 8000ade:	f000 ff9d 	bl	8001a1c <setTimer0>
//				setTimerOut1(TIME_OUT);
				timer=TIME_OUT/OneSec;
 8000ae2:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <fsm_automatic_run3+0x69c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a50      	ldr	r2, [pc, #320]	; (8000c28 <fsm_automatic_run3+0x6a0>)
 8000ae8:	fb82 1203 	smull	r1, r2, r2, r3
 8000aec:	1152      	asrs	r2, r2, #5
 8000aee:	17db      	asrs	r3, r3, #31
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	4a49      	ldr	r2, [pc, #292]	; (8000c18 <fsm_automatic_run3+0x690>)
 8000af4:	6013      	str	r3, [r2, #0]
			}
			if(timer==STOP){
 8000af6:	4b48      	ldr	r3, [pc, #288]	; (8000c18 <fsm_automatic_run3+0x690>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <fsm_automatic_run3+0x57c>
				status3=INIT;
 8000afe:	4b48      	ldr	r3, [pc, #288]	; (8000c20 <fsm_automatic_run3+0x698>)
 8000b00:	4a4a      	ldr	r2, [pc, #296]	; (8000c2c <fsm_automatic_run3+0x6a4>)
 8000b02:	601a      	str	r2, [r3, #0]
			}
			 toogleGreen1();
 8000b04:	f7ff fb6e 	bl	80001e4 <toogleGreen1>
			 toogleRed();
 8000b08:	f7ff fb20 	bl	800014c <toogleRed>
			break;
 8000b0c:	e080      	b.n	8000c10 <fsm_automatic_run3+0x688>
		case HAND_GREEN:

			if(timer0_flag == 1) {
 8000b0e:	4b41      	ldr	r3, [pc, #260]	; (8000c14 <fsm_automatic_run3+0x68c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d10f      	bne.n	8000b36 <fsm_automatic_run3+0x5ae>
				timer--;
 8000b16:	4b40      	ldr	r3, [pc, #256]	; (8000c18 <fsm_automatic_run3+0x690>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	4a3e      	ldr	r2, [pc, #248]	; (8000c18 <fsm_automatic_run3+0x690>)
 8000b1e:	6013      	str	r3, [r2, #0]
				Print_Mode(HAND_GREEN);
 8000b20:	2016      	movs	r0, #22
 8000b22:	f000 f981 	bl	8000e28 <Print_Mode>
				Print_TimeOut(timer);
 8000b26:	4b3c      	ldr	r3, [pc, #240]	; (8000c18 <fsm_automatic_run3+0x690>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f95e 	bl	8000dec <Print_TimeOut>
				setTimer0 (OneSec) ;
 8000b30:	2064      	movs	r0, #100	; 0x64
 8000b32:	f000 ff73 	bl	8001a1c <setTimer0>
				}

			if(button_flag[1]==1){
 8000b36:	4b39      	ldr	r3, [pc, #228]	; (8000c1c <fsm_automatic_run3+0x694>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d117      	bne.n	8000b6e <fsm_automatic_run3+0x5e6>
				button_flag[1]=0;
 8000b3e:	4b37      	ldr	r3, [pc, #220]	; (8000c1c <fsm_automatic_run3+0x694>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
				status3=HAND_YELLOW;
 8000b44:	4b36      	ldr	r3, [pc, #216]	; (8000c20 <fsm_automatic_run3+0x698>)
 8000b46:	2217      	movs	r2, #23
 8000b48:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000b4a:	2064      	movs	r0, #100	; 0x64
 8000b4c:	f000 ff66 	bl	8001a1c <setTimer0>
				setTimerOut1(TIME_OUT);
 8000b50:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <fsm_automatic_run3+0x69c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 ff89 	bl	8001a6c <setTimerOut1>
				timer=TIME_OUT/OneSec;
 8000b5a:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <fsm_automatic_run3+0x69c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a32      	ldr	r2, [pc, #200]	; (8000c28 <fsm_automatic_run3+0x6a0>)
 8000b60:	fb82 1203 	smull	r1, r2, r2, r3
 8000b64:	1152      	asrs	r2, r2, #5
 8000b66:	17db      	asrs	r3, r3, #31
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	4a2b      	ldr	r2, [pc, #172]	; (8000c18 <fsm_automatic_run3+0x690>)
 8000b6c:	6013      	str	r3, [r2, #0]
			}
			if(timer==STOP){
 8000b6e:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <fsm_automatic_run3+0x690>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d102      	bne.n	8000b7c <fsm_automatic_run3+0x5f4>
				status3=INIT;
 8000b76:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <fsm_automatic_run3+0x698>)
 8000b78:	4a2c      	ldr	r2, [pc, #176]	; (8000c2c <fsm_automatic_run3+0x6a4>)
 8000b7a:	601a      	str	r2, [r3, #0]
			}
			toogleRed1();
 8000b7c:	f7ff fb22 	bl	80001c4 <toogleRed1>
			toogleGreen();
 8000b80:	f7ff faf8 	bl	8000174 <toogleGreen>
			break;
 8000b84:	e044      	b.n	8000c10 <fsm_automatic_run3+0x688>
		case HAND_YELLOW:
			if(timer0_flag == 1) {
 8000b86:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <fsm_automatic_run3+0x68c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d10f      	bne.n	8000bae <fsm_automatic_run3+0x626>
				timer--;
 8000b8e:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <fsm_automatic_run3+0x690>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	4a20      	ldr	r2, [pc, #128]	; (8000c18 <fsm_automatic_run3+0x690>)
 8000b96:	6013      	str	r3, [r2, #0]
				Print_Mode(HAND_YELLOW);
 8000b98:	2017      	movs	r0, #23
 8000b9a:	f000 f945 	bl	8000e28 <Print_Mode>
				Print_TimeOut(timer);
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <fsm_automatic_run3+0x690>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f922 	bl	8000dec <Print_TimeOut>
				setTimer0 (OneSec) ;
 8000ba8:	2064      	movs	r0, #100	; 0x64
 8000baa:	f000 ff37 	bl	8001a1c <setTimer0>
				}
			if(button_flag[1]==1){
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <fsm_automatic_run3+0x694>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d117      	bne.n	8000be6 <fsm_automatic_run3+0x65e>
				button_flag[1]=0;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <fsm_automatic_run3+0x694>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	605a      	str	r2, [r3, #4]
				status3=HAND_RED;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <fsm_automatic_run3+0x698>)
 8000bbe:	2215      	movs	r2, #21
 8000bc0:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000bc2:	2064      	movs	r0, #100	; 0x64
 8000bc4:	f000 ff2a 	bl	8001a1c <setTimer0>
				setTimerOut1(TIME_OUT);
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <fsm_automatic_run3+0x69c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 ff4d 	bl	8001a6c <setTimerOut1>
				timer=TIME_OUT/OneSec;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <fsm_automatic_run3+0x69c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <fsm_automatic_run3+0x6a0>)
 8000bd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bdc:	1152      	asrs	r2, r2, #5
 8000bde:	17db      	asrs	r3, r3, #31
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <fsm_automatic_run3+0x690>)
 8000be4:	6013      	str	r3, [r2, #0]
			}
			if(timer==STOP){
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <fsm_automatic_run3+0x690>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d102      	bne.n	8000bf4 <fsm_automatic_run3+0x66c>
				status3=INIT;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <fsm_automatic_run3+0x698>)
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <fsm_automatic_run3+0x6a4>)
 8000bf2:	601a      	str	r2, [r3, #0]
			}
			toogleRed1();
 8000bf4:	f7ff fae6 	bl	80001c4 <toogleRed1>
			toogleYellow();
 8000bf8:	f7ff fad0 	bl	800019c <toogleYellow>
			break;
 8000bfc:	e008      	b.n	8000c10 <fsm_automatic_run3+0x688>

		default:
			break;
 8000bfe:	bf00      	nop
 8000c00:	e006      	b.n	8000c10 <fsm_automatic_run3+0x688>
			break;
 8000c02:	bf00      	nop
 8000c04:	e004      	b.n	8000c10 <fsm_automatic_run3+0x688>
			break;
 8000c06:	bf00      	nop
 8000c08:	e002      	b.n	8000c10 <fsm_automatic_run3+0x688>
			break;
 8000c0a:	bf00      	nop
 8000c0c:	e000      	b.n	8000c10 <fsm_automatic_run3+0x688>
			break;
 8000c0e:	bf00      	nop
	}
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200000d8 	.word	0x200000d8
 8000c18:	200000c4 	.word	0x200000c4
 8000c1c:	200000f8 	.word	0x200000f8
 8000c20:	2000000c 	.word	0x2000000c
 8000c24:	2000001c 	.word	0x2000001c
 8000c28:	51eb851f 	.word	0x51eb851f
 8000c2c:	01605b22 	.word	0x01605b22

08000c30 <subkeyProcess>:

//unsigned char is_button_pressed_1s()


void subkeyProcess(unsigned char i)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
	button_flag[i] = 1;
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <subkeyProcess+0x20>)
 8000c3e:	2101      	movs	r1, #1
 8000c40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	200000f8 	.word	0x200000f8

08000c54 <button_reading>:
void button_reading()
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	e094      	b.n	8000d8a <button_reading+0x136>
	{
		debounceButtonBuffer0[i] = debounceButtonBuffer1[i];
 8000c60:	79fa      	ldrb	r2, [r7, #7]
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	494d      	ldr	r1, [pc, #308]	; (8000d9c <button_reading+0x148>)
 8000c66:	5c89      	ldrb	r1, [r1, r2]
 8000c68:	4a4d      	ldr	r2, [pc, #308]	; (8000da0 <button_reading+0x14c>)
 8000c6a:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 8000c6c:	79fa      	ldrb	r2, [r7, #7]
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	494c      	ldr	r1, [pc, #304]	; (8000da4 <button_reading+0x150>)
 8000c72:	5c89      	ldrb	r1, [r1, r2]
 8000c74:	4a49      	ldr	r2, [pc, #292]	; (8000d9c <button_reading+0x148>)
 8000c76:	54d1      	strb	r1, [r2, r3]
		switch (i)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d833      	bhi.n	8000ce6 <button_reading+0x92>
 8000c7e:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <button_reading+0x30>)
 8000c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c84:	08000c95 	.word	0x08000c95
 8000c88:	08000ca9 	.word	0x08000ca9
 8000c8c:	08000cbd 	.word	0x08000cbd
 8000c90:	08000cd1 	.word	0x08000cd1
		{
			case 0:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_1_GPIO_Port, button_1_Pin);
 8000c94:	79fc      	ldrb	r4, [r7, #7]
 8000c96:	2102      	movs	r1, #2
 8000c98:	4843      	ldr	r0, [pc, #268]	; (8000da8 <button_reading+0x154>)
 8000c9a:	f001 fa49 	bl	8002130 <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b40      	ldr	r3, [pc, #256]	; (8000da4 <button_reading+0x150>)
 8000ca4:	551a      	strb	r2, [r3, r4]
				break;
 8000ca6:	e023      	b.n	8000cf0 <button_reading+0x9c>
			case 1:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_2_GPIO_Port, button_2_Pin);
 8000ca8:	79fc      	ldrb	r4, [r7, #7]
 8000caa:	2110      	movs	r1, #16
 8000cac:	483e      	ldr	r0, [pc, #248]	; (8000da8 <button_reading+0x154>)
 8000cae:	f001 fa3f 	bl	8002130 <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <button_reading+0x150>)
 8000cb8:	551a      	strb	r2, [r3, r4]
				break;
 8000cba:	e019      	b.n	8000cf0 <button_reading+0x9c>
			case 2:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_3_GPIO_Port, button_3_Pin);
 8000cbc:	79fc      	ldrb	r4, [r7, #7]
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	483a      	ldr	r0, [pc, #232]	; (8000dac <button_reading+0x158>)
 8000cc2:	f001 fa35 	bl	8002130 <HAL_GPIO_ReadPin>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <button_reading+0x150>)
 8000ccc:	551a      	strb	r2, [r3, r4]
				break;
 8000cce:	e00f      	b.n	8000cf0 <button_reading+0x9c>
			case 3:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_p_GPIO_Port, button_p_Pin);
 8000cd0:	79fc      	ldrb	r4, [r7, #7]
 8000cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd6:	4836      	ldr	r0, [pc, #216]	; (8000db0 <button_reading+0x15c>)
 8000cd8:	f001 fa2a 	bl	8002130 <HAL_GPIO_ReadPin>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <button_reading+0x150>)
 8000ce2:	551a      	strb	r2, [r3, r4]
				break;
 8000ce4:	e004      	b.n	8000cf0 <button_reading+0x9c>
			default:
				debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <button_reading+0x150>)
 8000cea:	2101      	movs	r1, #1
 8000cec:	54d1      	strb	r1, [r2, r3]
				break;
 8000cee:	bf00      	nop
		}
		if((debounceButtonBuffer0[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]))
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4a2b      	ldr	r2, [pc, #172]	; (8000da0 <button_reading+0x14c>)
 8000cf4:	5cd2      	ldrb	r2, [r2, r3]
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4928      	ldr	r1, [pc, #160]	; (8000d9c <button_reading+0x148>)
 8000cfa:	5ccb      	ldrb	r3, [r1, r3]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d141      	bne.n	8000d84 <button_reading+0x130>
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	4a26      	ldr	r2, [pc, #152]	; (8000d9c <button_reading+0x148>)
 8000d04:	5cd2      	ldrb	r2, [r2, r3]
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4926      	ldr	r1, [pc, #152]	; (8000da4 <button_reading+0x150>)
 8000d0a:	5ccb      	ldrb	r3, [r1, r3]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d139      	bne.n	8000d84 <button_reading+0x130>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i])
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	4a28      	ldr	r2, [pc, #160]	; (8000db4 <button_reading+0x160>)
 8000d14:	5cd2      	ldrb	r2, [r2, r3]
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	4922      	ldr	r1, [pc, #136]	; (8000da4 <button_reading+0x150>)
 8000d1a:	5ccb      	ldrb	r3, [r1, r3]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d014      	beq.n	8000d4a <button_reading+0xf6>
			{
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000d20:	79fa      	ldrb	r2, [r7, #7]
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	491f      	ldr	r1, [pc, #124]	; (8000da4 <button_reading+0x150>)
 8000d26:	5c89      	ldrb	r1, [r1, r2]
 8000d28:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <button_reading+0x160>)
 8000d2a:	54d1      	strb	r1, [r2, r3]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <button_reading+0x160>)
 8000d30:	5cd3      	ldrb	r3, [r2, r3]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d126      	bne.n	8000d84 <button_reading+0x130>
				{
					counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <button_reading+0x164>)
 8000d3a:	2164      	movs	r1, #100	; 0x64
 8000d3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					subkeyProcess(i);
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff74 	bl	8000c30 <subkeyProcess>
 8000d48:	e01c      	b.n	8000d84 <button_reading+0x130>
				}
			}
			else
			{
				counterForButtonPress1s[i]--;
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	4a1a      	ldr	r2, [pc, #104]	; (8000db8 <button_reading+0x164>)
 8000d4e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d52:	3a01      	subs	r2, #1
 8000d54:	b291      	uxth	r1, r2
 8000d56:	4a18      	ldr	r2, [pc, #96]	; (8000db8 <button_reading+0x164>)
 8000d58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(counterForButtonPress1s[i] == 0)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <button_reading+0x164>)
 8000d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10d      	bne.n	8000d84 <button_reading+0x130>
				{
					if(buttonBuffer[i]== BUTTON_IS_PRESSED)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <button_reading+0x160>)
 8000d6c:	5cd3      	ldrb	r3, [r2, r3]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d108      	bne.n	8000d84 <button_reading+0x130>
					{
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <button_reading+0x164>)
 8000d76:	2164      	movs	r1, #100	; 0x64
 8000d78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						subkeyProcess(i);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff56 	bl	8000c30 <subkeyProcess>
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	3301      	adds	r3, #1
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	f67f af67 	bls.w	8000c60 <button_reading+0xc>
					//buttonBuffer[i] = BUTTON_IS_RELEASED;
				}
			}
		}
	}
}
 8000d92:	bf00      	nop
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd90      	pop	{r4, r7, pc}
 8000d9c:	200000b4 	.word	0x200000b4
 8000da0:	200000b0 	.word	0x200000b0
 8000da4:	200000b8 	.word	0x200000b8
 8000da8:	40010800 	.word	0x40010800
 8000dac:	40010c00 	.word	0x40010c00
 8000db0:	40011000 	.word	0x40011000
 8000db4:	200000ac 	.word	0x200000ac
 8000db8:	200000bc 	.word	0x200000bc

08000dbc <Print_HELLO>:

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
void Print_HELLO()
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
	char str[30];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "HELLO\r"), 1000);
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <Print_HELLO+0x28>)
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f002 fe7e 	bl	8003ac8 <siprintf>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	4639      	mov	r1, r7
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	4804      	ldr	r0, [pc, #16]	; (8000de8 <Print_HELLO+0x2c>)
 8000dd8:	f002 fcd9 	bl	800378e <HAL_UART_Transmit>
}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	08004354 	.word	0x08004354
 8000de8:	200001ac 	.word	0x200001ac

08000dec <Print_TimeOut>:
//void Toggle_led()
//{
//	HAL_GPIO_TogglePin(GPIOA, Led_1_Pin);
//}
void Print_TimeOut(int abc){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	; 0x30
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "timeout: %d\r", temp), 1000);
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <Print_TimeOut+0x34>)
 8000e00:	4618      	mov	r0, r3
 8000e02:	f002 fe61 	bl	8003ac8 <siprintf>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	f107 010c 	add.w	r1, r7, #12
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	4804      	ldr	r0, [pc, #16]	; (8000e24 <Print_TimeOut+0x38>)
 8000e14:	f002 fcbb 	bl	800378e <HAL_UART_Transmit>
}
 8000e18:	bf00      	nop
 8000e1a:	3730      	adds	r7, #48	; 0x30
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	0800435c 	.word	0x0800435c
 8000e24:	200001ac 	.word	0x200001ac

08000e28 <Print_Mode>:
	char str[30];
	int temp;
	temp=abc;
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time_P: %d\r", temp), 1000);
}
void Print_Mode(int abc){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Mode: %d\r", temp), 1000);
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e3a:	4908      	ldr	r1, [pc, #32]	; (8000e5c <Print_Mode+0x34>)
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 fe43 	bl	8003ac8 <siprintf>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	f107 010c 	add.w	r1, r7, #12
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	4804      	ldr	r0, [pc, #16]	; (8000e60 <Print_Mode+0x38>)
 8000e50:	f002 fc9d 	bl	800378e <HAL_UART_Transmit>
}
 8000e54:	bf00      	nop
 8000e56:	3730      	adds	r7, #48	; 0x30
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	08004378 	.word	0x08004378
 8000e60:	200001ac 	.word	0x200001ac

08000e64 <Print_Time>:
void Print_Time(int abc){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	; 0x30
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time: %d\r", temp), 1000);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e76:	4908      	ldr	r1, [pc, #32]	; (8000e98 <Print_Time+0x34>)
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fe25 	bl	8003ac8 <siprintf>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	f107 010c 	add.w	r1, r7, #12
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	4804      	ldr	r0, [pc, #16]	; (8000e9c <Print_Time+0x38>)
 8000e8c:	f002 fc7f 	bl	800378e <HAL_UART_Transmit>
}
 8000e90:	bf00      	nop
 8000e92:	3730      	adds	r7, #48	; 0x30
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	08004384 	.word	0x08004384
 8000e9c:	200001ac 	.word	0x200001ac

08000ea0 <Print_Time1>:
void Print_Time1(int abc){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time_1: %d\r", temp), 1000);
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eb2:	4908      	ldr	r1, [pc, #32]	; (8000ed4 <Print_Time1+0x34>)
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 fe07 	bl	8003ac8 <siprintf>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	f107 010c 	add.w	r1, r7, #12
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <Print_Time1+0x38>)
 8000ec8:	f002 fc61 	bl	800378e <HAL_UART_Transmit>
}
 8000ecc:	bf00      	nop
 8000ece:	3730      	adds	r7, #48	; 0x30
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	08004390 	.word	0x08004390
 8000ed8:	200001ac 	.word	0x200001ac

08000edc <Print_Time2>:
void Print_Time2(int abc){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time_2: %d\r", temp), 1000);
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <Print_Time2+0x34>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 fde9 	bl	8003ac8 <siprintf>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	f107 010c 	add.w	r1, r7, #12
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	4804      	ldr	r0, [pc, #16]	; (8000f14 <Print_Time2+0x38>)
 8000f04:	f002 fc43 	bl	800378e <HAL_UART_Transmit>
}
 8000f08:	bf00      	nop
 8000f0a:	3730      	adds	r7, #48	; 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	0800439c 	.word	0x0800439c
 8000f14:	200001ac 	.word	0x200001ac

08000f18 <Print_ERROR>:

void Print_ERROR(){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
	char str[30];
//	int temp;
//	temp=abc;
	if(RED_TIME!=GREEN_TIME+YELLOW_TIME){
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <Print_ERROR+0x48>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <Print_ERROR+0x4c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	441a      	add	r2, r3
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <Print_ERROR+0x50>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d013      	beq.n	8000f58 <Print_ERROR+0x40>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ERROR 1 reset TIME\r"), 1000);
 8000f30:	463b      	mov	r3, r7
 8000f32:	490e      	ldr	r1, [pc, #56]	; (8000f6c <Print_ERROR+0x54>)
 8000f34:	4618      	mov	r0, r3
 8000f36:	f002 fdc7 	bl	8003ac8 <siprintf>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	4639      	mov	r1, r7
 8000f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f44:	480a      	ldr	r0, [pc, #40]	; (8000f70 <Print_ERROR+0x58>)
 8000f46:	f002 fc22 	bl	800378e <HAL_UART_Transmit>
		RED_TIME = GREEN_TIME + YELLOW_TIME;
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <Print_ERROR+0x48>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <Print_ERROR+0x4c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <Print_ERROR+0x50>)
 8000f56:	6013      	str	r3, [r2, #0]
	}
}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000014 	.word	0x20000014
 8000f64:	20000018 	.word	0x20000018
 8000f68:	20000010 	.word	0x20000010
 8000f6c:	080043a8 	.word	0x080043a8
 8000f70:	200001ac 	.word	0x200001ac

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f78:	f000 fde6 	bl	8001b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7c:	f000 f84c 	bl	8001018 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init ();
 8000f80:	f000 f972 	bl	8001268 <MX_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f84:	f000 f970 	bl	8001268 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f88:	f000 f882 	bl	8001090 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f8c:	f000 f942 	bl	8001214 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f90:	f000 f8ca 	bl	8001128 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000f94:	4818      	ldr	r0, [pc, #96]	; (8000ff8 <main+0x84>)
 8000f96:	f001 fd65 	bl	8002a64 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
//  HAL_GPIO_WritePin(GPIOB, ledpa_Pin|led1b_Pin|led2b_Pin|led2a_Pin, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(GPIOA, ledpb_Pin|led1a_Pin, GPIO_PIN_RESET);\char str[30];

//  Print_HELLO();
  SCH_Init();
 8000f9a:	f000 fa3f 	bl	800141c <SCH_Init>
//  Print_HELLO();
//  SCH_Add_Task(Toggle_led, 10, 500);
//  SCH_Add_Task(Print_HELLO, 10, 1000);
  setTimer0(100);
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	f000 fd3c 	bl	8001a1c <setTimer0>
//  setTimer1(2);
//  setTimer2(3);
  setTimer3(100);
 8000fa4:	2064      	movs	r0, #100	; 0x64
 8000fa6:	f000 fd4d 	bl	8001a44 <setTimer3>
//  setTimerOut1(1);
//  setTimerOut1(2);


  SCH_Add_Task(timerRun0, 20, 10);
 8000faa:	220a      	movs	r2, #10
 8000fac:	2114      	movs	r1, #20
 8000fae:	4813      	ldr	r0, [pc, #76]	; (8000ffc <main+0x88>)
 8000fb0:	f000 fa40 	bl	8001434 <SCH_Add_Task>
//  SCH_Add_Task(timerRun1, 20, 10);
//  SCH_Add_Task(timerRun2, 20, 10);
  SCH_Add_Task(timerRun3, 20, 10);
 8000fb4:	220a      	movs	r2, #10
 8000fb6:	2114      	movs	r1, #20
 8000fb8:	4811      	ldr	r0, [pc, #68]	; (8001000 <main+0x8c>)
 8000fba:	f000 fa3b 	bl	8001434 <SCH_Add_Task>
//  SCH_Add_Task(timerOut2, 20, 10);


//  SCH_Add_Task(Print_Time, 10, 990);

  SCH_Add_Task(button_reading, 10, 10);
 8000fbe:	220a      	movs	r2, #10
 8000fc0:	210a      	movs	r1, #10
 8000fc2:	4810      	ldr	r0, [pc, #64]	; (8001004 <main+0x90>)
 8000fc4:	f000 fa36 	bl	8001434 <SCH_Add_Task>

  SCH_Add_Task(fsm_automatic_run1, 20, 10);
 8000fc8:	220a      	movs	r2, #10
 8000fca:	2114      	movs	r1, #20
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <main+0x94>)
 8000fce:	f000 fa31 	bl	8001434 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run2, 20, 10);
 8000fd2:	220a      	movs	r2, #10
 8000fd4:	2114      	movs	r1, #20
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <main+0x98>)
 8000fd8:	f000 fa2c 	bl	8001434 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run3, 20, 10);
 8000fdc:	220a      	movs	r2, #10
 8000fde:	2114      	movs	r1, #20
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <main+0x9c>)
 8000fe2:	f000 fa27 	bl	8001434 <SCH_Add_Task>
  SCH_Add_Task(fsm_p, 20, 10);
 8000fe6:	220a      	movs	r2, #10
 8000fe8:	2114      	movs	r1, #20
 8000fea:	480a      	ldr	r0, [pc, #40]	; (8001014 <main+0xa0>)
 8000fec:	f000 fa22 	bl	8001434 <SCH_Add_Task>
  while (1)
  {
//		 fsm_automatic_run1();
//		 fsm_automatic_run2();
//		 fsm_automatic_run3();
	  SCH_Dispatch_Tasks();
 8000ff0:	f000 fae6 	bl	80015c0 <SCH_Dispatch_Tasks>
 8000ff4:	e7fc      	b.n	8000ff0 <main+0x7c>
 8000ff6:	bf00      	nop
 8000ff8:	20000164 	.word	0x20000164
 8000ffc:	08001a95 	.word	0x08001a95
 8001000:	08001ac9 	.word	0x08001ac9
 8001004:	08000c55 	.word	0x08000c55
 8001008:	080002c5 	.word	0x080002c5
 800100c:	080003ad 	.word	0x080003ad
 8001010:	08000589 	.word	0x08000589
 8001014:	08000495 	.word	0x08000495

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b090      	sub	sp, #64	; 0x40
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0318 	add.w	r3, r7, #24
 8001022:	2228      	movs	r2, #40	; 0x28
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f002 fd46 	bl	8003ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103e:	2301      	movs	r3, #1
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001042:	2310      	movs	r3, #16
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001046:	2300      	movs	r3, #0
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104a:	f107 0318 	add.w	r3, r7, #24
 800104e:	4618      	mov	r0, r3
 8001050:	f001 f89e 	bl	8002190 <HAL_RCC_OscConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800105a:	f000 f9da 	bl	8001412 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105e:	230f      	movs	r3, #15
 8001060:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f001 fb0a 	bl	8002690 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001082:	f000 f9c6 	bl	8001412 <Error_Handler>
  }
}
 8001086:	bf00      	nop
 8001088:	3740      	adds	r7, #64	; 0x40
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MX_TIM2_Init+0x94>)
 80010ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_TIM2_Init+0x94>)
 80010b6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_TIM2_Init+0x94>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <MX_TIM2_Init+0x94>)
 80010c4:	2209      	movs	r2, #9
 80010c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_TIM2_Init+0x94>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <MX_TIM2_Init+0x94>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010d4:	4813      	ldr	r0, [pc, #76]	; (8001124 <MX_TIM2_Init+0x94>)
 80010d6:	f001 fc75 	bl	80029c4 <HAL_TIM_Base_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010e0:	f000 f997 	bl	8001412 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	4619      	mov	r1, r3
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <MX_TIM2_Init+0x94>)
 80010f2:	f001 ff27 	bl	8002f44 <HAL_TIM_ConfigClockSource>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010fc:	f000 f989 	bl	8001412 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001108:	463b      	mov	r3, r7
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_TIM2_Init+0x94>)
 800110e:	f002 fa81 	bl	8003614 <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001118:	f000 f97b 	bl	8001412 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000164 	.word	0x20000164

08001128 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08e      	sub	sp, #56	; 0x38
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	f107 0320 	add.w	r3, r7, #32
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	615a      	str	r2, [r3, #20]
 8001156:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001158:	4b2c      	ldr	r3, [pc, #176]	; (800120c <MX_TIM3_Init+0xe4>)
 800115a:	4a2d      	ldr	r2, [pc, #180]	; (8001210 <MX_TIM3_Init+0xe8>)
 800115c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800115e:	4b2b      	ldr	r3, [pc, #172]	; (800120c <MX_TIM3_Init+0xe4>)
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001164:	4b29      	ldr	r3, [pc, #164]	; (800120c <MX_TIM3_Init+0xe4>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800116a:	4b28      	ldr	r3, [pc, #160]	; (800120c <MX_TIM3_Init+0xe4>)
 800116c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001170:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <MX_TIM3_Init+0xe4>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <MX_TIM3_Init+0xe4>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800117e:	4823      	ldr	r0, [pc, #140]	; (800120c <MX_TIM3_Init+0xe4>)
 8001180:	f001 fc20 	bl	80029c4 <HAL_TIM_Base_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800118a:	f000 f942 	bl	8001412 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001194:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001198:	4619      	mov	r1, r3
 800119a:	481c      	ldr	r0, [pc, #112]	; (800120c <MX_TIM3_Init+0xe4>)
 800119c:	f001 fed2 	bl	8002f44 <HAL_TIM_ConfigClockSource>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80011a6:	f000 f934 	bl	8001412 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011aa:	4818      	ldr	r0, [pc, #96]	; (800120c <MX_TIM3_Init+0xe4>)
 80011ac:	f001 fcac 	bl	8002b08 <HAL_TIM_PWM_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80011b6:	f000 f92c 	bl	8001412 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c2:	f107 0320 	add.w	r3, r7, #32
 80011c6:	4619      	mov	r1, r3
 80011c8:	4810      	ldr	r0, [pc, #64]	; (800120c <MX_TIM3_Init+0xe4>)
 80011ca:	f002 fa23 	bl	8003614 <HAL_TIMEx_MasterConfigSynchronization>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011d4:	f000 f91d 	bl	8001412 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d8:	2360      	movs	r3, #96	; 0x60
 80011da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2200      	movs	r2, #0
 80011ec:	4619      	mov	r1, r3
 80011ee:	4807      	ldr	r0, [pc, #28]	; (800120c <MX_TIM3_Init+0xe4>)
 80011f0:	f001 fdea 	bl	8002dc8 <HAL_TIM_PWM_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011fa:	f000 f90a 	bl	8001412 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011fe:	4803      	ldr	r0, [pc, #12]	; (800120c <MX_TIM3_Init+0xe4>)
 8001200:	f000 fb22 	bl	8001848 <HAL_TIM_MspPostInit>

}
 8001204:	bf00      	nop
 8001206:	3738      	adds	r7, #56	; 0x38
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000011c 	.word	0x2000011c
 8001210:	40000400 	.word	0x40000400

08001214 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <MX_USART2_UART_Init+0x50>)
 800121c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 8001220:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 800124c:	f002 fa52 	bl	80036f4 <HAL_UART_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001256:	f000 f8dc 	bl	8001412 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200001ac 	.word	0x200001ac
 8001264:	40004400 	.word	0x40004400

08001268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127c:	4b59      	ldr	r3, [pc, #356]	; (80013e4 <MX_GPIO_Init+0x17c>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a58      	ldr	r2, [pc, #352]	; (80013e4 <MX_GPIO_Init+0x17c>)
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b56      	ldr	r3, [pc, #344]	; (80013e4 <MX_GPIO_Init+0x17c>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <MX_GPIO_Init+0x17c>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a52      	ldr	r2, [pc, #328]	; (80013e4 <MX_GPIO_Init+0x17c>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b50      	ldr	r3, [pc, #320]	; (80013e4 <MX_GPIO_Init+0x17c>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ac:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <MX_GPIO_Init+0x17c>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a4c      	ldr	r2, [pc, #304]	; (80013e4 <MX_GPIO_Init+0x17c>)
 80012b2:	f043 0308 	orr.w	r3, r3, #8
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <MX_GPIO_Init+0x17c>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2102      	movs	r1, #2
 80012c8:	4847      	ldr	r0, [pc, #284]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012ca:	f000 ff48 	bl	800215e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ledpa_Pin|led1b_Pin|led2b_Pin|led2a_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80012d4:	4845      	ldr	r0, [pc, #276]	; (80013ec <MX_GPIO_Init+0x184>)
 80012d6:	f000 ff42 	bl	800215e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ledpb_Pin|led1a_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80012e0:	4843      	ldr	r0, [pc, #268]	; (80013f0 <MX_GPIO_Init+0x188>)
 80012e2:	f000 ff3c 	bl	800215e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_p_Pin */
  GPIO_InitStruct.Pin = button_p_Pin;
 80012e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_p_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	4619      	mov	r1, r3
 80012fa:	483b      	ldr	r0, [pc, #236]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012fc:	f000 fd94 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001300:	2302      	movs	r3, #2
 8001302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001308:	2301      	movs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2302      	movs	r3, #2
 800130e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4619      	mov	r1, r3
 8001316:	4834      	ldr	r0, [pc, #208]	; (80013e8 <MX_GPIO_Init+0x180>)
 8001318:	f000 fd86 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_1_Pin */
  GPIO_InitStruct.Pin = button_1_Pin;
 800131c:	2302      	movs	r3, #2
 800131e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001324:	2301      	movs	r3, #1
 8001326:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_1_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4619      	mov	r1, r3
 800132e:	4830      	ldr	r0, [pc, #192]	; (80013f0 <MX_GPIO_Init+0x188>)
 8001330:	f000 fd7a 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_2_Pin */
  GPIO_InitStruct.Pin = button_2_Pin;
 8001334:	2310      	movs	r3, #16
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_2_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	4619      	mov	r1, r3
 8001346:	482a      	ldr	r0, [pc, #168]	; (80013f0 <MX_GPIO_Init+0x188>)
 8001348:	f000 fd6e 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_3_Pin */
  GPIO_InitStruct.Pin = button_3_Pin;
 800134c:	2301      	movs	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001354:	2301      	movs	r3, #1
 8001356:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_3_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	4823      	ldr	r0, [pc, #140]	; (80013ec <MX_GPIO_Init+0x184>)
 8001360:	f000 fd62 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ledpa_Pin led2b_Pin led2a_Pin */
  GPIO_InitStruct.Pin = ledpa_Pin|led2b_Pin|led2a_Pin;
 8001364:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2302      	movs	r3, #2
 8001374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	4619      	mov	r1, r3
 800137c:	481b      	ldr	r0, [pc, #108]	; (80013ec <MX_GPIO_Init+0x184>)
 800137e:	f000 fd53 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ledpb_Pin */
  GPIO_InitStruct.Pin = ledpb_Pin;
 8001382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2302      	movs	r3, #2
 8001392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ledpb_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4619      	mov	r1, r3
 800139a:	4815      	ldr	r0, [pc, #84]	; (80013f0 <MX_GPIO_Init+0x188>)
 800139c:	f000 fd44 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : led1a_Pin */
  GPIO_InitStruct.Pin = led1a_Pin;
 80013a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led1a_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	4619      	mov	r1, r3
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <MX_GPIO_Init+0x188>)
 80013ba:	f000 fd35 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : led1b_Pin */
  GPIO_InitStruct.Pin = led1b_Pin;
 80013be:	2308      	movs	r3, #8
 80013c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led1b_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_GPIO_Init+0x184>)
 80013d6:	f000 fd27 	bl	8001e28 <HAL_GPIO_Init>

}
 80013da:	bf00      	nop
 80013dc:	3720      	adds	r7, #32
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40011000 	.word	0x40011000
 80013ec:	40010c00 	.word	0x40010c00
 80013f0:	40010800 	.word	0x40010800

080013f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	if( htim -> Instance == TIM2 ){
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001404:	d101      	bne.n	800140a <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 8001406:	f000 f867 	bl	80014d8 <SCH_Update>
//		button_reading () ;
		}
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001416:	b672      	cpsid	i
}
 8001418:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141a:	e7fe      	b.n	800141a <Error_Handler+0x8>

0800141c <SCH_Init>:
#include "main.h"
sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
		current_index_task = 0;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <SCH_Init+0x14>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	200000d0 	.word	0x200000d0

08001434 <SCH_Add_Task>:

void SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS)
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <SCH_Add_Task+0x98>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b27      	cmp	r3, #39	; 0x27
 8001446:	d83c      	bhi.n	80014c2 <SCH_Add_Task+0x8e>
	{

		SCH_tasks_G[current_index_task].pTask = pFunction;
 8001448:	4b20      	ldr	r3, [pc, #128]	; (80014cc <SCH_Add_Task+0x98>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	4a20      	ldr	r2, [pc, #128]	; (80014d0 <SCH_Add_Task+0x9c>)
 8001450:	460b      	mov	r3, r1
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY/TIMER_CYCLE;
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <SCH_Add_Task+0x98>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <SCH_Add_Task+0xa0>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	08da      	lsrs	r2, r3, #3
 800146e:	4918      	ldr	r1, [pc, #96]	; (80014d0 <SCH_Add_Task+0x9c>)
 8001470:	4603      	mov	r3, r0
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4403      	add	r3, r0
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	3304      	adds	r3, #4
 800147c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD/TIMER_CYCLE;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <SCH_Add_Task+0x98>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <SCH_Add_Task+0xa0>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	08da      	lsrs	r2, r3, #3
 800148e:	4910      	ldr	r1, [pc, #64]	; (80014d0 <SCH_Add_Task+0x9c>)
 8001490:	4603      	mov	r3, r0
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4403      	add	r3, r0
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	3308      	adds	r3, #8
 800149c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <SCH_Add_Task+0x98>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <SCH_Add_Task+0x9c>)
 80014a6:	460b      	mov	r3, r1
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	330c      	adds	r3, #12
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
//		SCH_tasks_G[current_index_task].TaskID = current_index_task;
		current_index_task++;
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <SCH_Add_Task+0x98>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b03      	ldr	r3, [pc, #12]	; (80014cc <SCH_Add_Task+0x98>)
 80014c0:	701a      	strb	r2, [r3, #0]
//		return current_index_task-1;
	}
//	return -1;
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	200000d0 	.word	0x200000d0
 80014d0:	200001f4 	.word	0x200001f4
 80014d4:	cccccccd 	.word	0xcccccccd

080014d8 <SCH_Update>:

void SCH_Update(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < current_index_task; i++)
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	e05d      	b.n	80015a0 <SCH_Update+0xc8>
	{
		if(SCH_tasks_G[i].Delay > 0)
 80014e4:	4934      	ldr	r1, [pc, #208]	; (80015b8 <SCH_Update+0xe0>)
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	3304      	adds	r3, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d012      	beq.n	8001520 <SCH_Update+0x48>
		{
			SCH_tasks_G[i].Delay--;
 80014fa:	492f      	ldr	r1, [pc, #188]	; (80015b8 <SCH_Update+0xe0>)
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	3304      	adds	r3, #4
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	1e59      	subs	r1, r3, #1
 800150e:	482a      	ldr	r0, [pc, #168]	; (80015b8 <SCH_Update+0xe0>)
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4403      	add	r3, r0
 800151c:	3304      	adds	r3, #4
 800151e:	6019      	str	r1, [r3, #0]
		}
		if(SCH_tasks_G[i].Delay == 0)
 8001520:	4925      	ldr	r1, [pc, #148]	; (80015b8 <SCH_Update+0xe0>)
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	3304      	adds	r3, #4
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d131      	bne.n	800159a <SCH_Update+0xc2>
		{
			SCH_tasks_G[i].RunMe +=1;
 8001536:	4920      	ldr	r1, [pc, #128]	; (80015b8 <SCH_Update+0xe0>)
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	330c      	adds	r3, #12
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	b2d8      	uxtb	r0, r3
 800154c:	491a      	ldr	r1, [pc, #104]	; (80015b8 <SCH_Update+0xe0>)
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	330c      	adds	r3, #12
 800155c:	4602      	mov	r2, r0
 800155e:	701a      	strb	r2, [r3, #0]
			if(SCH_tasks_G[i].Period)
 8001560:	4915      	ldr	r1, [pc, #84]	; (80015b8 <SCH_Update+0xe0>)
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	3308      	adds	r3, #8
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d011      	beq.n	800159a <SCH_Update+0xc2>
					SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8001576:	4910      	ldr	r1, [pc, #64]	; (80015b8 <SCH_Update+0xe0>)
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3308      	adds	r3, #8
 8001586:	6819      	ldr	r1, [r3, #0]
 8001588:	480b      	ldr	r0, [pc, #44]	; (80015b8 <SCH_Update+0xe0>)
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4403      	add	r3, r0
 8001596:	3304      	adds	r3, #4
 8001598:	6019      	str	r1, [r3, #0]
	for(int i = 0 ; i < current_index_task; i++)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3301      	adds	r3, #1
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <SCH_Update+0xe4>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4293      	cmp	r3, r2
 80015aa:	db9b      	blt.n	80014e4 <SCH_Update+0xc>
		}

	}
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	200001f4 	.word	0x200001f4
 80015bc:	200000d0 	.word	0x200000d0

080015c0 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	for( int i = 0; i < current_index_task; i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	e051      	b.n	8001670 <SCH_Dispatch_Tasks+0xb0>
	{
		if(SCH_tasks_G[i].RunMe > 0)
 80015cc:	492e      	ldr	r1, [pc, #184]	; (8001688 <SCH_Dispatch_Tasks+0xc8>)
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	330c      	adds	r3, #12
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d043      	beq.n	800166a <SCH_Dispatch_Tasks+0xaa>
		{
			SCH_tasks_G[i].RunMe--;
 80015e2:	4929      	ldr	r1, [pc, #164]	; (8001688 <SCH_Dispatch_Tasks+0xc8>)
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	330c      	adds	r3, #12
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	b2d8      	uxtb	r0, r3
 80015f8:	4923      	ldr	r1, [pc, #140]	; (8001688 <SCH_Dispatch_Tasks+0xc8>)
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	330c      	adds	r3, #12
 8001608:	4602      	mov	r2, r0
 800160a:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 800160c:	491e      	ldr	r1, [pc, #120]	; (8001688 <SCH_Dispatch_Tasks+0xc8>)
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4798      	blx	r3
			if(SCH_tasks_G[i].Delay == 0 && SCH_tasks_G[i].Period == 0 && SCH_tasks_G[i].RunMe == 0)
 800161e:	491a      	ldr	r1, [pc, #104]	; (8001688 <SCH_Dispatch_Tasks+0xc8>)
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	3304      	adds	r3, #4
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d11a      	bne.n	800166a <SCH_Dispatch_Tasks+0xaa>
 8001634:	4914      	ldr	r1, [pc, #80]	; (8001688 <SCH_Dispatch_Tasks+0xc8>)
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	3308      	adds	r3, #8
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10f      	bne.n	800166a <SCH_Dispatch_Tasks+0xaa>
 800164a:	490f      	ldr	r1, [pc, #60]	; (8001688 <SCH_Dispatch_Tasks+0xc8>)
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	330c      	adds	r3, #12
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d104      	bne.n	800166a <SCH_Dispatch_Tasks+0xaa>
			{
				SCH_Delete_Task(i);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f813 	bl	8001690 <SCH_Delete_Task>
	for( int i = 0; i < current_index_task; i++)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3301      	adds	r3, #1
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <SCH_Dispatch_Tasks+0xcc>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4293      	cmp	r3, r2
 800167a:	dba7      	blt.n	80015cc <SCH_Dispatch_Tasks+0xc>
			}
		}

	}
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200001f4 	.word	0x200001f4
 800168c:	200000d0 	.word	0x200000d0

08001690 <SCH_Delete_Task>:

void SCH_Delete_Task(const uint8_t TASK_INDEX)//in array index is taskid
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
   if(TASK_INDEX >= current_index_task)
 800169a:	4b34      	ldr	r3, [pc, #208]	; (800176c <SCH_Delete_Task+0xdc>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	79fa      	ldrb	r2, [r7, #7]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d25d      	bcs.n	8001760 <SCH_Delete_Task+0xd0>
   {
	   return ;
   }
   else
   {
	   for( int i = TASK_INDEX; i < current_index_task - 1; i++)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	e04d      	b.n	8001746 <SCH_Delete_Task+0xb6>
	   {
			SCH_tasks_G[i].pTask = SCH_tasks_G[i + 1].pTask;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	4930      	ldr	r1, [pc, #192]	; (8001770 <SCH_Delete_Task+0xe0>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	6819      	ldr	r1, [r3, #0]
 80016bc:	482c      	ldr	r0, [pc, #176]	; (8001770 <SCH_Delete_Task+0xe0>)
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4403      	add	r3, r0
 80016ca:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Delay = SCH_tasks_G[i + 1].Delay;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	4927      	ldr	r1, [pc, #156]	; (8001770 <SCH_Delete_Task+0xe0>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	3304      	adds	r3, #4
 80016de:	6819      	ldr	r1, [r3, #0]
 80016e0:	4823      	ldr	r0, [pc, #140]	; (8001770 <SCH_Delete_Task+0xe0>)
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4403      	add	r3, r0
 80016ee:	3304      	adds	r3, #4
 80016f0:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Period = SCH_tasks_G[i + 1].Period;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	491e      	ldr	r1, [pc, #120]	; (8001770 <SCH_Delete_Task+0xe0>)
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	3308      	adds	r3, #8
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	481a      	ldr	r0, [pc, #104]	; (8001770 <SCH_Delete_Task+0xe0>)
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4403      	add	r3, r0
 8001714:	3308      	adds	r3, #8
 8001716:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe = SCH_tasks_G[i + 1].RunMe;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	4914      	ldr	r1, [pc, #80]	; (8001770 <SCH_Delete_Task+0xe0>)
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	330c      	adds	r3, #12
 800172a:	7818      	ldrb	r0, [r3, #0]
 800172c:	4910      	ldr	r1, [pc, #64]	; (8001770 <SCH_Delete_Task+0xe0>)
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	330c      	adds	r3, #12
 800173c:	4602      	mov	r2, r0
 800173e:	701a      	strb	r2, [r3, #0]
	   for( int i = TASK_INDEX; i < current_index_task - 1; i++)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3301      	adds	r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <SCH_Delete_Task+0xdc>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	3b01      	subs	r3, #1
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	429a      	cmp	r2, r3
 8001750:	dbab      	blt.n	80016aa <SCH_Delete_Task+0x1a>
	   }

	   current_index_task--;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <SCH_Delete_Task+0xdc>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	3b01      	subs	r3, #1
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <SCH_Delete_Task+0xdc>)
 800175c:	701a      	strb	r2, [r3, #0]
 800175e:	e000      	b.n	8001762 <SCH_Delete_Task+0xd2>
	   return ;
 8001760:	bf00      	nop
//	   return ;
   }
}
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	200000d0 	.word	0x200000d0
 8001770:	200001f4 	.word	0x200001f4

08001774 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_MspInit+0x5c>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <HAL_MspInit+0x5c>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6193      	str	r3, [r2, #24]
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_MspInit+0x5c>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_MspInit+0x5c>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <HAL_MspInit+0x5c>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	61d3      	str	r3, [r2, #28]
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_MspInit+0x5c>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_MspInit+0x60>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_MspInit+0x60>)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010000 	.word	0x40010000

080017d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e8:	d114      	bne.n	8001814 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_TIM_Base_MspInit+0x68>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	4a14      	ldr	r2, [pc, #80]	; (8001840 <HAL_TIM_Base_MspInit+0x68>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	61d3      	str	r3, [r2, #28]
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_TIM_Base_MspInit+0x68>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	201c      	movs	r0, #28
 8001808:	f000 fad7 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800180c:	201c      	movs	r0, #28
 800180e:	f000 faf0 	bl	8001df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001812:	e010      	b.n	8001836 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_TIM_Base_MspInit+0x6c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d10b      	bne.n	8001836 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_TIM_Base_MspInit+0x68>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a07      	ldr	r2, [pc, #28]	; (8001840 <HAL_TIM_Base_MspInit+0x68>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_TIM_Base_MspInit+0x68>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	40000400 	.word	0x40000400

08001848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <HAL_TIM_MspPostInit+0x58>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d117      	bne.n	8001898 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_TIM_MspPostInit+0x5c>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <HAL_TIM_MspPostInit+0x5c>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_TIM_MspPostInit+0x5c>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001880:	2340      	movs	r3, #64	; 0x40
 8001882:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2302      	movs	r3, #2
 800188a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4619      	mov	r1, r3
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <HAL_TIM_MspPostInit+0x60>)
 8001894:	f000 fac8 	bl	8001e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40000400 	.word	0x40000400
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40010800 	.word	0x40010800

080018ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1b      	ldr	r2, [pc, #108]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d12f      	bne.n	800192c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_UART_MspInit+0x8c>)
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	4a19      	ldr	r2, [pc, #100]	; (8001938 <HAL_UART_MspInit+0x8c>)
 80018d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d6:	61d3      	str	r3, [r2, #28]
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_UART_MspInit+0x8c>)
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_UART_MspInit+0x8c>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a13      	ldr	r2, [pc, #76]	; (8001938 <HAL_UART_MspInit+0x8c>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_UART_MspInit+0x8c>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018fc:	2304      	movs	r3, #4
 80018fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4619      	mov	r1, r3
 800190e:	480b      	ldr	r0, [pc, #44]	; (800193c <HAL_UART_MspInit+0x90>)
 8001910:	f000 fa8a 	bl	8001e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001914:	2308      	movs	r3, #8
 8001916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	4619      	mov	r1, r3
 8001926:	4805      	ldr	r0, [pc, #20]	; (800193c <HAL_UART_MspInit+0x90>)
 8001928:	f000 fa7e 	bl	8001e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800192c:	bf00      	nop
 800192e:	3720      	adds	r7, #32
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40004400 	.word	0x40004400
 8001938:	40021000 	.word	0x40021000
 800193c:	40010800 	.word	0x40010800

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <NMI_Handler+0x4>

08001946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler+0x4>

08001952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <UsageFault_Handler+0x4>

0800195e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001986:	f000 f925 	bl	8001bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <TIM2_IRQHandler+0x10>)
 8001996:	f001 f90f 	bl	8002bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000164 	.word	0x20000164

080019a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <_sbrk+0x5c>)
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <_sbrk+0x60>)
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <_sbrk+0x64>)
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <_sbrk+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d207      	bcs.n	80019e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d4:	f002 f846 	bl	8003a64 <__errno>
 80019d8:	4603      	mov	r3, r0
 80019da:	220c      	movs	r2, #12
 80019dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	e009      	b.n	80019f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <_sbrk+0x64>)
 80019f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20005000 	.word	0x20005000
 8001a04:	00000400 	.word	0x00000400
 8001a08:	200000d4 	.word	0x200000d4
 8001a0c:	20000528 	.word	0x20000528

08001a10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <setTimer0>:
int timerOut1_counter = 0;

int timerOut2_flag = 0;
int timerOut2_counter = 0;

void setTimer0(int duration){
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 8001a24:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <setTimer0+0x20>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <setTimer0+0x24>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
};
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	200000dc 	.word	0x200000dc
 8001a40:	200000d8 	.word	0x200000d8

08001a44 <setTimer3>:
};
void setTimer2(int duration){
	timer2_counter = duration;
	timer2_flag = 0;
};
void setTimer3(int duration){
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001a4c:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <setTimer3+0x20>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <setTimer3+0x24>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
};
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	200000e4 	.word	0x200000e4
 8001a68:	200000e0 	.word	0x200000e0

08001a6c <setTimerOut1>:
void setTimerOut1(int duration){
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	timerOut1_flag = 0;
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <setTimerOut1+0x20>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
	timerOut1_counter = duration;
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <setTimerOut1+0x24>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6013      	str	r3, [r2, #0]
};
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	200000e8 	.word	0x200000e8
 8001a90:	200000ec 	.word	0x200000ec

08001a94 <timerRun0>:
	timerOut2_flag = 0;
	timerOut2_counter = duration;
};


void timerRun0(){
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
	if(timer0_counter > 0 )
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <timerRun0+0x2c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	dd0b      	ble.n	8001ab8 <timerRun0+0x24>
	{
		timer0_counter --;
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <timerRun0+0x2c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <timerRun0+0x2c>)
 8001aa8:	6013      	str	r3, [r2, #0]
		if(timer0_counter <=0){
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <timerRun0+0x2c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	dc02      	bgt.n	8001ab8 <timerRun0+0x24>
			timer0_flag=1;
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <timerRun0+0x30>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]
		}
	}
};
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	200000dc 	.word	0x200000dc
 8001ac4:	200000d8 	.word	0x200000d8

08001ac8 <timerRun3>:
			timer2_flag=1;
		}
	}
};

void timerRun3(){
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
	if(timer3_counter > 0 )
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <timerRun3+0x2c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	dd0b      	ble.n	8001aec <timerRun3+0x24>
	{
		timer3_counter --;
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <timerRun3+0x2c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	4a06      	ldr	r2, [pc, #24]	; (8001af4 <timerRun3+0x2c>)
 8001adc:	6013      	str	r3, [r2, #0]
		if(timer3_counter <=0){
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <timerRun3+0x2c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	dc02      	bgt.n	8001aec <timerRun3+0x24>
			timer3_flag=1;
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <timerRun3+0x30>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
		}
	}
};
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	200000e4 	.word	0x200000e4
 8001af8:	200000e0 	.word	0x200000e0

08001afc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001afc:	480c      	ldr	r0, [pc, #48]	; (8001b30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001afe:	490d      	ldr	r1, [pc, #52]	; (8001b34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b04:	e002      	b.n	8001b0c <LoopCopyDataInit>

08001b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0a:	3304      	adds	r3, #4

08001b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b10:	d3f9      	bcc.n	8001b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b14:	4c0a      	ldr	r4, [pc, #40]	; (8001b40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b18:	e001      	b.n	8001b1e <LoopFillZerobss>

08001b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b1c:	3204      	adds	r2, #4

08001b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b20:	d3fb      	bcc.n	8001b1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b22:	f7ff ff75 	bl	8001a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b26:	f001 ffa3 	bl	8003a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b2a:	f7ff fa23 	bl	8000f74 <main>
  bx lr
 8001b2e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b34:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001b38:	08004420 	.word	0x08004420
  ldr r2, =_sbss
 8001b3c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001b40:	20000528 	.word	0x20000528

08001b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC1_2_IRQHandler>
	...

08001b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_Init+0x28>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <HAL_Init+0x28>)
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f000 f923 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5e:	200f      	movs	r0, #15
 8001b60:	f000 f808 	bl	8001b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b64:	f7ff fe06 	bl	8001774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000

08001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_InitTick+0x54>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_InitTick+0x58>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f93b 	bl	8001e0e <HAL_SYSTICK_Config>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00e      	b.n	8001bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d80a      	bhi.n	8001bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f000 f903 	bl	8001dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb4:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <HAL_InitTick+0x5c>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e000      	b.n	8001bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000020 	.word	0x20000020
 8001bcc:	20000028 	.word	0x20000028
 8001bd0:	20000024 	.word	0x20000024

08001bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_IncTick+0x1c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_IncTick+0x20>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <HAL_IncTick+0x20>)
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	20000028 	.word	0x20000028
 8001bf4:	20000514 	.word	0x20000514

08001bf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bfc:	4b02      	ldr	r3, [pc, #8]	; (8001c08 <HAL_GetTick+0x10>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000514 	.word	0x20000514

08001c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <__NVIC_GetPriorityGrouping+0x18>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	f003 0307 	and.w	r3, r3, #7
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db0b      	blt.n	8001c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	4906      	ldr	r1, [pc, #24]	; (8001ca4 <__NVIC_EnableIRQ+0x34>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	2001      	movs	r0, #1
 8001c92:	fa00 f202 	lsl.w	r2, r0, r2
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	e000e100 	.word	0xe000e100

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d70:	d301      	bcc.n	8001d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00f      	b.n	8001d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <SysTick_Config+0x40>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7e:	210f      	movs	r1, #15
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f7ff ff90 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <SysTick_Config+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SysTick_Config+0x40>)
 8001d90:	2207      	movs	r2, #7
 8001d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff2d 	bl	8001c0c <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dcc:	f7ff ff42 	bl	8001c54 <__NVIC_GetPriorityGrouping>
 8001dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f7ff ff90 	bl	8001cfc <NVIC_EncodePriority>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff5f 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff35 	bl	8001c70 <__NVIC_EnableIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffa2 	bl	8001d60 <SysTick_Config>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b08b      	sub	sp, #44	; 0x2c
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e36:	2300      	movs	r3, #0
 8001e38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3a:	e169      	b.n	8002110 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	f040 8158 	bne.w	800210a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4a9a      	ldr	r2, [pc, #616]	; (80020c8 <HAL_GPIO_Init+0x2a0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d05e      	beq.n	8001f22 <HAL_GPIO_Init+0xfa>
 8001e64:	4a98      	ldr	r2, [pc, #608]	; (80020c8 <HAL_GPIO_Init+0x2a0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d875      	bhi.n	8001f56 <HAL_GPIO_Init+0x12e>
 8001e6a:	4a98      	ldr	r2, [pc, #608]	; (80020cc <HAL_GPIO_Init+0x2a4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d058      	beq.n	8001f22 <HAL_GPIO_Init+0xfa>
 8001e70:	4a96      	ldr	r2, [pc, #600]	; (80020cc <HAL_GPIO_Init+0x2a4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d86f      	bhi.n	8001f56 <HAL_GPIO_Init+0x12e>
 8001e76:	4a96      	ldr	r2, [pc, #600]	; (80020d0 <HAL_GPIO_Init+0x2a8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d052      	beq.n	8001f22 <HAL_GPIO_Init+0xfa>
 8001e7c:	4a94      	ldr	r2, [pc, #592]	; (80020d0 <HAL_GPIO_Init+0x2a8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d869      	bhi.n	8001f56 <HAL_GPIO_Init+0x12e>
 8001e82:	4a94      	ldr	r2, [pc, #592]	; (80020d4 <HAL_GPIO_Init+0x2ac>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d04c      	beq.n	8001f22 <HAL_GPIO_Init+0xfa>
 8001e88:	4a92      	ldr	r2, [pc, #584]	; (80020d4 <HAL_GPIO_Init+0x2ac>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d863      	bhi.n	8001f56 <HAL_GPIO_Init+0x12e>
 8001e8e:	4a92      	ldr	r2, [pc, #584]	; (80020d8 <HAL_GPIO_Init+0x2b0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d046      	beq.n	8001f22 <HAL_GPIO_Init+0xfa>
 8001e94:	4a90      	ldr	r2, [pc, #576]	; (80020d8 <HAL_GPIO_Init+0x2b0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d85d      	bhi.n	8001f56 <HAL_GPIO_Init+0x12e>
 8001e9a:	2b12      	cmp	r3, #18
 8001e9c:	d82a      	bhi.n	8001ef4 <HAL_GPIO_Init+0xcc>
 8001e9e:	2b12      	cmp	r3, #18
 8001ea0:	d859      	bhi.n	8001f56 <HAL_GPIO_Init+0x12e>
 8001ea2:	a201      	add	r2, pc, #4	; (adr r2, 8001ea8 <HAL_GPIO_Init+0x80>)
 8001ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea8:	08001f23 	.word	0x08001f23
 8001eac:	08001efd 	.word	0x08001efd
 8001eb0:	08001f0f 	.word	0x08001f0f
 8001eb4:	08001f51 	.word	0x08001f51
 8001eb8:	08001f57 	.word	0x08001f57
 8001ebc:	08001f57 	.word	0x08001f57
 8001ec0:	08001f57 	.word	0x08001f57
 8001ec4:	08001f57 	.word	0x08001f57
 8001ec8:	08001f57 	.word	0x08001f57
 8001ecc:	08001f57 	.word	0x08001f57
 8001ed0:	08001f57 	.word	0x08001f57
 8001ed4:	08001f57 	.word	0x08001f57
 8001ed8:	08001f57 	.word	0x08001f57
 8001edc:	08001f57 	.word	0x08001f57
 8001ee0:	08001f57 	.word	0x08001f57
 8001ee4:	08001f57 	.word	0x08001f57
 8001ee8:	08001f57 	.word	0x08001f57
 8001eec:	08001f05 	.word	0x08001f05
 8001ef0:	08001f19 	.word	0x08001f19
 8001ef4:	4a79      	ldr	r2, [pc, #484]	; (80020dc <HAL_GPIO_Init+0x2b4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001efa:	e02c      	b.n	8001f56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	623b      	str	r3, [r7, #32]
          break;
 8001f02:	e029      	b.n	8001f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	623b      	str	r3, [r7, #32]
          break;
 8001f0c:	e024      	b.n	8001f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	3308      	adds	r3, #8
 8001f14:	623b      	str	r3, [r7, #32]
          break;
 8001f16:	e01f      	b.n	8001f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	330c      	adds	r3, #12
 8001f1e:	623b      	str	r3, [r7, #32]
          break;
 8001f20:	e01a      	b.n	8001f58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d102      	bne.n	8001f30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	623b      	str	r3, [r7, #32]
          break;
 8001f2e:	e013      	b.n	8001f58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d105      	bne.n	8001f44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f38:	2308      	movs	r3, #8
 8001f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	611a      	str	r2, [r3, #16]
          break;
 8001f42:	e009      	b.n	8001f58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f44:	2308      	movs	r3, #8
 8001f46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	615a      	str	r2, [r3, #20]
          break;
 8001f4e:	e003      	b.n	8001f58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f50:	2300      	movs	r3, #0
 8001f52:	623b      	str	r3, [r7, #32]
          break;
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x130>
          break;
 8001f56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2bff      	cmp	r3, #255	; 0xff
 8001f5c:	d801      	bhi.n	8001f62 <HAL_GPIO_Init+0x13a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	e001      	b.n	8001f66 <HAL_GPIO_Init+0x13e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3304      	adds	r3, #4
 8001f66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2bff      	cmp	r3, #255	; 0xff
 8001f6c:	d802      	bhi.n	8001f74 <HAL_GPIO_Init+0x14c>
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	e002      	b.n	8001f7a <HAL_GPIO_Init+0x152>
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	3b08      	subs	r3, #8
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	210f      	movs	r1, #15
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	6a39      	ldr	r1, [r7, #32]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	431a      	orrs	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 80b1 	beq.w	800210a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fa8:	4b4d      	ldr	r3, [pc, #308]	; (80020e0 <HAL_GPIO_Init+0x2b8>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	4a4c      	ldr	r2, [pc, #304]	; (80020e0 <HAL_GPIO_Init+0x2b8>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6193      	str	r3, [r2, #24]
 8001fb4:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <HAL_GPIO_Init+0x2b8>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fc0:	4a48      	ldr	r2, [pc, #288]	; (80020e4 <HAL_GPIO_Init+0x2bc>)
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a40      	ldr	r2, [pc, #256]	; (80020e8 <HAL_GPIO_Init+0x2c0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d013      	beq.n	8002014 <HAL_GPIO_Init+0x1ec>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a3f      	ldr	r2, [pc, #252]	; (80020ec <HAL_GPIO_Init+0x2c4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00d      	beq.n	8002010 <HAL_GPIO_Init+0x1e8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a3e      	ldr	r2, [pc, #248]	; (80020f0 <HAL_GPIO_Init+0x2c8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d007      	beq.n	800200c <HAL_GPIO_Init+0x1e4>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a3d      	ldr	r2, [pc, #244]	; (80020f4 <HAL_GPIO_Init+0x2cc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d101      	bne.n	8002008 <HAL_GPIO_Init+0x1e0>
 8002004:	2303      	movs	r3, #3
 8002006:	e006      	b.n	8002016 <HAL_GPIO_Init+0x1ee>
 8002008:	2304      	movs	r3, #4
 800200a:	e004      	b.n	8002016 <HAL_GPIO_Init+0x1ee>
 800200c:	2302      	movs	r3, #2
 800200e:	e002      	b.n	8002016 <HAL_GPIO_Init+0x1ee>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <HAL_GPIO_Init+0x1ee>
 8002014:	2300      	movs	r3, #0
 8002016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002018:	f002 0203 	and.w	r2, r2, #3
 800201c:	0092      	lsls	r2, r2, #2
 800201e:	4093      	lsls	r3, r2
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002026:	492f      	ldr	r1, [pc, #188]	; (80020e4 <HAL_GPIO_Init+0x2bc>)
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002040:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	492c      	ldr	r1, [pc, #176]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800204e:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	43db      	mvns	r3, r3
 8002056:	4928      	ldr	r1, [pc, #160]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 8002058:	4013      	ands	r3, r2
 800205a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d006      	beq.n	8002076 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002068:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	4922      	ldr	r1, [pc, #136]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
 8002074:	e006      	b.n	8002084 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	43db      	mvns	r3, r3
 800207e:	491e      	ldr	r1, [pc, #120]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 8002080:	4013      	ands	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d006      	beq.n	800209e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002090:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	4918      	ldr	r1, [pc, #96]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	608b      	str	r3, [r1, #8]
 800209c:	e006      	b.n	80020ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	4914      	ldr	r1, [pc, #80]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d021      	beq.n	80020fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	490e      	ldr	r1, [pc, #56]	; (80020f8 <HAL_GPIO_Init+0x2d0>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60cb      	str	r3, [r1, #12]
 80020c4:	e021      	b.n	800210a <HAL_GPIO_Init+0x2e2>
 80020c6:	bf00      	nop
 80020c8:	10320000 	.word	0x10320000
 80020cc:	10310000 	.word	0x10310000
 80020d0:	10220000 	.word	0x10220000
 80020d4:	10210000 	.word	0x10210000
 80020d8:	10120000 	.word	0x10120000
 80020dc:	10110000 	.word	0x10110000
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40010000 	.word	0x40010000
 80020e8:	40010800 	.word	0x40010800
 80020ec:	40010c00 	.word	0x40010c00
 80020f0:	40011000 	.word	0x40011000
 80020f4:	40011400 	.word	0x40011400
 80020f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_GPIO_Init+0x304>)
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	43db      	mvns	r3, r3
 8002104:	4909      	ldr	r1, [pc, #36]	; (800212c <HAL_GPIO_Init+0x304>)
 8002106:	4013      	ands	r3, r2
 8002108:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	3301      	adds	r3, #1
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	fa22 f303 	lsr.w	r3, r2, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	f47f ae8e 	bne.w	8001e3c <HAL_GPIO_Init+0x14>
  }
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	372c      	adds	r7, #44	; 0x2c
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	40010400 	.word	0x40010400

08002130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
 800214c:	e001      	b.n	8002152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	807b      	strh	r3, [r7, #2]
 800216a:	4613      	mov	r3, r2
 800216c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800216e:	787b      	ldrb	r3, [r7, #1]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002174:	887a      	ldrh	r2, [r7, #2]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800217a:	e003      	b.n	8002184 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800217c:	887b      	ldrh	r3, [r7, #2]
 800217e:	041a      	lsls	r2, r3, #16
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	611a      	str	r2, [r3, #16]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
	...

08002190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e26c      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8087 	beq.w	80022be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021b0:	4b92      	ldr	r3, [pc, #584]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d00c      	beq.n	80021d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021bc:	4b8f      	ldr	r3, [pc, #572]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d112      	bne.n	80021ee <HAL_RCC_OscConfig+0x5e>
 80021c8:	4b8c      	ldr	r3, [pc, #560]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d4:	d10b      	bne.n	80021ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d6:	4b89      	ldr	r3, [pc, #548]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d06c      	beq.n	80022bc <HAL_RCC_OscConfig+0x12c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d168      	bne.n	80022bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e246      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x76>
 80021f8:	4b80      	ldr	r3, [pc, #512]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a7f      	ldr	r2, [pc, #508]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	e02e      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x98>
 800220e:	4b7b      	ldr	r3, [pc, #492]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a7a      	ldr	r2, [pc, #488]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b78      	ldr	r3, [pc, #480]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a77      	ldr	r2, [pc, #476]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e01d      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0xbc>
 8002232:	4b72      	ldr	r3, [pc, #456]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a71      	ldr	r2, [pc, #452]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b6f      	ldr	r3, [pc, #444]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a6e      	ldr	r2, [pc, #440]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e00b      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 800224c:	4b6b      	ldr	r3, [pc, #428]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a6a      	ldr	r2, [pc, #424]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b68      	ldr	r3, [pc, #416]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a67      	ldr	r2, [pc, #412]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 800225e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002262:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d013      	beq.n	8002294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7ff fcc4 	bl	8001bf8 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002274:	f7ff fcc0 	bl	8001bf8 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1fa      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	4b5d      	ldr	r3, [pc, #372]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0xe4>
 8002292:	e014      	b.n	80022be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff fcb0 	bl	8001bf8 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7ff fcac 	bl	8001bf8 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e1e6      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	4b53      	ldr	r3, [pc, #332]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x10c>
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d063      	beq.n	8002392 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ca:	4b4c      	ldr	r3, [pc, #304]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022d6:	4b49      	ldr	r3, [pc, #292]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d11c      	bne.n	800231c <HAL_RCC_OscConfig+0x18c>
 80022e2:	4b46      	ldr	r3, [pc, #280]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d116      	bne.n	800231c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	4b43      	ldr	r3, [pc, #268]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_RCC_OscConfig+0x176>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d001      	beq.n	8002306 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e1ba      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002306:	4b3d      	ldr	r3, [pc, #244]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4939      	ldr	r1, [pc, #228]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	e03a      	b.n	8002392 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002324:	4b36      	ldr	r3, [pc, #216]	; (8002400 <HAL_RCC_OscConfig+0x270>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7ff fc65 	bl	8001bf8 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002332:	f7ff fc61 	bl	8001bf8 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e19b      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002344:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4927      	ldr	r1, [pc, #156]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002360:	4313      	orrs	r3, r2
 8002362:	600b      	str	r3, [r1, #0]
 8002364:	e015      	b.n	8002392 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002366:	4b26      	ldr	r3, [pc, #152]	; (8002400 <HAL_RCC_OscConfig+0x270>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7ff fc44 	bl	8001bf8 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002374:	f7ff fc40 	bl	8001bf8 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e17a      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002386:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d03a      	beq.n	8002414 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d019      	beq.n	80023da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <HAL_RCC_OscConfig+0x274>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7ff fc24 	bl	8001bf8 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b4:	f7ff fc20 	bl	8001bf8 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e15a      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023d2:	2001      	movs	r0, #1
 80023d4:	f000 fad8 	bl	8002988 <RCC_Delay>
 80023d8:	e01c      	b.n	8002414 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_RCC_OscConfig+0x274>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e0:	f7ff fc0a 	bl	8001bf8 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e6:	e00f      	b.n	8002408 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e8:	f7ff fc06 	bl	8001bf8 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d908      	bls.n	8002408 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e140      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	42420000 	.word	0x42420000
 8002404:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	4b9e      	ldr	r3, [pc, #632]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e9      	bne.n	80023e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a6 	beq.w	800256e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002426:	4b97      	ldr	r3, [pc, #604]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10d      	bne.n	800244e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b94      	ldr	r3, [pc, #592]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4a93      	ldr	r2, [pc, #588]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	61d3      	str	r3, [r2, #28]
 800243e:	4b91      	ldr	r3, [pc, #580]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244e:	4b8e      	ldr	r3, [pc, #568]	; (8002688 <HAL_RCC_OscConfig+0x4f8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245a:	4b8b      	ldr	r3, [pc, #556]	; (8002688 <HAL_RCC_OscConfig+0x4f8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a8a      	ldr	r2, [pc, #552]	; (8002688 <HAL_RCC_OscConfig+0x4f8>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002466:	f7ff fbc7 	bl	8001bf8 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246e:	f7ff fbc3 	bl	8001bf8 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b64      	cmp	r3, #100	; 0x64
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0fd      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	4b81      	ldr	r3, [pc, #516]	; (8002688 <HAL_RCC_OscConfig+0x4f8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x312>
 8002494:	4b7b      	ldr	r3, [pc, #492]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4a7a      	ldr	r2, [pc, #488]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6213      	str	r3, [r2, #32]
 80024a0:	e02d      	b.n	80024fe <HAL_RCC_OscConfig+0x36e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x334>
 80024aa:	4b76      	ldr	r3, [pc, #472]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a75      	ldr	r2, [pc, #468]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	4b73      	ldr	r3, [pc, #460]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a72      	ldr	r2, [pc, #456]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	6213      	str	r3, [r2, #32]
 80024c2:	e01c      	b.n	80024fe <HAL_RCC_OscConfig+0x36e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x356>
 80024cc:	4b6d      	ldr	r3, [pc, #436]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a6c      	ldr	r2, [pc, #432]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	6213      	str	r3, [r2, #32]
 80024d8:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	e00b      	b.n	80024fe <HAL_RCC_OscConfig+0x36e>
 80024e6:	4b67      	ldr	r3, [pc, #412]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a66      	ldr	r2, [pc, #408]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	6213      	str	r3, [r2, #32]
 80024f2:	4b64      	ldr	r3, [pc, #400]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a63      	ldr	r2, [pc, #396]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d015      	beq.n	8002532 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7ff fb77 	bl	8001bf8 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7ff fb73 	bl	8001bf8 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	; 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0ab      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	4b57      	ldr	r3, [pc, #348]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ee      	beq.n	800250e <HAL_RCC_OscConfig+0x37e>
 8002530:	e014      	b.n	800255c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7ff fb61 	bl	8001bf8 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7ff fb5d 	bl	8001bf8 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e095      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	4b4c      	ldr	r3, [pc, #304]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1ee      	bne.n	800253a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002562:	4b48      	ldr	r3, [pc, #288]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a47      	ldr	r2, [pc, #284]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8081 	beq.w	800267a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002578:	4b42      	ldr	r3, [pc, #264]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d061      	beq.n	8002648 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d146      	bne.n	800261a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258c:	4b3f      	ldr	r3, [pc, #252]	; (800268c <HAL_RCC_OscConfig+0x4fc>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7ff fb31 	bl	8001bf8 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259a:	f7ff fb2d 	bl	8001bf8 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e067      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ac:	4b35      	ldr	r3, [pc, #212]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c0:	d108      	bne.n	80025d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025c2:	4b30      	ldr	r3, [pc, #192]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	492d      	ldr	r1, [pc, #180]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a19      	ldr	r1, [r3, #32]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	430b      	orrs	r3, r1
 80025e6:	4927      	ldr	r1, [pc, #156]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_OscConfig+0x4fc>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7ff fb01 	bl	8001bf8 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fa:	f7ff fafd 	bl	8001bf8 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e037      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x46a>
 8002618:	e02f      	b.n	800267a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <HAL_RCC_OscConfig+0x4fc>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7ff faea 	bl	8001bf8 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002628:	f7ff fae6 	bl	8001bf8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e020      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x498>
 8002646:	e018      	b.n	800267a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e013      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	429a      	cmp	r2, r3
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	40007000 	.word	0x40007000
 800268c:	42420060 	.word	0x42420060

08002690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0d0      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026a4:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d910      	bls.n	80026d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b67      	ldr	r3, [pc, #412]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 0207 	bic.w	r2, r3, #7
 80026ba:	4965      	ldr	r1, [pc, #404]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b63      	ldr	r3, [pc, #396]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0b8      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026ec:	4b59      	ldr	r3, [pc, #356]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a58      	ldr	r2, [pc, #352]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002704:	4b53      	ldr	r3, [pc, #332]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a52      	ldr	r2, [pc, #328]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800270e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002710:	4b50      	ldr	r3, [pc, #320]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	494d      	ldr	r1, [pc, #308]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d040      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	4b47      	ldr	r3, [pc, #284]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d115      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e07f      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	4b41      	ldr	r3, [pc, #260]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e073      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e06b      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276e:	4b39      	ldr	r3, [pc, #228]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4936      	ldr	r1, [pc, #216]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002780:	f7ff fa3a 	bl	8001bf8 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	e00a      	b.n	800279e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002788:	f7ff fa36 	bl	8001bf8 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e053      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 020c 	and.w	r2, r3, #12
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1eb      	bne.n	8002788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b0:	4b27      	ldr	r3, [pc, #156]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d210      	bcs.n	80027e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 0207 	bic.w	r2, r3, #7
 80027c6:	4922      	ldr	r1, [pc, #136]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e032      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	4916      	ldr	r1, [pc, #88]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	490e      	ldr	r1, [pc, #56]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800281e:	f000 f821 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 8002822:	4602      	mov	r2, r0
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	490a      	ldr	r1, [pc, #40]	; (8002858 <HAL_RCC_ClockConfig+0x1c8>)
 8002830:	5ccb      	ldrb	r3, [r1, r3]
 8002832:	fa22 f303 	lsr.w	r3, r2, r3
 8002836:	4a09      	ldr	r2, [pc, #36]	; (800285c <HAL_RCC_ClockConfig+0x1cc>)
 8002838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_RCC_ClockConfig+0x1d0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff f998 	bl	8001b74 <HAL_InitTick>

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40022000 	.word	0x40022000
 8002854:	40021000 	.word	0x40021000
 8002858:	080043cc 	.word	0x080043cc
 800285c:	20000020 	.word	0x20000020
 8002860:	20000024 	.word	0x20000024

08002864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002864:	b490      	push	{r4, r7}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800286a:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <HAL_RCC_GetSysClockFreq+0xb0>)
 800286c:	1d3c      	adds	r4, r7, #4
 800286e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002874:	f240 2301 	movw	r3, #513	; 0x201
 8002878:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	2300      	movs	r3, #0
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800288e:	4b22      	ldr	r3, [pc, #136]	; (8002918 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d002      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0x40>
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x46>
 80028a2:	e02d      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028a4:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a6:	623b      	str	r3, [r7, #32]
      break;
 80028a8:	e02d      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	0c9b      	lsrs	r3, r3, #18
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028b6:	4413      	add	r3, r2
 80028b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d013      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	0c5b      	lsrs	r3, r3, #17
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028d6:	4413      	add	r3, r2
 80028d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	4a0e      	ldr	r2, [pc, #56]	; (800291c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e2:	fb02 f203 	mul.w	r2, r2, r3
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
 80028ee:	e004      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028f4:	fb02 f303 	mul.w	r3, r2, r3
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	623b      	str	r3, [r7, #32]
      break;
 80028fe:	e002      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002902:	623b      	str	r3, [r7, #32]
      break;
 8002904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002906:	6a3b      	ldr	r3, [r7, #32]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3728      	adds	r7, #40	; 0x28
 800290c:	46bd      	mov	sp, r7
 800290e:	bc90      	pop	{r4, r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	080043bc 	.word	0x080043bc
 8002918:	40021000 	.word	0x40021000
 800291c:	007a1200 	.word	0x007a1200
 8002920:	003d0900 	.word	0x003d0900

08002924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002928:	4b02      	ldr	r3, [pc, #8]	; (8002934 <HAL_RCC_GetHCLKFreq+0x10>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	20000020 	.word	0x20000020

08002938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800293c:	f7ff fff2 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	4903      	ldr	r1, [pc, #12]	; (800295c <HAL_RCC_GetPCLK1Freq+0x24>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	080043dc 	.word	0x080043dc

08002960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002964:	f7ff ffde 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	0adb      	lsrs	r3, r3, #11
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	4903      	ldr	r1, [pc, #12]	; (8002984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	080043dc 	.word	0x080043dc

08002988 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <RCC_Delay+0x34>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <RCC_Delay+0x38>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	0a5b      	lsrs	r3, r3, #9
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029a4:	bf00      	nop
  }
  while (Delay --);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1e5a      	subs	r2, r3, #1
 80029aa:	60fa      	str	r2, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f9      	bne.n	80029a4 <RCC_Delay+0x1c>
}
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	20000020 	.word	0x20000020
 80029c0:	10624dd3 	.word	0x10624dd3

080029c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e041      	b.n	8002a5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe fef4 	bl	80017d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3304      	adds	r3, #4
 8002a00:	4619      	mov	r1, r3
 8002a02:	4610      	mov	r0, r2
 8002a04:	f000 fb86 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d001      	beq.n	8002a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e03a      	b.n	8002af2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a18      	ldr	r2, [pc, #96]	; (8002afc <HAL_TIM_Base_Start_IT+0x98>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00e      	beq.n	8002abc <HAL_TIM_Base_Start_IT+0x58>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa6:	d009      	beq.n	8002abc <HAL_TIM_Base_Start_IT+0x58>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <HAL_TIM_Base_Start_IT+0x9c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d004      	beq.n	8002abc <HAL_TIM_Base_Start_IT+0x58>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d111      	bne.n	8002ae0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d010      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ade:	e007      	b.n	8002af0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40000800 	.word	0x40000800

08002b08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e041      	b.n	8002b9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f839 	bl	8002ba6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f000 fae4 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d122      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d11b      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0202 	mvn.w	r2, #2
 8002be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa6f 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa62 	bl	80030cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fa71 	bl	80030f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d122      	bne.n	8002c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d11b      	bne.n	8002c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0204 	mvn.w	r2, #4
 8002c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fa45 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa38 	bl	80030cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fa47 	bl	80030f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d122      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d11b      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0208 	mvn.w	r2, #8
 8002c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2204      	movs	r2, #4
 8002c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fa1b 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002ca8:	e005      	b.n	8002cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa0e 	bl	80030cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fa1d 	bl	80030f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d122      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d11b      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0210 	mvn.w	r2, #16
 8002ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f9f1 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f9e4 	bl	80030cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f9f3 	bl	80030f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d107      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0201 	mvn.w	r2, #1
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe fb5c 	bl	80013f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d10e      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d54:	2b80      	cmp	r3, #128	; 0x80
 8002d56:	d107      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fcbd 	bl	80036e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	2b40      	cmp	r3, #64	; 0x40
 8002d74:	d10e      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d107      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f9b7 	bl	8003102 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d10e      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d107      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0220 	mvn.w	r2, #32
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fc88 	bl	80036d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e0ac      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	f200 809f 	bhi.w	8002f30 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002df2:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df8:	08002e2d 	.word	0x08002e2d
 8002dfc:	08002f31 	.word	0x08002f31
 8002e00:	08002f31 	.word	0x08002f31
 8002e04:	08002f31 	.word	0x08002f31
 8002e08:	08002e6d 	.word	0x08002e6d
 8002e0c:	08002f31 	.word	0x08002f31
 8002e10:	08002f31 	.word	0x08002f31
 8002e14:	08002f31 	.word	0x08002f31
 8002e18:	08002eaf 	.word	0x08002eaf
 8002e1c:	08002f31 	.word	0x08002f31
 8002e20:	08002f31 	.word	0x08002f31
 8002e24:	08002f31 	.word	0x08002f31
 8002e28:	08002eef 	.word	0x08002eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 f9d0 	bl	80031d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0208 	orr.w	r2, r2, #8
 8002e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0204 	bic.w	r2, r2, #4
 8002e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6999      	ldr	r1, [r3, #24]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	619a      	str	r2, [r3, #24]
      break;
 8002e6a:	e062      	b.n	8002f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fa16 	bl	80032a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699a      	ldr	r2, [r3, #24]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6999      	ldr	r1, [r3, #24]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	021a      	lsls	r2, r3, #8
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	619a      	str	r2, [r3, #24]
      break;
 8002eac:	e041      	b.n	8002f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fa5f 	bl	8003378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0208 	orr.w	r2, r2, #8
 8002ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69da      	ldr	r2, [r3, #28]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0204 	bic.w	r2, r2, #4
 8002ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69d9      	ldr	r1, [r3, #28]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	61da      	str	r2, [r3, #28]
      break;
 8002eec:	e021      	b.n	8002f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 faa9 	bl	800344c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69da      	ldr	r2, [r3, #28]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69d9      	ldr	r1, [r3, #28]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	021a      	lsls	r2, r3, #8
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	61da      	str	r2, [r3, #28]
      break;
 8002f2e:	e000      	b.n	8002f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_TIM_ConfigClockSource+0x18>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e0b3      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x180>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f94:	d03e      	beq.n	8003014 <HAL_TIM_ConfigClockSource+0xd0>
 8002f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f9a:	f200 8087 	bhi.w	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa2:	f000 8085 	beq.w	80030b0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002faa:	d87f      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002fac:	2b70      	cmp	r3, #112	; 0x70
 8002fae:	d01a      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0xa2>
 8002fb0:	2b70      	cmp	r3, #112	; 0x70
 8002fb2:	d87b      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002fb4:	2b60      	cmp	r3, #96	; 0x60
 8002fb6:	d050      	beq.n	800305a <HAL_TIM_ConfigClockSource+0x116>
 8002fb8:	2b60      	cmp	r3, #96	; 0x60
 8002fba:	d877      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002fbc:	2b50      	cmp	r3, #80	; 0x50
 8002fbe:	d03c      	beq.n	800303a <HAL_TIM_ConfigClockSource+0xf6>
 8002fc0:	2b50      	cmp	r3, #80	; 0x50
 8002fc2:	d873      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d058      	beq.n	800307a <HAL_TIM_ConfigClockSource+0x136>
 8002fc8:	2b40      	cmp	r3, #64	; 0x40
 8002fca:	d86f      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002fcc:	2b30      	cmp	r3, #48	; 0x30
 8002fce:	d064      	beq.n	800309a <HAL_TIM_ConfigClockSource+0x156>
 8002fd0:	2b30      	cmp	r3, #48	; 0x30
 8002fd2:	d86b      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d060      	beq.n	800309a <HAL_TIM_ConfigClockSource+0x156>
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d867      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d05c      	beq.n	800309a <HAL_TIM_ConfigClockSource+0x156>
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d05a      	beq.n	800309a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002fe4:	e062      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6899      	ldr	r1, [r3, #8]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f000 faee 	bl	80035d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003008:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	609a      	str	r2, [r3, #8]
      break;
 8003012:	e04e      	b.n	80030b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	6899      	ldr	r1, [r3, #8]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f000 fad7 	bl	80035d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003036:	609a      	str	r2, [r3, #8]
      break;
 8003038:	e03b      	b.n	80030b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6859      	ldr	r1, [r3, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	461a      	mov	r2, r3
 8003048:	f000 fa4e 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2150      	movs	r1, #80	; 0x50
 8003052:	4618      	mov	r0, r3
 8003054:	f000 faa5 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8003058:	e02b      	b.n	80030b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	461a      	mov	r2, r3
 8003068:	f000 fa6c 	bl	8003544 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2160      	movs	r1, #96	; 0x60
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fa95 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8003078:	e01b      	b.n	80030b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6859      	ldr	r1, [r3, #4]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	461a      	mov	r2, r3
 8003088:	f000 fa2e 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2140      	movs	r1, #64	; 0x40
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fa85 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8003098:	e00b      	b.n	80030b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4619      	mov	r1, r3
 80030a4:	4610      	mov	r0, r2
 80030a6:	f000 fa7c 	bl	80035a2 <TIM_ITRx_SetConfig>
        break;
 80030aa:	e002      	b.n	80030b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030ac:	bf00      	nop
 80030ae:	e000      	b.n	80030b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a29      	ldr	r2, [pc, #164]	; (80031cc <TIM_Base_SetConfig+0xb8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00b      	beq.n	8003144 <TIM_Base_SetConfig+0x30>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003132:	d007      	beq.n	8003144 <TIM_Base_SetConfig+0x30>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a26      	ldr	r2, [pc, #152]	; (80031d0 <TIM_Base_SetConfig+0xbc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <TIM_Base_SetConfig+0x30>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a25      	ldr	r2, [pc, #148]	; (80031d4 <TIM_Base_SetConfig+0xc0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d108      	bne.n	8003156 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <TIM_Base_SetConfig+0xb8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00b      	beq.n	8003176 <TIM_Base_SetConfig+0x62>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003164:	d007      	beq.n	8003176 <TIM_Base_SetConfig+0x62>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <TIM_Base_SetConfig+0xbc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <TIM_Base_SetConfig+0x62>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a18      	ldr	r2, [pc, #96]	; (80031d4 <TIM_Base_SetConfig+0xc0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d108      	bne.n	8003188 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a07      	ldr	r2, [pc, #28]	; (80031cc <TIM_Base_SetConfig+0xb8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d103      	bne.n	80031bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	615a      	str	r2, [r3, #20]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40000400 	.word	0x40000400
 80031d4:	40000800 	.word	0x40000800

080031d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f023 0201 	bic.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f023 0302 	bic.w	r3, r3, #2
 8003220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <TIM_OC1_SetConfig+0xc8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10c      	bne.n	800324e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f023 0308 	bic.w	r3, r3, #8
 800323a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f023 0304 	bic.w	r3, r3, #4
 800324c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <TIM_OC1_SetConfig+0xc8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d111      	bne.n	800327a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	621a      	str	r2, [r3, #32]
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40012c00 	.word	0x40012c00

080032a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f023 0210 	bic.w	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0320 	bic.w	r3, r3, #32
 80032ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <TIM_OC2_SetConfig+0xd0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d10d      	bne.n	8003320 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800330a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800331e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a14      	ldr	r2, [pc, #80]	; (8003374 <TIM_OC2_SetConfig+0xd0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d113      	bne.n	8003350 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800332e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00

08003378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <TIM_OC3_SetConfig+0xd0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10d      	bne.n	80033f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a14      	ldr	r2, [pc, #80]	; (8003448 <TIM_OC3_SetConfig+0xd0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d113      	bne.n	8003422 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	621a      	str	r2, [r3, #32]
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40012c00 	.word	0x40012c00

0800344c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	031b      	lsls	r3, r3, #12
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a0f      	ldr	r2, [pc, #60]	; (80034e4 <TIM_OC4_SetConfig+0x98>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d109      	bne.n	80034c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	40012c00 	.word	0x40012c00

080034e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f023 0201 	bic.w	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f023 030a 	bic.w	r3, r3, #10
 8003524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f023 0210 	bic.w	r2, r3, #16
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800356e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	031b      	lsls	r3, r3, #12
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003580:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	621a      	str	r2, [r3, #32]
}
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b085      	sub	sp, #20
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	f043 0307 	orr.w	r3, r3, #7
 80035c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	609a      	str	r2, [r3, #8]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b087      	sub	sp, #28
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	021a      	lsls	r2, r3, #8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	609a      	str	r2, [r3, #8]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003628:	2302      	movs	r3, #2
 800362a:	e046      	b.n	80036ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a16      	ldr	r2, [pc, #88]	; (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00e      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003678:	d009      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d004      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a10      	ldr	r2, [pc, #64]	; (80036cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10c      	bne.n	80036a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	4313      	orrs	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	40012c00 	.word	0x40012c00
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40000800 	.word	0x40000800

080036d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e03f      	b.n	8003786 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fe f8c6 	bl	80018ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003736:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f905 	bl	8003948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800374c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800375c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800376c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b08a      	sub	sp, #40	; 0x28
 8003792:	af02      	add	r7, sp, #8
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d17c      	bne.n	80038a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_UART_Transmit+0x2c>
 80037b4:	88fb      	ldrh	r3, [r7, #6]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e075      	b.n	80038aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_UART_Transmit+0x3e>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e06e      	b.n	80038aa <HAL_UART_Transmit+0x11c>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2221      	movs	r2, #33	; 0x21
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037e2:	f7fe fa09 	bl	8001bf8 <HAL_GetTick>
 80037e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	88fa      	ldrh	r2, [r7, #6]
 80037f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fc:	d108      	bne.n	8003810 <HAL_UART_Transmit+0x82>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d104      	bne.n	8003810 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	e003      	b.n	8003818 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003814:	2300      	movs	r3, #0
 8003816:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003820:	e02a      	b.n	8003878 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2200      	movs	r2, #0
 800382a:	2180      	movs	r1, #128	; 0x80
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f840 	bl	80038b2 <UART_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e036      	b.n	80038aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10b      	bne.n	800385a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003850:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	3302      	adds	r3, #2
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	e007      	b.n	800386a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	781a      	ldrb	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	3301      	adds	r3, #1
 8003868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1cf      	bne.n	8003822 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2200      	movs	r2, #0
 800388a:	2140      	movs	r1, #64	; 0x40
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f810 	bl	80038b2 <UART_WaitOnFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e006      	b.n	80038aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e000      	b.n	80038aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
  }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	603b      	str	r3, [r7, #0]
 80038be:	4613      	mov	r3, r2
 80038c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c2:	e02c      	b.n	800391e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ca:	d028      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80038d2:	f7fe f991 	bl	8001bf8 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d21d      	bcs.n	800391e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038f0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e00f      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4013      	ands	r3, r2
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	bf0c      	ite	eq
 800392e:	2301      	moveq	r3, #1
 8003930:	2300      	movne	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	429a      	cmp	r2, r3
 800393a:	d0c3      	beq.n	80038c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003982:	f023 030c 	bic.w	r3, r3, #12
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	430b      	orrs	r3, r1
 800398e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2c      	ldr	r2, [pc, #176]	; (8003a5c <UART_SetConfig+0x114>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d103      	bne.n	80039b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039b0:	f7fe ffd6 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	e002      	b.n	80039be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039b8:	f7fe ffbe 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 80039bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	009a      	lsls	r2, r3, #2
 80039c8:	441a      	add	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	4a22      	ldr	r2, [pc, #136]	; (8003a60 <UART_SetConfig+0x118>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	0119      	lsls	r1, r3, #4
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	009a      	lsls	r2, r3, #2
 80039e8:	441a      	add	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f4:	4b1a      	ldr	r3, [pc, #104]	; (8003a60 <UART_SetConfig+0x118>)
 80039f6:	fba3 0302 	umull	r0, r3, r3, r2
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	2064      	movs	r0, #100	; 0x64
 80039fe:	fb00 f303 	mul.w	r3, r0, r3
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	3332      	adds	r3, #50	; 0x32
 8003a08:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <UART_SetConfig+0x118>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a14:	4419      	add	r1, r3
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009a      	lsls	r2, r3, #2
 8003a20:	441a      	add	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <UART_SetConfig+0x118>)
 8003a2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2064      	movs	r0, #100	; 0x64
 8003a36:	fb00 f303 	mul.w	r3, r0, r3
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	3332      	adds	r3, #50	; 0x32
 8003a40:	4a07      	ldr	r2, [pc, #28]	; (8003a60 <UART_SetConfig+0x118>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	f003 020f 	and.w	r2, r3, #15
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	440a      	add	r2, r1
 8003a52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40013800 	.word	0x40013800
 8003a60:	51eb851f 	.word	0x51eb851f

08003a64 <__errno>:
 8003a64:	4b01      	ldr	r3, [pc, #4]	; (8003a6c <__errno+0x8>)
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	2000002c 	.word	0x2000002c

08003a70 <__libc_init_array>:
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	2600      	movs	r6, #0
 8003a74:	4d0c      	ldr	r5, [pc, #48]	; (8003aa8 <__libc_init_array+0x38>)
 8003a76:	4c0d      	ldr	r4, [pc, #52]	; (8003aac <__libc_init_array+0x3c>)
 8003a78:	1b64      	subs	r4, r4, r5
 8003a7a:	10a4      	asrs	r4, r4, #2
 8003a7c:	42a6      	cmp	r6, r4
 8003a7e:	d109      	bne.n	8003a94 <__libc_init_array+0x24>
 8003a80:	f000 fc5c 	bl	800433c <_init>
 8003a84:	2600      	movs	r6, #0
 8003a86:	4d0a      	ldr	r5, [pc, #40]	; (8003ab0 <__libc_init_array+0x40>)
 8003a88:	4c0a      	ldr	r4, [pc, #40]	; (8003ab4 <__libc_init_array+0x44>)
 8003a8a:	1b64      	subs	r4, r4, r5
 8003a8c:	10a4      	asrs	r4, r4, #2
 8003a8e:	42a6      	cmp	r6, r4
 8003a90:	d105      	bne.n	8003a9e <__libc_init_array+0x2e>
 8003a92:	bd70      	pop	{r4, r5, r6, pc}
 8003a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a98:	4798      	blx	r3
 8003a9a:	3601      	adds	r6, #1
 8003a9c:	e7ee      	b.n	8003a7c <__libc_init_array+0xc>
 8003a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa2:	4798      	blx	r3
 8003aa4:	3601      	adds	r6, #1
 8003aa6:	e7f2      	b.n	8003a8e <__libc_init_array+0x1e>
 8003aa8:	08004418 	.word	0x08004418
 8003aac:	08004418 	.word	0x08004418
 8003ab0:	08004418 	.word	0x08004418
 8003ab4:	0800441c 	.word	0x0800441c

08003ab8 <memset>:
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4402      	add	r2, r0
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d100      	bne.n	8003ac2 <memset+0xa>
 8003ac0:	4770      	bx	lr
 8003ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ac6:	e7f9      	b.n	8003abc <memset+0x4>

08003ac8 <siprintf>:
 8003ac8:	b40e      	push	{r1, r2, r3}
 8003aca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ace:	b500      	push	{lr}
 8003ad0:	b09c      	sub	sp, #112	; 0x70
 8003ad2:	ab1d      	add	r3, sp, #116	; 0x74
 8003ad4:	9002      	str	r0, [sp, #8]
 8003ad6:	9006      	str	r0, [sp, #24]
 8003ad8:	9107      	str	r1, [sp, #28]
 8003ada:	9104      	str	r1, [sp, #16]
 8003adc:	4808      	ldr	r0, [pc, #32]	; (8003b00 <siprintf+0x38>)
 8003ade:	4909      	ldr	r1, [pc, #36]	; (8003b04 <siprintf+0x3c>)
 8003ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ae4:	9105      	str	r1, [sp, #20]
 8003ae6:	6800      	ldr	r0, [r0, #0]
 8003ae8:	a902      	add	r1, sp, #8
 8003aea:	9301      	str	r3, [sp, #4]
 8003aec:	f000 f868 	bl	8003bc0 <_svfiprintf_r>
 8003af0:	2200      	movs	r2, #0
 8003af2:	9b02      	ldr	r3, [sp, #8]
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	b01c      	add	sp, #112	; 0x70
 8003af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003afc:	b003      	add	sp, #12
 8003afe:	4770      	bx	lr
 8003b00:	2000002c 	.word	0x2000002c
 8003b04:	ffff0208 	.word	0xffff0208

08003b08 <__ssputs_r>:
 8003b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b0c:	688e      	ldr	r6, [r1, #8]
 8003b0e:	4682      	mov	sl, r0
 8003b10:	429e      	cmp	r6, r3
 8003b12:	460c      	mov	r4, r1
 8003b14:	4690      	mov	r8, r2
 8003b16:	461f      	mov	r7, r3
 8003b18:	d838      	bhi.n	8003b8c <__ssputs_r+0x84>
 8003b1a:	898a      	ldrh	r2, [r1, #12]
 8003b1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b20:	d032      	beq.n	8003b88 <__ssputs_r+0x80>
 8003b22:	6825      	ldr	r5, [r4, #0]
 8003b24:	6909      	ldr	r1, [r1, #16]
 8003b26:	3301      	adds	r3, #1
 8003b28:	eba5 0901 	sub.w	r9, r5, r1
 8003b2c:	6965      	ldr	r5, [r4, #20]
 8003b2e:	444b      	add	r3, r9
 8003b30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b38:	106d      	asrs	r5, r5, #1
 8003b3a:	429d      	cmp	r5, r3
 8003b3c:	bf38      	it	cc
 8003b3e:	461d      	movcc	r5, r3
 8003b40:	0553      	lsls	r3, r2, #21
 8003b42:	d531      	bpl.n	8003ba8 <__ssputs_r+0xa0>
 8003b44:	4629      	mov	r1, r5
 8003b46:	f000 fb53 	bl	80041f0 <_malloc_r>
 8003b4a:	4606      	mov	r6, r0
 8003b4c:	b950      	cbnz	r0, 8003b64 <__ssputs_r+0x5c>
 8003b4e:	230c      	movs	r3, #12
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295
 8003b54:	f8ca 3000 	str.w	r3, [sl]
 8003b58:	89a3      	ldrh	r3, [r4, #12]
 8003b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b5e:	81a3      	strh	r3, [r4, #12]
 8003b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b64:	464a      	mov	r2, r9
 8003b66:	6921      	ldr	r1, [r4, #16]
 8003b68:	f000 face 	bl	8004108 <memcpy>
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b76:	81a3      	strh	r3, [r4, #12]
 8003b78:	6126      	str	r6, [r4, #16]
 8003b7a:	444e      	add	r6, r9
 8003b7c:	6026      	str	r6, [r4, #0]
 8003b7e:	463e      	mov	r6, r7
 8003b80:	6165      	str	r5, [r4, #20]
 8003b82:	eba5 0509 	sub.w	r5, r5, r9
 8003b86:	60a5      	str	r5, [r4, #8]
 8003b88:	42be      	cmp	r6, r7
 8003b8a:	d900      	bls.n	8003b8e <__ssputs_r+0x86>
 8003b8c:	463e      	mov	r6, r7
 8003b8e:	4632      	mov	r2, r6
 8003b90:	4641      	mov	r1, r8
 8003b92:	6820      	ldr	r0, [r4, #0]
 8003b94:	f000 fac6 	bl	8004124 <memmove>
 8003b98:	68a3      	ldr	r3, [r4, #8]
 8003b9a:	6822      	ldr	r2, [r4, #0]
 8003b9c:	1b9b      	subs	r3, r3, r6
 8003b9e:	4432      	add	r2, r6
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	60a3      	str	r3, [r4, #8]
 8003ba4:	6022      	str	r2, [r4, #0]
 8003ba6:	e7db      	b.n	8003b60 <__ssputs_r+0x58>
 8003ba8:	462a      	mov	r2, r5
 8003baa:	f000 fb7b 	bl	80042a4 <_realloc_r>
 8003bae:	4606      	mov	r6, r0
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d1e1      	bne.n	8003b78 <__ssputs_r+0x70>
 8003bb4:	4650      	mov	r0, sl
 8003bb6:	6921      	ldr	r1, [r4, #16]
 8003bb8:	f000 face 	bl	8004158 <_free_r>
 8003bbc:	e7c7      	b.n	8003b4e <__ssputs_r+0x46>
	...

08003bc0 <_svfiprintf_r>:
 8003bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc4:	4698      	mov	r8, r3
 8003bc6:	898b      	ldrh	r3, [r1, #12]
 8003bc8:	4607      	mov	r7, r0
 8003bca:	061b      	lsls	r3, r3, #24
 8003bcc:	460d      	mov	r5, r1
 8003bce:	4614      	mov	r4, r2
 8003bd0:	b09d      	sub	sp, #116	; 0x74
 8003bd2:	d50e      	bpl.n	8003bf2 <_svfiprintf_r+0x32>
 8003bd4:	690b      	ldr	r3, [r1, #16]
 8003bd6:	b963      	cbnz	r3, 8003bf2 <_svfiprintf_r+0x32>
 8003bd8:	2140      	movs	r1, #64	; 0x40
 8003bda:	f000 fb09 	bl	80041f0 <_malloc_r>
 8003bde:	6028      	str	r0, [r5, #0]
 8003be0:	6128      	str	r0, [r5, #16]
 8003be2:	b920      	cbnz	r0, 8003bee <_svfiprintf_r+0x2e>
 8003be4:	230c      	movs	r3, #12
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bec:	e0d1      	b.n	8003d92 <_svfiprintf_r+0x1d2>
 8003bee:	2340      	movs	r3, #64	; 0x40
 8003bf0:	616b      	str	r3, [r5, #20]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf6:	2320      	movs	r3, #32
 8003bf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bfc:	2330      	movs	r3, #48	; 0x30
 8003bfe:	f04f 0901 	mov.w	r9, #1
 8003c02:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003dac <_svfiprintf_r+0x1ec>
 8003c0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c0e:	4623      	mov	r3, r4
 8003c10:	469a      	mov	sl, r3
 8003c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c16:	b10a      	cbz	r2, 8003c1c <_svfiprintf_r+0x5c>
 8003c18:	2a25      	cmp	r2, #37	; 0x25
 8003c1a:	d1f9      	bne.n	8003c10 <_svfiprintf_r+0x50>
 8003c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8003c20:	d00b      	beq.n	8003c3a <_svfiprintf_r+0x7a>
 8003c22:	465b      	mov	r3, fp
 8003c24:	4622      	mov	r2, r4
 8003c26:	4629      	mov	r1, r5
 8003c28:	4638      	mov	r0, r7
 8003c2a:	f7ff ff6d 	bl	8003b08 <__ssputs_r>
 8003c2e:	3001      	adds	r0, #1
 8003c30:	f000 80aa 	beq.w	8003d88 <_svfiprintf_r+0x1c8>
 8003c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c36:	445a      	add	r2, fp
 8003c38:	9209      	str	r2, [sp, #36]	; 0x24
 8003c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80a2 	beq.w	8003d88 <_svfiprintf_r+0x1c8>
 8003c44:	2300      	movs	r3, #0
 8003c46:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c4e:	f10a 0a01 	add.w	sl, sl, #1
 8003c52:	9304      	str	r3, [sp, #16]
 8003c54:	9307      	str	r3, [sp, #28]
 8003c56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c5a:	931a      	str	r3, [sp, #104]	; 0x68
 8003c5c:	4654      	mov	r4, sl
 8003c5e:	2205      	movs	r2, #5
 8003c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c64:	4851      	ldr	r0, [pc, #324]	; (8003dac <_svfiprintf_r+0x1ec>)
 8003c66:	f000 fa41 	bl	80040ec <memchr>
 8003c6a:	9a04      	ldr	r2, [sp, #16]
 8003c6c:	b9d8      	cbnz	r0, 8003ca6 <_svfiprintf_r+0xe6>
 8003c6e:	06d0      	lsls	r0, r2, #27
 8003c70:	bf44      	itt	mi
 8003c72:	2320      	movmi	r3, #32
 8003c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c78:	0711      	lsls	r1, r2, #28
 8003c7a:	bf44      	itt	mi
 8003c7c:	232b      	movmi	r3, #43	; 0x2b
 8003c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c82:	f89a 3000 	ldrb.w	r3, [sl]
 8003c86:	2b2a      	cmp	r3, #42	; 0x2a
 8003c88:	d015      	beq.n	8003cb6 <_svfiprintf_r+0xf6>
 8003c8a:	4654      	mov	r4, sl
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f04f 0c0a 	mov.w	ip, #10
 8003c92:	9a07      	ldr	r2, [sp, #28]
 8003c94:	4621      	mov	r1, r4
 8003c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c9a:	3b30      	subs	r3, #48	; 0x30
 8003c9c:	2b09      	cmp	r3, #9
 8003c9e:	d94e      	bls.n	8003d3e <_svfiprintf_r+0x17e>
 8003ca0:	b1b0      	cbz	r0, 8003cd0 <_svfiprintf_r+0x110>
 8003ca2:	9207      	str	r2, [sp, #28]
 8003ca4:	e014      	b.n	8003cd0 <_svfiprintf_r+0x110>
 8003ca6:	eba0 0308 	sub.w	r3, r0, r8
 8003caa:	fa09 f303 	lsl.w	r3, r9, r3
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	46a2      	mov	sl, r4
 8003cb2:	9304      	str	r3, [sp, #16]
 8003cb4:	e7d2      	b.n	8003c5c <_svfiprintf_r+0x9c>
 8003cb6:	9b03      	ldr	r3, [sp, #12]
 8003cb8:	1d19      	adds	r1, r3, #4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	9103      	str	r1, [sp, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	bfbb      	ittet	lt
 8003cc2:	425b      	neglt	r3, r3
 8003cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8003cc8:	9307      	strge	r3, [sp, #28]
 8003cca:	9307      	strlt	r3, [sp, #28]
 8003ccc:	bfb8      	it	lt
 8003cce:	9204      	strlt	r2, [sp, #16]
 8003cd0:	7823      	ldrb	r3, [r4, #0]
 8003cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8003cd4:	d10c      	bne.n	8003cf0 <_svfiprintf_r+0x130>
 8003cd6:	7863      	ldrb	r3, [r4, #1]
 8003cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8003cda:	d135      	bne.n	8003d48 <_svfiprintf_r+0x188>
 8003cdc:	9b03      	ldr	r3, [sp, #12]
 8003cde:	3402      	adds	r4, #2
 8003ce0:	1d1a      	adds	r2, r3, #4
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	9203      	str	r2, [sp, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bfb8      	it	lt
 8003cea:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cee:	9305      	str	r3, [sp, #20]
 8003cf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003dbc <_svfiprintf_r+0x1fc>
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	4650      	mov	r0, sl
 8003cf8:	7821      	ldrb	r1, [r4, #0]
 8003cfa:	f000 f9f7 	bl	80040ec <memchr>
 8003cfe:	b140      	cbz	r0, 8003d12 <_svfiprintf_r+0x152>
 8003d00:	2340      	movs	r3, #64	; 0x40
 8003d02:	eba0 000a 	sub.w	r0, r0, sl
 8003d06:	fa03 f000 	lsl.w	r0, r3, r0
 8003d0a:	9b04      	ldr	r3, [sp, #16]
 8003d0c:	3401      	adds	r4, #1
 8003d0e:	4303      	orrs	r3, r0
 8003d10:	9304      	str	r3, [sp, #16]
 8003d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d16:	2206      	movs	r2, #6
 8003d18:	4825      	ldr	r0, [pc, #148]	; (8003db0 <_svfiprintf_r+0x1f0>)
 8003d1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d1e:	f000 f9e5 	bl	80040ec <memchr>
 8003d22:	2800      	cmp	r0, #0
 8003d24:	d038      	beq.n	8003d98 <_svfiprintf_r+0x1d8>
 8003d26:	4b23      	ldr	r3, [pc, #140]	; (8003db4 <_svfiprintf_r+0x1f4>)
 8003d28:	bb1b      	cbnz	r3, 8003d72 <_svfiprintf_r+0x1b2>
 8003d2a:	9b03      	ldr	r3, [sp, #12]
 8003d2c:	3307      	adds	r3, #7
 8003d2e:	f023 0307 	bic.w	r3, r3, #7
 8003d32:	3308      	adds	r3, #8
 8003d34:	9303      	str	r3, [sp, #12]
 8003d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d38:	4433      	add	r3, r6
 8003d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d3c:	e767      	b.n	8003c0e <_svfiprintf_r+0x4e>
 8003d3e:	460c      	mov	r4, r1
 8003d40:	2001      	movs	r0, #1
 8003d42:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d46:	e7a5      	b.n	8003c94 <_svfiprintf_r+0xd4>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f04f 0c0a 	mov.w	ip, #10
 8003d4e:	4619      	mov	r1, r3
 8003d50:	3401      	adds	r4, #1
 8003d52:	9305      	str	r3, [sp, #20]
 8003d54:	4620      	mov	r0, r4
 8003d56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d5a:	3a30      	subs	r2, #48	; 0x30
 8003d5c:	2a09      	cmp	r2, #9
 8003d5e:	d903      	bls.n	8003d68 <_svfiprintf_r+0x1a8>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0c5      	beq.n	8003cf0 <_svfiprintf_r+0x130>
 8003d64:	9105      	str	r1, [sp, #20]
 8003d66:	e7c3      	b.n	8003cf0 <_svfiprintf_r+0x130>
 8003d68:	4604      	mov	r4, r0
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d70:	e7f0      	b.n	8003d54 <_svfiprintf_r+0x194>
 8003d72:	ab03      	add	r3, sp, #12
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	462a      	mov	r2, r5
 8003d78:	4638      	mov	r0, r7
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <_svfiprintf_r+0x1f8>)
 8003d7c:	a904      	add	r1, sp, #16
 8003d7e:	f3af 8000 	nop.w
 8003d82:	1c42      	adds	r2, r0, #1
 8003d84:	4606      	mov	r6, r0
 8003d86:	d1d6      	bne.n	8003d36 <_svfiprintf_r+0x176>
 8003d88:	89ab      	ldrh	r3, [r5, #12]
 8003d8a:	065b      	lsls	r3, r3, #25
 8003d8c:	f53f af2c 	bmi.w	8003be8 <_svfiprintf_r+0x28>
 8003d90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d92:	b01d      	add	sp, #116	; 0x74
 8003d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d98:	ab03      	add	r3, sp, #12
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	462a      	mov	r2, r5
 8003d9e:	4638      	mov	r0, r7
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <_svfiprintf_r+0x1f8>)
 8003da2:	a904      	add	r1, sp, #16
 8003da4:	f000 f87c 	bl	8003ea0 <_printf_i>
 8003da8:	e7eb      	b.n	8003d82 <_svfiprintf_r+0x1c2>
 8003daa:	bf00      	nop
 8003dac:	080043e4 	.word	0x080043e4
 8003db0:	080043ee 	.word	0x080043ee
 8003db4:	00000000 	.word	0x00000000
 8003db8:	08003b09 	.word	0x08003b09
 8003dbc:	080043ea 	.word	0x080043ea

08003dc0 <_printf_common>:
 8003dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc4:	4616      	mov	r6, r2
 8003dc6:	4699      	mov	r9, r3
 8003dc8:	688a      	ldr	r2, [r1, #8]
 8003dca:	690b      	ldr	r3, [r1, #16]
 8003dcc:	4607      	mov	r7, r0
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	bfb8      	it	lt
 8003dd2:	4613      	movlt	r3, r2
 8003dd4:	6033      	str	r3, [r6, #0]
 8003dd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dda:	460c      	mov	r4, r1
 8003ddc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003de0:	b10a      	cbz	r2, 8003de6 <_printf_common+0x26>
 8003de2:	3301      	adds	r3, #1
 8003de4:	6033      	str	r3, [r6, #0]
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	0699      	lsls	r1, r3, #26
 8003dea:	bf42      	ittt	mi
 8003dec:	6833      	ldrmi	r3, [r6, #0]
 8003dee:	3302      	addmi	r3, #2
 8003df0:	6033      	strmi	r3, [r6, #0]
 8003df2:	6825      	ldr	r5, [r4, #0]
 8003df4:	f015 0506 	ands.w	r5, r5, #6
 8003df8:	d106      	bne.n	8003e08 <_printf_common+0x48>
 8003dfa:	f104 0a19 	add.w	sl, r4, #25
 8003dfe:	68e3      	ldr	r3, [r4, #12]
 8003e00:	6832      	ldr	r2, [r6, #0]
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	42ab      	cmp	r3, r5
 8003e06:	dc28      	bgt.n	8003e5a <_printf_common+0x9a>
 8003e08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e0c:	1e13      	subs	r3, r2, #0
 8003e0e:	6822      	ldr	r2, [r4, #0]
 8003e10:	bf18      	it	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	0692      	lsls	r2, r2, #26
 8003e16:	d42d      	bmi.n	8003e74 <_printf_common+0xb4>
 8003e18:	4649      	mov	r1, r9
 8003e1a:	4638      	mov	r0, r7
 8003e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e20:	47c0      	blx	r8
 8003e22:	3001      	adds	r0, #1
 8003e24:	d020      	beq.n	8003e68 <_printf_common+0xa8>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	68e5      	ldr	r5, [r4, #12]
 8003e2a:	f003 0306 	and.w	r3, r3, #6
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	bf18      	it	ne
 8003e32:	2500      	movne	r5, #0
 8003e34:	6832      	ldr	r2, [r6, #0]
 8003e36:	f04f 0600 	mov.w	r6, #0
 8003e3a:	68a3      	ldr	r3, [r4, #8]
 8003e3c:	bf08      	it	eq
 8003e3e:	1aad      	subeq	r5, r5, r2
 8003e40:	6922      	ldr	r2, [r4, #16]
 8003e42:	bf08      	it	eq
 8003e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	bfc4      	itt	gt
 8003e4c:	1a9b      	subgt	r3, r3, r2
 8003e4e:	18ed      	addgt	r5, r5, r3
 8003e50:	341a      	adds	r4, #26
 8003e52:	42b5      	cmp	r5, r6
 8003e54:	d11a      	bne.n	8003e8c <_printf_common+0xcc>
 8003e56:	2000      	movs	r0, #0
 8003e58:	e008      	b.n	8003e6c <_printf_common+0xac>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4652      	mov	r2, sl
 8003e5e:	4649      	mov	r1, r9
 8003e60:	4638      	mov	r0, r7
 8003e62:	47c0      	blx	r8
 8003e64:	3001      	adds	r0, #1
 8003e66:	d103      	bne.n	8003e70 <_printf_common+0xb0>
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e70:	3501      	adds	r5, #1
 8003e72:	e7c4      	b.n	8003dfe <_printf_common+0x3e>
 8003e74:	2030      	movs	r0, #48	; 0x30
 8003e76:	18e1      	adds	r1, r4, r3
 8003e78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e82:	4422      	add	r2, r4
 8003e84:	3302      	adds	r3, #2
 8003e86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e8a:	e7c5      	b.n	8003e18 <_printf_common+0x58>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	4622      	mov	r2, r4
 8003e90:	4649      	mov	r1, r9
 8003e92:	4638      	mov	r0, r7
 8003e94:	47c0      	blx	r8
 8003e96:	3001      	adds	r0, #1
 8003e98:	d0e6      	beq.n	8003e68 <_printf_common+0xa8>
 8003e9a:	3601      	adds	r6, #1
 8003e9c:	e7d9      	b.n	8003e52 <_printf_common+0x92>
	...

08003ea0 <_printf_i>:
 8003ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	7e27      	ldrb	r7, [r4, #24]
 8003ea8:	4691      	mov	r9, r2
 8003eaa:	2f78      	cmp	r7, #120	; 0x78
 8003eac:	4680      	mov	r8, r0
 8003eae:	469a      	mov	sl, r3
 8003eb0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003eb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eb6:	d807      	bhi.n	8003ec8 <_printf_i+0x28>
 8003eb8:	2f62      	cmp	r7, #98	; 0x62
 8003eba:	d80a      	bhi.n	8003ed2 <_printf_i+0x32>
 8003ebc:	2f00      	cmp	r7, #0
 8003ebe:	f000 80d9 	beq.w	8004074 <_printf_i+0x1d4>
 8003ec2:	2f58      	cmp	r7, #88	; 0x58
 8003ec4:	f000 80a4 	beq.w	8004010 <_printf_i+0x170>
 8003ec8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ed0:	e03a      	b.n	8003f48 <_printf_i+0xa8>
 8003ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ed6:	2b15      	cmp	r3, #21
 8003ed8:	d8f6      	bhi.n	8003ec8 <_printf_i+0x28>
 8003eda:	a001      	add	r0, pc, #4	; (adr r0, 8003ee0 <_printf_i+0x40>)
 8003edc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ee0:	08003f39 	.word	0x08003f39
 8003ee4:	08003f4d 	.word	0x08003f4d
 8003ee8:	08003ec9 	.word	0x08003ec9
 8003eec:	08003ec9 	.word	0x08003ec9
 8003ef0:	08003ec9 	.word	0x08003ec9
 8003ef4:	08003ec9 	.word	0x08003ec9
 8003ef8:	08003f4d 	.word	0x08003f4d
 8003efc:	08003ec9 	.word	0x08003ec9
 8003f00:	08003ec9 	.word	0x08003ec9
 8003f04:	08003ec9 	.word	0x08003ec9
 8003f08:	08003ec9 	.word	0x08003ec9
 8003f0c:	0800405b 	.word	0x0800405b
 8003f10:	08003f7d 	.word	0x08003f7d
 8003f14:	0800403d 	.word	0x0800403d
 8003f18:	08003ec9 	.word	0x08003ec9
 8003f1c:	08003ec9 	.word	0x08003ec9
 8003f20:	0800407d 	.word	0x0800407d
 8003f24:	08003ec9 	.word	0x08003ec9
 8003f28:	08003f7d 	.word	0x08003f7d
 8003f2c:	08003ec9 	.word	0x08003ec9
 8003f30:	08003ec9 	.word	0x08003ec9
 8003f34:	08004045 	.word	0x08004045
 8003f38:	680b      	ldr	r3, [r1, #0]
 8003f3a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f3e:	1d1a      	adds	r2, r3, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	600a      	str	r2, [r1, #0]
 8003f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e0a4      	b.n	8004096 <_printf_i+0x1f6>
 8003f4c:	6825      	ldr	r5, [r4, #0]
 8003f4e:	6808      	ldr	r0, [r1, #0]
 8003f50:	062e      	lsls	r6, r5, #24
 8003f52:	f100 0304 	add.w	r3, r0, #4
 8003f56:	d50a      	bpl.n	8003f6e <_printf_i+0xce>
 8003f58:	6805      	ldr	r5, [r0, #0]
 8003f5a:	600b      	str	r3, [r1, #0]
 8003f5c:	2d00      	cmp	r5, #0
 8003f5e:	da03      	bge.n	8003f68 <_printf_i+0xc8>
 8003f60:	232d      	movs	r3, #45	; 0x2d
 8003f62:	426d      	negs	r5, r5
 8003f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f68:	230a      	movs	r3, #10
 8003f6a:	485e      	ldr	r0, [pc, #376]	; (80040e4 <_printf_i+0x244>)
 8003f6c:	e019      	b.n	8003fa2 <_printf_i+0x102>
 8003f6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f72:	6805      	ldr	r5, [r0, #0]
 8003f74:	600b      	str	r3, [r1, #0]
 8003f76:	bf18      	it	ne
 8003f78:	b22d      	sxthne	r5, r5
 8003f7a:	e7ef      	b.n	8003f5c <_printf_i+0xbc>
 8003f7c:	680b      	ldr	r3, [r1, #0]
 8003f7e:	6825      	ldr	r5, [r4, #0]
 8003f80:	1d18      	adds	r0, r3, #4
 8003f82:	6008      	str	r0, [r1, #0]
 8003f84:	0628      	lsls	r0, r5, #24
 8003f86:	d501      	bpl.n	8003f8c <_printf_i+0xec>
 8003f88:	681d      	ldr	r5, [r3, #0]
 8003f8a:	e002      	b.n	8003f92 <_printf_i+0xf2>
 8003f8c:	0669      	lsls	r1, r5, #25
 8003f8e:	d5fb      	bpl.n	8003f88 <_printf_i+0xe8>
 8003f90:	881d      	ldrh	r5, [r3, #0]
 8003f92:	2f6f      	cmp	r7, #111	; 0x6f
 8003f94:	bf0c      	ite	eq
 8003f96:	2308      	moveq	r3, #8
 8003f98:	230a      	movne	r3, #10
 8003f9a:	4852      	ldr	r0, [pc, #328]	; (80040e4 <_printf_i+0x244>)
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fa2:	6866      	ldr	r6, [r4, #4]
 8003fa4:	2e00      	cmp	r6, #0
 8003fa6:	bfa8      	it	ge
 8003fa8:	6821      	ldrge	r1, [r4, #0]
 8003faa:	60a6      	str	r6, [r4, #8]
 8003fac:	bfa4      	itt	ge
 8003fae:	f021 0104 	bicge.w	r1, r1, #4
 8003fb2:	6021      	strge	r1, [r4, #0]
 8003fb4:	b90d      	cbnz	r5, 8003fba <_printf_i+0x11a>
 8003fb6:	2e00      	cmp	r6, #0
 8003fb8:	d04d      	beq.n	8004056 <_printf_i+0x1b6>
 8003fba:	4616      	mov	r6, r2
 8003fbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fc0:	fb03 5711 	mls	r7, r3, r1, r5
 8003fc4:	5dc7      	ldrb	r7, [r0, r7]
 8003fc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fca:	462f      	mov	r7, r5
 8003fcc:	42bb      	cmp	r3, r7
 8003fce:	460d      	mov	r5, r1
 8003fd0:	d9f4      	bls.n	8003fbc <_printf_i+0x11c>
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d10b      	bne.n	8003fee <_printf_i+0x14e>
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	07df      	lsls	r7, r3, #31
 8003fda:	d508      	bpl.n	8003fee <_printf_i+0x14e>
 8003fdc:	6923      	ldr	r3, [r4, #16]
 8003fde:	6861      	ldr	r1, [r4, #4]
 8003fe0:	4299      	cmp	r1, r3
 8003fe2:	bfde      	ittt	le
 8003fe4:	2330      	movle	r3, #48	; 0x30
 8003fe6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fee:	1b92      	subs	r2, r2, r6
 8003ff0:	6122      	str	r2, [r4, #16]
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	f8cd a000 	str.w	sl, [sp]
 8003ffc:	aa03      	add	r2, sp, #12
 8003ffe:	f7ff fedf 	bl	8003dc0 <_printf_common>
 8004002:	3001      	adds	r0, #1
 8004004:	d14c      	bne.n	80040a0 <_printf_i+0x200>
 8004006:	f04f 30ff 	mov.w	r0, #4294967295
 800400a:	b004      	add	sp, #16
 800400c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004010:	4834      	ldr	r0, [pc, #208]	; (80040e4 <_printf_i+0x244>)
 8004012:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004016:	680e      	ldr	r6, [r1, #0]
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	f856 5b04 	ldr.w	r5, [r6], #4
 800401e:	061f      	lsls	r7, r3, #24
 8004020:	600e      	str	r6, [r1, #0]
 8004022:	d514      	bpl.n	800404e <_printf_i+0x1ae>
 8004024:	07d9      	lsls	r1, r3, #31
 8004026:	bf44      	itt	mi
 8004028:	f043 0320 	orrmi.w	r3, r3, #32
 800402c:	6023      	strmi	r3, [r4, #0]
 800402e:	b91d      	cbnz	r5, 8004038 <_printf_i+0x198>
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	f023 0320 	bic.w	r3, r3, #32
 8004036:	6023      	str	r3, [r4, #0]
 8004038:	2310      	movs	r3, #16
 800403a:	e7af      	b.n	8003f9c <_printf_i+0xfc>
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	f043 0320 	orr.w	r3, r3, #32
 8004042:	6023      	str	r3, [r4, #0]
 8004044:	2378      	movs	r3, #120	; 0x78
 8004046:	4828      	ldr	r0, [pc, #160]	; (80040e8 <_printf_i+0x248>)
 8004048:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800404c:	e7e3      	b.n	8004016 <_printf_i+0x176>
 800404e:	065e      	lsls	r6, r3, #25
 8004050:	bf48      	it	mi
 8004052:	b2ad      	uxthmi	r5, r5
 8004054:	e7e6      	b.n	8004024 <_printf_i+0x184>
 8004056:	4616      	mov	r6, r2
 8004058:	e7bb      	b.n	8003fd2 <_printf_i+0x132>
 800405a:	680b      	ldr	r3, [r1, #0]
 800405c:	6826      	ldr	r6, [r4, #0]
 800405e:	1d1d      	adds	r5, r3, #4
 8004060:	6960      	ldr	r0, [r4, #20]
 8004062:	600d      	str	r5, [r1, #0]
 8004064:	0635      	lsls	r5, r6, #24
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	d501      	bpl.n	800406e <_printf_i+0x1ce>
 800406a:	6018      	str	r0, [r3, #0]
 800406c:	e002      	b.n	8004074 <_printf_i+0x1d4>
 800406e:	0671      	lsls	r1, r6, #25
 8004070:	d5fb      	bpl.n	800406a <_printf_i+0x1ca>
 8004072:	8018      	strh	r0, [r3, #0]
 8004074:	2300      	movs	r3, #0
 8004076:	4616      	mov	r6, r2
 8004078:	6123      	str	r3, [r4, #16]
 800407a:	e7ba      	b.n	8003ff2 <_printf_i+0x152>
 800407c:	680b      	ldr	r3, [r1, #0]
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	600a      	str	r2, [r1, #0]
 8004082:	681e      	ldr	r6, [r3, #0]
 8004084:	2100      	movs	r1, #0
 8004086:	4630      	mov	r0, r6
 8004088:	6862      	ldr	r2, [r4, #4]
 800408a:	f000 f82f 	bl	80040ec <memchr>
 800408e:	b108      	cbz	r0, 8004094 <_printf_i+0x1f4>
 8004090:	1b80      	subs	r0, r0, r6
 8004092:	6060      	str	r0, [r4, #4]
 8004094:	6863      	ldr	r3, [r4, #4]
 8004096:	6123      	str	r3, [r4, #16]
 8004098:	2300      	movs	r3, #0
 800409a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800409e:	e7a8      	b.n	8003ff2 <_printf_i+0x152>
 80040a0:	4632      	mov	r2, r6
 80040a2:	4649      	mov	r1, r9
 80040a4:	4640      	mov	r0, r8
 80040a6:	6923      	ldr	r3, [r4, #16]
 80040a8:	47d0      	blx	sl
 80040aa:	3001      	adds	r0, #1
 80040ac:	d0ab      	beq.n	8004006 <_printf_i+0x166>
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	079b      	lsls	r3, r3, #30
 80040b2:	d413      	bmi.n	80040dc <_printf_i+0x23c>
 80040b4:	68e0      	ldr	r0, [r4, #12]
 80040b6:	9b03      	ldr	r3, [sp, #12]
 80040b8:	4298      	cmp	r0, r3
 80040ba:	bfb8      	it	lt
 80040bc:	4618      	movlt	r0, r3
 80040be:	e7a4      	b.n	800400a <_printf_i+0x16a>
 80040c0:	2301      	movs	r3, #1
 80040c2:	4632      	mov	r2, r6
 80040c4:	4649      	mov	r1, r9
 80040c6:	4640      	mov	r0, r8
 80040c8:	47d0      	blx	sl
 80040ca:	3001      	adds	r0, #1
 80040cc:	d09b      	beq.n	8004006 <_printf_i+0x166>
 80040ce:	3501      	adds	r5, #1
 80040d0:	68e3      	ldr	r3, [r4, #12]
 80040d2:	9903      	ldr	r1, [sp, #12]
 80040d4:	1a5b      	subs	r3, r3, r1
 80040d6:	42ab      	cmp	r3, r5
 80040d8:	dcf2      	bgt.n	80040c0 <_printf_i+0x220>
 80040da:	e7eb      	b.n	80040b4 <_printf_i+0x214>
 80040dc:	2500      	movs	r5, #0
 80040de:	f104 0619 	add.w	r6, r4, #25
 80040e2:	e7f5      	b.n	80040d0 <_printf_i+0x230>
 80040e4:	080043f5 	.word	0x080043f5
 80040e8:	08004406 	.word	0x08004406

080040ec <memchr>:
 80040ec:	4603      	mov	r3, r0
 80040ee:	b510      	push	{r4, lr}
 80040f0:	b2c9      	uxtb	r1, r1
 80040f2:	4402      	add	r2, r0
 80040f4:	4293      	cmp	r3, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	d101      	bne.n	80040fe <memchr+0x12>
 80040fa:	2000      	movs	r0, #0
 80040fc:	e003      	b.n	8004106 <memchr+0x1a>
 80040fe:	7804      	ldrb	r4, [r0, #0]
 8004100:	3301      	adds	r3, #1
 8004102:	428c      	cmp	r4, r1
 8004104:	d1f6      	bne.n	80040f4 <memchr+0x8>
 8004106:	bd10      	pop	{r4, pc}

08004108 <memcpy>:
 8004108:	440a      	add	r2, r1
 800410a:	4291      	cmp	r1, r2
 800410c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004110:	d100      	bne.n	8004114 <memcpy+0xc>
 8004112:	4770      	bx	lr
 8004114:	b510      	push	{r4, lr}
 8004116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800411a:	4291      	cmp	r1, r2
 800411c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004120:	d1f9      	bne.n	8004116 <memcpy+0xe>
 8004122:	bd10      	pop	{r4, pc}

08004124 <memmove>:
 8004124:	4288      	cmp	r0, r1
 8004126:	b510      	push	{r4, lr}
 8004128:	eb01 0402 	add.w	r4, r1, r2
 800412c:	d902      	bls.n	8004134 <memmove+0x10>
 800412e:	4284      	cmp	r4, r0
 8004130:	4623      	mov	r3, r4
 8004132:	d807      	bhi.n	8004144 <memmove+0x20>
 8004134:	1e43      	subs	r3, r0, #1
 8004136:	42a1      	cmp	r1, r4
 8004138:	d008      	beq.n	800414c <memmove+0x28>
 800413a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800413e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004142:	e7f8      	b.n	8004136 <memmove+0x12>
 8004144:	4601      	mov	r1, r0
 8004146:	4402      	add	r2, r0
 8004148:	428a      	cmp	r2, r1
 800414a:	d100      	bne.n	800414e <memmove+0x2a>
 800414c:	bd10      	pop	{r4, pc}
 800414e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004156:	e7f7      	b.n	8004148 <memmove+0x24>

08004158 <_free_r>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	4605      	mov	r5, r0
 800415c:	2900      	cmp	r1, #0
 800415e:	d043      	beq.n	80041e8 <_free_r+0x90>
 8004160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004164:	1f0c      	subs	r4, r1, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	bfb8      	it	lt
 800416a:	18e4      	addlt	r4, r4, r3
 800416c:	f000 f8d0 	bl	8004310 <__malloc_lock>
 8004170:	4a1e      	ldr	r2, [pc, #120]	; (80041ec <_free_r+0x94>)
 8004172:	6813      	ldr	r3, [r2, #0]
 8004174:	4610      	mov	r0, r2
 8004176:	b933      	cbnz	r3, 8004186 <_free_r+0x2e>
 8004178:	6063      	str	r3, [r4, #4]
 800417a:	6014      	str	r4, [r2, #0]
 800417c:	4628      	mov	r0, r5
 800417e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004182:	f000 b8cb 	b.w	800431c <__malloc_unlock>
 8004186:	42a3      	cmp	r3, r4
 8004188:	d90a      	bls.n	80041a0 <_free_r+0x48>
 800418a:	6821      	ldr	r1, [r4, #0]
 800418c:	1862      	adds	r2, r4, r1
 800418e:	4293      	cmp	r3, r2
 8004190:	bf01      	itttt	eq
 8004192:	681a      	ldreq	r2, [r3, #0]
 8004194:	685b      	ldreq	r3, [r3, #4]
 8004196:	1852      	addeq	r2, r2, r1
 8004198:	6022      	streq	r2, [r4, #0]
 800419a:	6063      	str	r3, [r4, #4]
 800419c:	6004      	str	r4, [r0, #0]
 800419e:	e7ed      	b.n	800417c <_free_r+0x24>
 80041a0:	461a      	mov	r2, r3
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	b10b      	cbz	r3, 80041aa <_free_r+0x52>
 80041a6:	42a3      	cmp	r3, r4
 80041a8:	d9fa      	bls.n	80041a0 <_free_r+0x48>
 80041aa:	6811      	ldr	r1, [r2, #0]
 80041ac:	1850      	adds	r0, r2, r1
 80041ae:	42a0      	cmp	r0, r4
 80041b0:	d10b      	bne.n	80041ca <_free_r+0x72>
 80041b2:	6820      	ldr	r0, [r4, #0]
 80041b4:	4401      	add	r1, r0
 80041b6:	1850      	adds	r0, r2, r1
 80041b8:	4283      	cmp	r3, r0
 80041ba:	6011      	str	r1, [r2, #0]
 80041bc:	d1de      	bne.n	800417c <_free_r+0x24>
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4401      	add	r1, r0
 80041c4:	6011      	str	r1, [r2, #0]
 80041c6:	6053      	str	r3, [r2, #4]
 80041c8:	e7d8      	b.n	800417c <_free_r+0x24>
 80041ca:	d902      	bls.n	80041d2 <_free_r+0x7a>
 80041cc:	230c      	movs	r3, #12
 80041ce:	602b      	str	r3, [r5, #0]
 80041d0:	e7d4      	b.n	800417c <_free_r+0x24>
 80041d2:	6820      	ldr	r0, [r4, #0]
 80041d4:	1821      	adds	r1, r4, r0
 80041d6:	428b      	cmp	r3, r1
 80041d8:	bf01      	itttt	eq
 80041da:	6819      	ldreq	r1, [r3, #0]
 80041dc:	685b      	ldreq	r3, [r3, #4]
 80041de:	1809      	addeq	r1, r1, r0
 80041e0:	6021      	streq	r1, [r4, #0]
 80041e2:	6063      	str	r3, [r4, #4]
 80041e4:	6054      	str	r4, [r2, #4]
 80041e6:	e7c9      	b.n	800417c <_free_r+0x24>
 80041e8:	bd38      	pop	{r3, r4, r5, pc}
 80041ea:	bf00      	nop
 80041ec:	200000f0 	.word	0x200000f0

080041f0 <_malloc_r>:
 80041f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f2:	1ccd      	adds	r5, r1, #3
 80041f4:	f025 0503 	bic.w	r5, r5, #3
 80041f8:	3508      	adds	r5, #8
 80041fa:	2d0c      	cmp	r5, #12
 80041fc:	bf38      	it	cc
 80041fe:	250c      	movcc	r5, #12
 8004200:	2d00      	cmp	r5, #0
 8004202:	4606      	mov	r6, r0
 8004204:	db01      	blt.n	800420a <_malloc_r+0x1a>
 8004206:	42a9      	cmp	r1, r5
 8004208:	d903      	bls.n	8004212 <_malloc_r+0x22>
 800420a:	230c      	movs	r3, #12
 800420c:	6033      	str	r3, [r6, #0]
 800420e:	2000      	movs	r0, #0
 8004210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004212:	f000 f87d 	bl	8004310 <__malloc_lock>
 8004216:	4921      	ldr	r1, [pc, #132]	; (800429c <_malloc_r+0xac>)
 8004218:	680a      	ldr	r2, [r1, #0]
 800421a:	4614      	mov	r4, r2
 800421c:	b99c      	cbnz	r4, 8004246 <_malloc_r+0x56>
 800421e:	4f20      	ldr	r7, [pc, #128]	; (80042a0 <_malloc_r+0xb0>)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	b923      	cbnz	r3, 800422e <_malloc_r+0x3e>
 8004224:	4621      	mov	r1, r4
 8004226:	4630      	mov	r0, r6
 8004228:	f000 f862 	bl	80042f0 <_sbrk_r>
 800422c:	6038      	str	r0, [r7, #0]
 800422e:	4629      	mov	r1, r5
 8004230:	4630      	mov	r0, r6
 8004232:	f000 f85d 	bl	80042f0 <_sbrk_r>
 8004236:	1c43      	adds	r3, r0, #1
 8004238:	d123      	bne.n	8004282 <_malloc_r+0x92>
 800423a:	230c      	movs	r3, #12
 800423c:	4630      	mov	r0, r6
 800423e:	6033      	str	r3, [r6, #0]
 8004240:	f000 f86c 	bl	800431c <__malloc_unlock>
 8004244:	e7e3      	b.n	800420e <_malloc_r+0x1e>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	1b5b      	subs	r3, r3, r5
 800424a:	d417      	bmi.n	800427c <_malloc_r+0x8c>
 800424c:	2b0b      	cmp	r3, #11
 800424e:	d903      	bls.n	8004258 <_malloc_r+0x68>
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	441c      	add	r4, r3
 8004254:	6025      	str	r5, [r4, #0]
 8004256:	e004      	b.n	8004262 <_malloc_r+0x72>
 8004258:	6863      	ldr	r3, [r4, #4]
 800425a:	42a2      	cmp	r2, r4
 800425c:	bf0c      	ite	eq
 800425e:	600b      	streq	r3, [r1, #0]
 8004260:	6053      	strne	r3, [r2, #4]
 8004262:	4630      	mov	r0, r6
 8004264:	f000 f85a 	bl	800431c <__malloc_unlock>
 8004268:	f104 000b 	add.w	r0, r4, #11
 800426c:	1d23      	adds	r3, r4, #4
 800426e:	f020 0007 	bic.w	r0, r0, #7
 8004272:	1ac2      	subs	r2, r0, r3
 8004274:	d0cc      	beq.n	8004210 <_malloc_r+0x20>
 8004276:	1a1b      	subs	r3, r3, r0
 8004278:	50a3      	str	r3, [r4, r2]
 800427a:	e7c9      	b.n	8004210 <_malloc_r+0x20>
 800427c:	4622      	mov	r2, r4
 800427e:	6864      	ldr	r4, [r4, #4]
 8004280:	e7cc      	b.n	800421c <_malloc_r+0x2c>
 8004282:	1cc4      	adds	r4, r0, #3
 8004284:	f024 0403 	bic.w	r4, r4, #3
 8004288:	42a0      	cmp	r0, r4
 800428a:	d0e3      	beq.n	8004254 <_malloc_r+0x64>
 800428c:	1a21      	subs	r1, r4, r0
 800428e:	4630      	mov	r0, r6
 8004290:	f000 f82e 	bl	80042f0 <_sbrk_r>
 8004294:	3001      	adds	r0, #1
 8004296:	d1dd      	bne.n	8004254 <_malloc_r+0x64>
 8004298:	e7cf      	b.n	800423a <_malloc_r+0x4a>
 800429a:	bf00      	nop
 800429c:	200000f0 	.word	0x200000f0
 80042a0:	200000f4 	.word	0x200000f4

080042a4 <_realloc_r>:
 80042a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a6:	4607      	mov	r7, r0
 80042a8:	4614      	mov	r4, r2
 80042aa:	460e      	mov	r6, r1
 80042ac:	b921      	cbnz	r1, 80042b8 <_realloc_r+0x14>
 80042ae:	4611      	mov	r1, r2
 80042b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80042b4:	f7ff bf9c 	b.w	80041f0 <_malloc_r>
 80042b8:	b922      	cbnz	r2, 80042c4 <_realloc_r+0x20>
 80042ba:	f7ff ff4d 	bl	8004158 <_free_r>
 80042be:	4625      	mov	r5, r4
 80042c0:	4628      	mov	r0, r5
 80042c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042c4:	f000 f830 	bl	8004328 <_malloc_usable_size_r>
 80042c8:	42a0      	cmp	r0, r4
 80042ca:	d20f      	bcs.n	80042ec <_realloc_r+0x48>
 80042cc:	4621      	mov	r1, r4
 80042ce:	4638      	mov	r0, r7
 80042d0:	f7ff ff8e 	bl	80041f0 <_malloc_r>
 80042d4:	4605      	mov	r5, r0
 80042d6:	2800      	cmp	r0, #0
 80042d8:	d0f2      	beq.n	80042c0 <_realloc_r+0x1c>
 80042da:	4631      	mov	r1, r6
 80042dc:	4622      	mov	r2, r4
 80042de:	f7ff ff13 	bl	8004108 <memcpy>
 80042e2:	4631      	mov	r1, r6
 80042e4:	4638      	mov	r0, r7
 80042e6:	f7ff ff37 	bl	8004158 <_free_r>
 80042ea:	e7e9      	b.n	80042c0 <_realloc_r+0x1c>
 80042ec:	4635      	mov	r5, r6
 80042ee:	e7e7      	b.n	80042c0 <_realloc_r+0x1c>

080042f0 <_sbrk_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	2300      	movs	r3, #0
 80042f4:	4d05      	ldr	r5, [pc, #20]	; (800430c <_sbrk_r+0x1c>)
 80042f6:	4604      	mov	r4, r0
 80042f8:	4608      	mov	r0, r1
 80042fa:	602b      	str	r3, [r5, #0]
 80042fc:	f7fd fb52 	bl	80019a4 <_sbrk>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d102      	bne.n	800430a <_sbrk_r+0x1a>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	b103      	cbz	r3, 800430a <_sbrk_r+0x1a>
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	20000518 	.word	0x20000518

08004310 <__malloc_lock>:
 8004310:	4801      	ldr	r0, [pc, #4]	; (8004318 <__malloc_lock+0x8>)
 8004312:	f000 b811 	b.w	8004338 <__retarget_lock_acquire_recursive>
 8004316:	bf00      	nop
 8004318:	20000520 	.word	0x20000520

0800431c <__malloc_unlock>:
 800431c:	4801      	ldr	r0, [pc, #4]	; (8004324 <__malloc_unlock+0x8>)
 800431e:	f000 b80c 	b.w	800433a <__retarget_lock_release_recursive>
 8004322:	bf00      	nop
 8004324:	20000520 	.word	0x20000520

08004328 <_malloc_usable_size_r>:
 8004328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800432c:	1f18      	subs	r0, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	bfbc      	itt	lt
 8004332:	580b      	ldrlt	r3, [r1, r0]
 8004334:	18c0      	addlt	r0, r0, r3
 8004336:	4770      	bx	lr

08004338 <__retarget_lock_acquire_recursive>:
 8004338:	4770      	bx	lr

0800433a <__retarget_lock_release_recursive>:
 800433a:	4770      	bx	lr

0800433c <_init>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	bf00      	nop
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr

08004348 <_fini>:
 8004348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434a:	bf00      	nop
 800434c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434e:	bc08      	pop	{r3}
 8004350:	469e      	mov	lr, r3
 8004352:	4770      	bx	lr
