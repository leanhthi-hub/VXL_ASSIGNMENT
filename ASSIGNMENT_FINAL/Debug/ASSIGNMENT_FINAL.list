
ASSIGNMENT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004410  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f0  080045f0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080045f0  080045f0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045f0  080045f0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045f0  080045f0  000145f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045f4  080045f4  000145f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080045f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000090  08004688  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08004688  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbad  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fba  00000000  00000000  0002cc66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0002ec20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  0002f950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181ab  00000000  00000000  000305a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d598  00000000  00000000  00048753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af81  00000000  00000000  00055ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0c6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d0  00000000  00000000  000e0cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08004504 	.word	0x08004504

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08004504 	.word	0x08004504

0800014c <toogleRed>:
#define ON GPIO_PIN_SET
#define OFF GPIO_PIN_RESET



void toogleRed(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,led1a_Pin, ON);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000156:	4805      	ldr	r0, [pc, #20]	; (800016c <toogleRed+0x20>)
 8000158:	f002 f81f 	bl	800219a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led1b_Pin, OFF);
 800015c:	2200      	movs	r2, #0
 800015e:	2108      	movs	r1, #8
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <toogleRed+0x24>)
 8000162:	f002 f81a 	bl	800219a <HAL_GPIO_WritePin>
}
 8000166:	bf00      	nop
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	40010800 	.word	0x40010800
 8000170:	40010c00 	.word	0x40010c00

08000174 <toogleGreen>:
void toogleGreen(){
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,led1a_Pin, OFF);
 8000178:	2200      	movs	r2, #0
 800017a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800017e:	4805      	ldr	r0, [pc, #20]	; (8000194 <toogleGreen+0x20>)
 8000180:	f002 f80b 	bl	800219a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led1b_Pin, ON);
 8000184:	2201      	movs	r2, #1
 8000186:	2108      	movs	r1, #8
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <toogleGreen+0x24>)
 800018a:	f002 f806 	bl	800219a <HAL_GPIO_WritePin>
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40010800 	.word	0x40010800
 8000198:	40010c00 	.word	0x40010c00

0800019c <toogleYellow>:
void toogleYellow(){
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,led1a_Pin, ON);
 80001a0:	2201      	movs	r2, #1
 80001a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001a6:	4805      	ldr	r0, [pc, #20]	; (80001bc <toogleYellow+0x20>)
 80001a8:	f001 fff7 	bl	800219a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led1b_Pin, ON);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2108      	movs	r1, #8
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <toogleYellow+0x24>)
 80001b2:	f001 fff2 	bl	800219a <HAL_GPIO_WritePin>
}
 80001b6:	bf00      	nop
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	40010800 	.word	0x40010800
 80001c0:	40010c00 	.word	0x40010c00

080001c4 <toogleRed1>:
void toogleRed1(){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,led2a_Pin, ON);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2120      	movs	r1, #32
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <toogleRed1+0x1c>)
 80001ce:	f001 ffe4 	bl	800219a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led2b_Pin, OFF);
 80001d2:	2200      	movs	r2, #0
 80001d4:	2110      	movs	r1, #16
 80001d6:	4802      	ldr	r0, [pc, #8]	; (80001e0 <toogleRed1+0x1c>)
 80001d8:	f001 ffdf 	bl	800219a <HAL_GPIO_WritePin>
}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	40010c00 	.word	0x40010c00

080001e4 <toogleGreen1>:
void toogleGreen1(){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,led2a_Pin, OFF);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2120      	movs	r1, #32
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <toogleGreen1+0x1c>)
 80001ee:	f001 ffd4 	bl	800219a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led2b_Pin, ON);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2110      	movs	r1, #16
 80001f6:	4802      	ldr	r0, [pc, #8]	; (8000200 <toogleGreen1+0x1c>)
 80001f8:	f001 ffcf 	bl	800219a <HAL_GPIO_WritePin>
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	40010c00 	.word	0x40010c00

08000204 <toogleYellow1>:
void toogleYellow1(){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,led2a_Pin, ON);
 8000208:	2201      	movs	r2, #1
 800020a:	2120      	movs	r1, #32
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <toogleYellow1+0x1c>)
 800020e:	f001 ffc4 	bl	800219a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led2b_Pin, ON);
 8000212:	2201      	movs	r2, #1
 8000214:	2110      	movs	r1, #16
 8000216:	4802      	ldr	r0, [pc, #8]	; (8000220 <toogleYellow1+0x1c>)
 8000218:	f001 ffbf 	bl	800219a <HAL_GPIO_WritePin>
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	40010c00 	.word	0x40010c00

08000224 <redP>:
void redP(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ledpa_Pin, ON);
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800022e:	4805      	ldr	r0, [pc, #20]	; (8000244 <redP+0x20>)
 8000230:	f001 ffb3 	bl	800219a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ledpb_Pin, OFF);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023a:	4803      	ldr	r0, [pc, #12]	; (8000248 <redP+0x24>)
 800023c:	f001 ffad 	bl	800219a <HAL_GPIO_WritePin>
}
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40010c00 	.word	0x40010c00
 8000248:	40010800 	.word	0x40010800

0800024c <greenP>:
void greenP(){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ledpa_Pin, OFF);
 8000250:	2200      	movs	r2, #0
 8000252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000256:	4805      	ldr	r0, [pc, #20]	; (800026c <greenP+0x20>)
 8000258:	f001 ff9f 	bl	800219a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ledpb_Pin, ON);
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000262:	4803      	ldr	r0, [pc, #12]	; (8000270 <greenP+0x24>)
 8000264:	f001 ff99 	bl	800219a <HAL_GPIO_WritePin>
}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40010c00 	.word	0x40010c00
 8000270:	40010800 	.word	0x40010800

08000274 <offP>:
void offP(){
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ledpa_Pin, OFF);
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <offP+0x20>)
 8000280:	f001 ff8b 	bl	800219a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ledpb_Pin, OFF);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028a:	4803      	ldr	r0, [pc, #12]	; (8000298 <offP+0x24>)
 800028c:	f001 ff85 	bl	800219a <HAL_GPIO_WritePin>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40010c00 	.word	0x40010c00
 8000298:	40010800 	.word	0x40010800

0800029c <fsm_automatic_run1>:
void fsm_automatic_run1(){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	switch (status1	) {
 80002a0:	4b31      	ldr	r3, [pc, #196]	; (8000368 <fsm_automatic_run1+0xcc>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a31      	ldr	r2, [pc, #196]	; (800036c <fsm_automatic_run1+0xd0>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d00b      	beq.n	80002c2 <fsm_automatic_run1+0x26>
 80002aa:	4a30      	ldr	r2, [pc, #192]	; (800036c <fsm_automatic_run1+0xd0>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	dc52      	bgt.n	8000356 <fsm_automatic_run1+0xba>
 80002b0:	2b03      	cmp	r3, #3
 80002b2:	d03c      	beq.n	800032e <fsm_automatic_run1+0x92>
 80002b4:	2b03      	cmp	r3, #3
 80002b6:	dc4e      	bgt.n	8000356 <fsm_automatic_run1+0xba>
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d010      	beq.n	80002de <fsm_automatic_run1+0x42>
 80002bc:	2b02      	cmp	r3, #2
 80002be:	d022      	beq.n	8000306 <fsm_automatic_run1+0x6a>
				status1 = AUTO_RED;
				timer=RED_TIME/OneSec;
			}
			break;
		default:
			break;
 80002c0:	e049      	b.n	8000356 <fsm_automatic_run1+0xba>
			status1 = AUTO_RED;
 80002c2:	4b29      	ldr	r3, [pc, #164]	; (8000368 <fsm_automatic_run1+0xcc>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	601a      	str	r2, [r3, #0]
			timer = RED_TIME/OneSec;
 80002c8:	4b29      	ldr	r3, [pc, #164]	; (8000370 <fsm_automatic_run1+0xd4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a29      	ldr	r2, [pc, #164]	; (8000374 <fsm_automatic_run1+0xd8>)
 80002ce:	fb82 1203 	smull	r1, r2, r2, r3
 80002d2:	1152      	asrs	r2, r2, #5
 80002d4:	17db      	asrs	r3, r3, #31
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	4a27      	ldr	r2, [pc, #156]	; (8000378 <fsm_automatic_run1+0xdc>)
 80002da:	6013      	str	r3, [r2, #0]
			break;
 80002dc:	e042      	b.n	8000364 <fsm_automatic_run1+0xc8>
			toogleRed();
 80002de:	f7ff ff35 	bl	800014c <toogleRed>
			if(timer==STOP){
 80002e2:	4b25      	ldr	r3, [pc, #148]	; (8000378 <fsm_automatic_run1+0xdc>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d137      	bne.n	800035a <fsm_automatic_run1+0xbe>
				status1 = AUTO_GREEN;
 80002ea:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <fsm_automatic_run1+0xcc>)
 80002ec:	2202      	movs	r2, #2
 80002ee:	601a      	str	r2, [r3, #0]
				timer=GREEN_TIME/OneSec;
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <fsm_automatic_run1+0xe0>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a1f      	ldr	r2, [pc, #124]	; (8000374 <fsm_automatic_run1+0xd8>)
 80002f6:	fb82 1203 	smull	r1, r2, r2, r3
 80002fa:	1152      	asrs	r2, r2, #5
 80002fc:	17db      	asrs	r3, r3, #31
 80002fe:	1ad3      	subs	r3, r2, r3
 8000300:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <fsm_automatic_run1+0xdc>)
 8000302:	6013      	str	r3, [r2, #0]
			break;
 8000304:	e029      	b.n	800035a <fsm_automatic_run1+0xbe>
			toogleGreen();
 8000306:	f7ff ff35 	bl	8000174 <toogleGreen>
			if(timer==STOP){
 800030a:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <fsm_automatic_run1+0xdc>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d125      	bne.n	800035e <fsm_automatic_run1+0xc2>
				status1 = AUTO_YELLOW;
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <fsm_automatic_run1+0xcc>)
 8000314:	2203      	movs	r2, #3
 8000316:	601a      	str	r2, [r3, #0]
				timer=YELLOW_TIME/OneSec;
 8000318:	4b19      	ldr	r3, [pc, #100]	; (8000380 <fsm_automatic_run1+0xe4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a15      	ldr	r2, [pc, #84]	; (8000374 <fsm_automatic_run1+0xd8>)
 800031e:	fb82 1203 	smull	r1, r2, r2, r3
 8000322:	1152      	asrs	r2, r2, #5
 8000324:	17db      	asrs	r3, r3, #31
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	4a13      	ldr	r2, [pc, #76]	; (8000378 <fsm_automatic_run1+0xdc>)
 800032a:	6013      	str	r3, [r2, #0]
			break;
 800032c:	e017      	b.n	800035e <fsm_automatic_run1+0xc2>
			toogleYellow();
 800032e:	f7ff ff35 	bl	800019c <toogleYellow>
			if(timer==STOP){
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <fsm_automatic_run1+0xdc>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d113      	bne.n	8000362 <fsm_automatic_run1+0xc6>
				status1 = AUTO_RED;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <fsm_automatic_run1+0xcc>)
 800033c:	2201      	movs	r2, #1
 800033e:	601a      	str	r2, [r3, #0]
				timer=RED_TIME/OneSec;
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <fsm_automatic_run1+0xd4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a0b      	ldr	r2, [pc, #44]	; (8000374 <fsm_automatic_run1+0xd8>)
 8000346:	fb82 1203 	smull	r1, r2, r2, r3
 800034a:	1152      	asrs	r2, r2, #5
 800034c:	17db      	asrs	r3, r3, #31
 800034e:	1ad3      	subs	r3, r2, r3
 8000350:	4a09      	ldr	r2, [pc, #36]	; (8000378 <fsm_automatic_run1+0xdc>)
 8000352:	6013      	str	r3, [r2, #0]
			break;
 8000354:	e005      	b.n	8000362 <fsm_automatic_run1+0xc6>
			break;
 8000356:	bf00      	nop
 8000358:	e004      	b.n	8000364 <fsm_automatic_run1+0xc8>
			break;
 800035a:	bf00      	nop
 800035c:	e002      	b.n	8000364 <fsm_automatic_run1+0xc8>
			break;
 800035e:	bf00      	nop
 8000360:	e000      	b.n	8000364 <fsm_automatic_run1+0xc8>
			break;
 8000362:	bf00      	nop
	}
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000000 	.word	0x20000000
 800036c:	01605b22 	.word	0x01605b22
 8000370:	20000010 	.word	0x20000010
 8000374:	51eb851f 	.word	0x51eb851f
 8000378:	200000c8 	.word	0x200000c8
 800037c:	20000014 	.word	0x20000014
 8000380:	20000018 	.word	0x20000018

08000384 <fsm_automatic_run2>:


void fsm_automatic_run2(){
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	switch (status2	) {
 8000388:	4b31      	ldr	r3, [pc, #196]	; (8000450 <fsm_automatic_run2+0xcc>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a31      	ldr	r2, [pc, #196]	; (8000454 <fsm_automatic_run2+0xd0>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d00b      	beq.n	80003aa <fsm_automatic_run2+0x26>
 8000392:	4a30      	ldr	r2, [pc, #192]	; (8000454 <fsm_automatic_run2+0xd0>)
 8000394:	4293      	cmp	r3, r2
 8000396:	dc52      	bgt.n	800043e <fsm_automatic_run2+0xba>
 8000398:	2b03      	cmp	r3, #3
 800039a:	d03c      	beq.n	8000416 <fsm_automatic_run2+0x92>
 800039c:	2b03      	cmp	r3, #3
 800039e:	dc4e      	bgt.n	800043e <fsm_automatic_run2+0xba>
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d010      	beq.n	80003c6 <fsm_automatic_run2+0x42>
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d022      	beq.n	80003ee <fsm_automatic_run2+0x6a>
				status2 = AUTO_RED;
				timer2=RED_TIME/OneSec;
			}
			break;
		default:
			break;
 80003a8:	e049      	b.n	800043e <fsm_automatic_run2+0xba>
			status2 = AUTO_GREEN;
 80003aa:	4b29      	ldr	r3, [pc, #164]	; (8000450 <fsm_automatic_run2+0xcc>)
 80003ac:	2202      	movs	r2, #2
 80003ae:	601a      	str	r2, [r3, #0]
			timer2=GREEN_TIME/OneSec;
 80003b0:	4b29      	ldr	r3, [pc, #164]	; (8000458 <fsm_automatic_run2+0xd4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a29      	ldr	r2, [pc, #164]	; (800045c <fsm_automatic_run2+0xd8>)
 80003b6:	fb82 1203 	smull	r1, r2, r2, r3
 80003ba:	1152      	asrs	r2, r2, #5
 80003bc:	17db      	asrs	r3, r3, #31
 80003be:	1ad3      	subs	r3, r2, r3
 80003c0:	4a27      	ldr	r2, [pc, #156]	; (8000460 <fsm_automatic_run2+0xdc>)
 80003c2:	6013      	str	r3, [r2, #0]
			break;
 80003c4:	e042      	b.n	800044c <fsm_automatic_run2+0xc8>
			toogleRed1();
 80003c6:	f7ff fefd 	bl	80001c4 <toogleRed1>
			if(timer2==STOP){
 80003ca:	4b25      	ldr	r3, [pc, #148]	; (8000460 <fsm_automatic_run2+0xdc>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d137      	bne.n	8000442 <fsm_automatic_run2+0xbe>
				status2 = AUTO_GREEN;
 80003d2:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <fsm_automatic_run2+0xcc>)
 80003d4:	2202      	movs	r2, #2
 80003d6:	601a      	str	r2, [r3, #0]
				timer2=GREEN_TIME/OneSec;
 80003d8:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <fsm_automatic_run2+0xd4>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a1f      	ldr	r2, [pc, #124]	; (800045c <fsm_automatic_run2+0xd8>)
 80003de:	fb82 1203 	smull	r1, r2, r2, r3
 80003e2:	1152      	asrs	r2, r2, #5
 80003e4:	17db      	asrs	r3, r3, #31
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	4a1d      	ldr	r2, [pc, #116]	; (8000460 <fsm_automatic_run2+0xdc>)
 80003ea:	6013      	str	r3, [r2, #0]
			break;
 80003ec:	e029      	b.n	8000442 <fsm_automatic_run2+0xbe>
			toogleGreen1();
 80003ee:	f7ff fef9 	bl	80001e4 <toogleGreen1>
			if(timer2==STOP){
 80003f2:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <fsm_automatic_run2+0xdc>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d125      	bne.n	8000446 <fsm_automatic_run2+0xc2>
				status2 = AUTO_YELLOW;
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <fsm_automatic_run2+0xcc>)
 80003fc:	2203      	movs	r2, #3
 80003fe:	601a      	str	r2, [r3, #0]
				timer2=YELLOW_TIME/OneSec;
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <fsm_automatic_run2+0xe0>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a15      	ldr	r2, [pc, #84]	; (800045c <fsm_automatic_run2+0xd8>)
 8000406:	fb82 1203 	smull	r1, r2, r2, r3
 800040a:	1152      	asrs	r2, r2, #5
 800040c:	17db      	asrs	r3, r3, #31
 800040e:	1ad3      	subs	r3, r2, r3
 8000410:	4a13      	ldr	r2, [pc, #76]	; (8000460 <fsm_automatic_run2+0xdc>)
 8000412:	6013      	str	r3, [r2, #0]
			break;
 8000414:	e017      	b.n	8000446 <fsm_automatic_run2+0xc2>
			toogleYellow1();
 8000416:	f7ff fef5 	bl	8000204 <toogleYellow1>
			if(timer2==STOP){
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <fsm_automatic_run2+0xdc>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d113      	bne.n	800044a <fsm_automatic_run2+0xc6>
				status2 = AUTO_RED;
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <fsm_automatic_run2+0xcc>)
 8000424:	2201      	movs	r2, #1
 8000426:	601a      	str	r2, [r3, #0]
				timer2=RED_TIME/OneSec;
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <fsm_automatic_run2+0xe4>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a0b      	ldr	r2, [pc, #44]	; (800045c <fsm_automatic_run2+0xd8>)
 800042e:	fb82 1203 	smull	r1, r2, r2, r3
 8000432:	1152      	asrs	r2, r2, #5
 8000434:	17db      	asrs	r3, r3, #31
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	4a09      	ldr	r2, [pc, #36]	; (8000460 <fsm_automatic_run2+0xdc>)
 800043a:	6013      	str	r3, [r2, #0]
			break;
 800043c:	e005      	b.n	800044a <fsm_automatic_run2+0xc6>
			break;
 800043e:	bf00      	nop
 8000440:	e004      	b.n	800044c <fsm_automatic_run2+0xc8>
			break;
 8000442:	bf00      	nop
 8000444:	e002      	b.n	800044c <fsm_automatic_run2+0xc8>
			break;
 8000446:	bf00      	nop
 8000448:	e000      	b.n	800044c <fsm_automatic_run2+0xc8>
			break;
 800044a:	bf00      	nop
	}
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000004 	.word	0x20000004
 8000454:	01605b22 	.word	0x01605b22
 8000458:	20000014 	.word	0x20000014
 800045c:	51eb851f 	.word	0x51eb851f
 8000460:	200000cc 	.word	0x200000cc
 8000464:	20000018 	.word	0x20000018
 8000468:	20000010 	.word	0x20000010

0800046c <fsm_p>:
void fsm_p(){
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	switch (status4) {
 8000470:	4b2a      	ldr	r3, [pc, #168]	; (800051c <fsm_p+0xb0>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a2a      	ldr	r2, [pc, #168]	; (8000520 <fsm_p+0xb4>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d00b      	beq.n	8000492 <fsm_p+0x26>
 800047a:	4a29      	ldr	r2, [pc, #164]	; (8000520 <fsm_p+0xb4>)
 800047c:	4293      	cmp	r3, r2
 800047e:	dc43      	bgt.n	8000508 <fsm_p+0x9c>
 8000480:	2b63      	cmp	r3, #99	; 0x63
 8000482:	d043      	beq.n	800050c <fsm_p+0xa0>
 8000484:	2b63      	cmp	r3, #99	; 0x63
 8000486:	dc3f      	bgt.n	8000508 <fsm_p+0x9c>
 8000488:	2b1f      	cmp	r3, #31
 800048a:	d00d      	beq.n	80004a8 <fsm_p+0x3c>
 800048c:	2b20      	cmp	r3, #32
 800048e:	d025      	beq.n	80004dc <fsm_p+0x70>
			if(timer3==STOP){
				status4=INIT;
			}
			break;
		default:
			break;
 8000490:	e03a      	b.n	8000508 <fsm_p+0x9c>
			status4=Waiting;
 8000492:	4b22      	ldr	r3, [pc, #136]	; (800051c <fsm_p+0xb0>)
 8000494:	2263      	movs	r2, #99	; 0x63
 8000496:	601a      	str	r2, [r3, #0]
			timer3 = 0;
 8000498:	4b22      	ldr	r3, [pc, #136]	; (8000524 <fsm_p+0xb8>)
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
			offP();
 800049e:	f7ff fee9 	bl	8000274 <offP>
			off_Speaker();
 80004a2:	f000 fd5f 	bl	8000f64 <off_Speaker>
			break;
 80004a6:	e036      	b.n	8000516 <fsm_p+0xaa>
			redP();
 80004a8:	f7ff febc 	bl	8000224 <redP>
			if(timer3==STOP){
 80004ac:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <fsm_p+0xb8>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d12d      	bne.n	8000510 <fsm_p+0xa4>
				status4=P_GREEN;
 80004b4:	4b19      	ldr	r3, [pc, #100]	; (800051c <fsm_p+0xb0>)
 80004b6:	2220      	movs	r2, #32
 80004b8:	601a      	str	r2, [r3, #0]
				timer3 = RED_TIME/OneSec-1;
 80004ba:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <fsm_p+0xbc>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a1b      	ldr	r2, [pc, #108]	; (800052c <fsm_p+0xc0>)
 80004c0:	fb82 1203 	smull	r1, r2, r2, r3
 80004c4:	1152      	asrs	r2, r2, #5
 80004c6:	17db      	asrs	r3, r3, #31
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	3b01      	subs	r3, #1
 80004cc:	4a15      	ldr	r2, [pc, #84]	; (8000524 <fsm_p+0xb8>)
 80004ce:	6013      	str	r3, [r2, #0]
				offP();
 80004d0:	f7ff fed0 	bl	8000274 <offP>
				setTimer3 (1);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f001 fae7 	bl	8001aa8 <setTimer3>
			break;
 80004da:	e019      	b.n	8000510 <fsm_p+0xa4>
			greenP();
 80004dc:	f7ff feb6 	bl	800024c <greenP>
			if( timer3_flag == 1) {
 80004e0:	4b13      	ldr	r3, [pc, #76]	; (8000530 <fsm_p+0xc4>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d107      	bne.n	80004f8 <fsm_p+0x8c>
				toogle_Speaker();
 80004e8:	f000 fd4e 	bl	8000f88 <toogle_Speaker>
				setTimer3 (timer3*4) ;
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <fsm_p+0xb8>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 fad8 	bl	8001aa8 <setTimer3>
			if(timer3==STOP){
 80004f8:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <fsm_p+0xb8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d109      	bne.n	8000514 <fsm_p+0xa8>
				status4=INIT;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <fsm_p+0xb0>)
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <fsm_p+0xb4>)
 8000504:	601a      	str	r2, [r3, #0]
			break;
 8000506:	e005      	b.n	8000514 <fsm_p+0xa8>
			break;
 8000508:	bf00      	nop
 800050a:	e004      	b.n	8000516 <fsm_p+0xaa>
			break;
 800050c:	bf00      	nop
 800050e:	e002      	b.n	8000516 <fsm_p+0xaa>
			break;
 8000510:	bf00      	nop
 8000512:	e000      	b.n	8000516 <fsm_p+0xaa>
			break;
 8000514:	bf00      	nop
	}
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000008 	.word	0x20000008
 8000520:	01605b22 	.word	0x01605b22
 8000524:	200000d0 	.word	0x200000d0
 8000528:	20000010 	.word	0x20000010
 800052c:	51eb851f 	.word	0x51eb851f
 8000530:	200000e4 	.word	0x200000e4

08000534 <fsm_automatic_run3>:
void fsm_automatic_run3(){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	switch (status3	) {
 8000538:	4b90      	ldr	r3, [pc, #576]	; (800077c <fsm_automatic_run3+0x248>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a90      	ldr	r2, [pc, #576]	; (8000780 <fsm_automatic_run3+0x24c>)
 800053e:	4293      	cmp	r3, r2
 8000540:	f000 8102 	beq.w	8000748 <fsm_automatic_run3+0x214>
 8000544:	4a8e      	ldr	r2, [pc, #568]	; (8000780 <fsm_automatic_run3+0x24c>)
 8000546:	4293      	cmp	r3, r2
 8000548:	f300 8380 	bgt.w	8000c4c <fsm_automatic_run3+0x718>
 800054c:	2b17      	cmp	r3, #23
 800054e:	dc23      	bgt.n	8000598 <fsm_automatic_run3+0x64>
 8000550:	2b0b      	cmp	r3, #11
 8000552:	f2c0 837b 	blt.w	8000c4c <fsm_automatic_run3+0x718>
 8000556:	3b0b      	subs	r3, #11
 8000558:	2b0c      	cmp	r3, #12
 800055a:	f200 8377 	bhi.w	8000c4c <fsm_automatic_run3+0x718>
 800055e:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <fsm_automatic_run3+0x30>)
 8000560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000564:	080007b5 	.word	0x080007b5
 8000568:	08000899 	.word	0x08000899
 800056c:	0800097d 	.word	0x0800097d
 8000570:	08000c4d 	.word	0x08000c4d
 8000574:	08000c4d 	.word	0x08000c4d
 8000578:	08000c4d 	.word	0x08000c4d
 800057c:	08000c4d 	.word	0x08000c4d
 8000580:	08000c4d 	.word	0x08000c4d
 8000584:	08000c4d 	.word	0x08000c4d
 8000588:	08000c4d 	.word	0x08000c4d
 800058c:	08000a6d 	.word	0x08000a6d
 8000590:	08000b0d 	.word	0x08000b0d
 8000594:	08000bad 	.word	0x08000bad
 8000598:	2b64      	cmp	r3, #100	; 0x64
 800059a:	f040 8357 	bne.w	8000c4c <fsm_automatic_run3+0x718>
		case RUNNING://AUTOMATIC MODE MAIN FSM
			if( timer0_flag == 1) {
 800059e:	4b79      	ldr	r3, [pc, #484]	; (8000784 <fsm_automatic_run3+0x250>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d12d      	bne.n	8000602 <fsm_automatic_run3+0xce>
				Print_Time1(timer);//TIMER FOR LED 1
 80005a6:	4b78      	ldr	r3, [pc, #480]	; (8000788 <fsm_automatic_run3+0x254>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fc9e 	bl	8000eec <Print_Time1>
				Print_Time2(timer2);//TIMER FOR LED 2
 80005b0:	4b76      	ldr	r3, [pc, #472]	; (800078c <fsm_automatic_run3+0x258>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fcb7 	bl	8000f28 <Print_Time2>
				timer--;//IF timer == 0 fsm1 will change status and set timer again
 80005ba:	4b73      	ldr	r3, [pc, #460]	; (8000788 <fsm_automatic_run3+0x254>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	4a71      	ldr	r2, [pc, #452]	; (8000788 <fsm_automatic_run3+0x254>)
 80005c2:	6013      	str	r3, [r2, #0]
				timer2--;// timer for fsm2 work like timer
 80005c4:	4b71      	ldr	r3, [pc, #452]	; (800078c <fsm_automatic_run3+0x258>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	4a70      	ldr	r2, [pc, #448]	; (800078c <fsm_automatic_run3+0x258>)
 80005cc:	6013      	str	r3, [r2, #0]
				if(status4==P_RED||status4==P_GREEN){//when P_mode is enable it will cout down timer for P_mode
 80005ce:	4b70      	ldr	r3, [pc, #448]	; (8000790 <fsm_automatic_run3+0x25c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b1f      	cmp	r3, #31
 80005d4:	d003      	beq.n	80005de <fsm_automatic_run3+0xaa>
 80005d6:	4b6e      	ldr	r3, [pc, #440]	; (8000790 <fsm_automatic_run3+0x25c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b20      	cmp	r3, #32
 80005dc:	d10e      	bne.n	80005fc <fsm_automatic_run3+0xc8>
					Print_Mode(status4);
 80005de:	4b6c      	ldr	r3, [pc, #432]	; (8000790 <fsm_automatic_run3+0x25c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fc46 	bl	8000e74 <Print_Mode>
					Print_TimeOut(timer3);
 80005e8:	4b6a      	ldr	r3, [pc, #424]	; (8000794 <fsm_automatic_run3+0x260>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fc23 	bl	8000e38 <Print_TimeOut>
					timer3--;//if timer == 0 P_mode will change status form red to green and set timer again or disable P_mode
 80005f2:	4b68      	ldr	r3, [pc, #416]	; (8000794 <fsm_automatic_run3+0x260>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	4a66      	ldr	r2, [pc, #408]	; (8000794 <fsm_automatic_run3+0x260>)
 80005fa:	6013      	str	r3, [r2, #0]
				}
				setTimer0 (OneSec);
 80005fc:	2064      	movs	r0, #100	; 0x64
 80005fe:	f001 fa3f 	bl	8001a80 <setTimer0>
				}
			if(button_flag[0]==1){// button 1 turn MAIN FSM to manual mode to adjust time for AUTOMATIC
 8000602:	4b65      	ldr	r3, [pc, #404]	; (8000798 <fsm_automatic_run3+0x264>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d128      	bne.n	800065c <fsm_automatic_run3+0x128>
								//It will turn FSM1 FSM2 to waiting
								//when change status it will use timer for MODE. timer2 for time of this mode
								//it will enable timer 3 for timeOut
				button_flag[0]=0;
 800060a:	4b63      	ldr	r3, [pc, #396]	; (8000798 <fsm_automatic_run3+0x264>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
				status1=Waiting;
 8000610:	4b62      	ldr	r3, [pc, #392]	; (800079c <fsm_automatic_run3+0x268>)
 8000612:	2263      	movs	r2, #99	; 0x63
 8000614:	601a      	str	r2, [r3, #0]
				status2=Waiting;
 8000616:	4b62      	ldr	r3, [pc, #392]	; (80007a0 <fsm_automatic_run3+0x26c>)
 8000618:	2263      	movs	r2, #99	; 0x63
 800061a:	601a      	str	r2, [r3, #0]
				status4=Waiting;
 800061c:	4b5c      	ldr	r3, [pc, #368]	; (8000790 <fsm_automatic_run3+0x25c>)
 800061e:	2263      	movs	r2, #99	; 0x63
 8000620:	601a      	str	r2, [r3, #0]
				status3=MAN_RED;
 8000622:	4b56      	ldr	r3, [pc, #344]	; (800077c <fsm_automatic_run3+0x248>)
 8000624:	220b      	movs	r2, #11
 8000626:	601a      	str	r2, [r3, #0]
				setTimer0(OneSec);
 8000628:	2064      	movs	r0, #100	; 0x64
 800062a:	f001 fa29 	bl	8001a80 <setTimer0>
				timer = MAN_RED;
 800062e:	4b56      	ldr	r3, [pc, #344]	; (8000788 <fsm_automatic_run3+0x254>)
 8000630:	220b      	movs	r2, #11
 8000632:	601a      	str	r2, [r3, #0]
				timer2=RED_TIME/OneSec;
 8000634:	4b5b      	ldr	r3, [pc, #364]	; (80007a4 <fsm_automatic_run3+0x270>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a5b      	ldr	r2, [pc, #364]	; (80007a8 <fsm_automatic_run3+0x274>)
 800063a:	fb82 1203 	smull	r1, r2, r2, r3
 800063e:	1152      	asrs	r2, r2, #5
 8000640:	17db      	asrs	r3, r3, #31
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	4a51      	ldr	r2, [pc, #324]	; (800078c <fsm_automatic_run3+0x258>)
 8000646:	6013      	str	r3, [r2, #0]
				timer3= TIME_OUT/OneSec;
 8000648:	4b58      	ldr	r3, [pc, #352]	; (80007ac <fsm_automatic_run3+0x278>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a56      	ldr	r2, [pc, #344]	; (80007a8 <fsm_automatic_run3+0x274>)
 800064e:	fb82 1203 	smull	r1, r2, r2, r3
 8000652:	1152      	asrs	r2, r2, #5
 8000654:	17db      	asrs	r3, r3, #31
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	4a4e      	ldr	r2, [pc, #312]	; (8000794 <fsm_automatic_run3+0x260>)
 800065a:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[1]==1)//button 2 turn MAIN FSM to HAND mode to turn led by RED_GREEN_YELLOW
 800065c:	4b4e      	ldr	r3, [pc, #312]	; (8000798 <fsm_automatic_run3+0x264>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d132      	bne.n	80006ca <fsm_automatic_run3+0x196>
								//FSM will use timer for timeOut
			{
				button_flag[1] = 0;
 8000664:	4b4c      	ldr	r3, [pc, #304]	; (8000798 <fsm_automatic_run3+0x264>)
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
				Print_HELLO();
 800066a:	f000 fbcd 	bl	8000e08 <Print_HELLO>
				switch (status1) {
 800066e:	4b4b      	ldr	r3, [pc, #300]	; (800079c <fsm_automatic_run3+0x268>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b03      	cmp	r3, #3
 8000674:	d00a      	beq.n	800068c <fsm_automatic_run3+0x158>
 8000676:	2b03      	cmp	r3, #3
 8000678:	dc10      	bgt.n	800069c <fsm_automatic_run3+0x168>
 800067a:	2b01      	cmp	r3, #1
 800067c:	d002      	beq.n	8000684 <fsm_automatic_run3+0x150>
 800067e:	2b02      	cmp	r3, #2
 8000680:	d008      	beq.n	8000694 <fsm_automatic_run3+0x160>
						break;
					case AUTO_GREEN:
						status3 = HAND_YELLOW;
						break;
					default:
						break;
 8000682:	e00b      	b.n	800069c <fsm_automatic_run3+0x168>
						status3 = HAND_GREEN;
 8000684:	4b3d      	ldr	r3, [pc, #244]	; (800077c <fsm_automatic_run3+0x248>)
 8000686:	2216      	movs	r2, #22
 8000688:	601a      	str	r2, [r3, #0]
						break;
 800068a:	e008      	b.n	800069e <fsm_automatic_run3+0x16a>
						status3 = HAND_RED;
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <fsm_automatic_run3+0x248>)
 800068e:	2215      	movs	r2, #21
 8000690:	601a      	str	r2, [r3, #0]
						break;
 8000692:	e004      	b.n	800069e <fsm_automatic_run3+0x16a>
						status3 = HAND_YELLOW;
 8000694:	4b39      	ldr	r3, [pc, #228]	; (800077c <fsm_automatic_run3+0x248>)
 8000696:	2217      	movs	r2, #23
 8000698:	601a      	str	r2, [r3, #0]
						break;
 800069a:	e000      	b.n	800069e <fsm_automatic_run3+0x16a>
						break;
 800069c:	bf00      	nop
				}
				setTimer0 (OneSec);
 800069e:	2064      	movs	r0, #100	; 0x64
 80006a0:	f001 f9ee 	bl	8001a80 <setTimer0>
				timer=TIME_OUT/OneSec;
 80006a4:	4b41      	ldr	r3, [pc, #260]	; (80007ac <fsm_automatic_run3+0x278>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a3f      	ldr	r2, [pc, #252]	; (80007a8 <fsm_automatic_run3+0x274>)
 80006aa:	fb82 1203 	smull	r1, r2, r2, r3
 80006ae:	1152      	asrs	r2, r2, #5
 80006b0:	17db      	asrs	r3, r3, #31
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <fsm_automatic_run3+0x254>)
 80006b6:	6013      	str	r3, [r2, #0]
				status1 = Waiting;
 80006b8:	4b38      	ldr	r3, [pc, #224]	; (800079c <fsm_automatic_run3+0x268>)
 80006ba:	2263      	movs	r2, #99	; 0x63
 80006bc:	601a      	str	r2, [r3, #0]
				status2 = Waiting;
 80006be:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <fsm_automatic_run3+0x26c>)
 80006c0:	2263      	movs	r2, #99	; 0x63
 80006c2:	601a      	str	r2, [r3, #0]
				status4 = Waiting;
 80006c4:	4b32      	ldr	r3, [pc, #200]	; (8000790 <fsm_automatic_run3+0x25c>)
 80006c6:	2263      	movs	r2, #99	; 0x63
 80006c8:	601a      	str	r2, [r3, #0]
			}
			if(button_flag[3]==1){//button 3 enable P_MOde
 80006ca:	4b33      	ldr	r3, [pc, #204]	; (8000798 <fsm_automatic_run3+0x264>)
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	f040 82be 	bne.w	8000c50 <fsm_automatic_run3+0x71c>
				button_flag[3]=0;
 80006d4:	4b30      	ldr	r3, [pc, #192]	; (8000798 <fsm_automatic_run3+0x264>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
				if(status1== AUTO_RED){
 80006da:	4b30      	ldr	r3, [pc, #192]	; (800079c <fsm_automatic_run3+0x268>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d109      	bne.n	80006f6 <fsm_automatic_run3+0x1c2>
					status4=P_GREEN;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <fsm_automatic_run3+0x25c>)
 80006e4:	2220      	movs	r2, #32
 80006e6:	601a      	str	r2, [r3, #0]
					setTimer3(OneSec);
 80006e8:	2064      	movs	r0, #100	; 0x64
 80006ea:	f001 f9dd 	bl	8001aa8 <setTimer3>
					timer3=timer;
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <fsm_automatic_run3+0x254>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a28      	ldr	r2, [pc, #160]	; (8000794 <fsm_automatic_run3+0x260>)
 80006f4:	6013      	str	r3, [r2, #0]
				}
				if(status1== AUTO_GREEN){
 80006f6:	4b29      	ldr	r3, [pc, #164]	; (800079c <fsm_automatic_run3+0x268>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d112      	bne.n	8000724 <fsm_automatic_run3+0x1f0>
					status4=P_RED;
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <fsm_automatic_run3+0x25c>)
 8000700:	221f      	movs	r2, #31
 8000702:	601a      	str	r2, [r3, #0]
					setTimer3(OneSec);
 8000704:	2064      	movs	r0, #100	; 0x64
 8000706:	f001 f9cf 	bl	8001aa8 <setTimer3>
					timer3=timer+YELLOW_TIME/OneSec;
 800070a:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <fsm_automatic_run3+0x27c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a26      	ldr	r2, [pc, #152]	; (80007a8 <fsm_automatic_run3+0x274>)
 8000710:	fb82 1203 	smull	r1, r2, r2, r3
 8000714:	1152      	asrs	r2, r2, #5
 8000716:	17db      	asrs	r3, r3, #31
 8000718:	1ad2      	subs	r2, r2, r3
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <fsm_automatic_run3+0x254>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4413      	add	r3, r2
 8000720:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <fsm_automatic_run3+0x260>)
 8000722:	6013      	str	r3, [r2, #0]
				}
				if(status1== AUTO_YELLOW){
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <fsm_automatic_run3+0x268>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b03      	cmp	r3, #3
 800072a:	f040 8291 	bne.w	8000c50 <fsm_automatic_run3+0x71c>
					status4=P_RED;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <fsm_automatic_run3+0x25c>)
 8000730:	221f      	movs	r2, #31
 8000732:	601a      	str	r2, [r3, #0]
					offP();
 8000734:	f7ff fd9e 	bl	8000274 <offP>
					setTimer3(OneSec);
 8000738:	2064      	movs	r0, #100	; 0x64
 800073a:	f001 f9b5 	bl	8001aa8 <setTimer3>
					timer3=timer;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <fsm_automatic_run3+0x254>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <fsm_automatic_run3+0x260>)
 8000744:	6013      	str	r3, [r2, #0]
				}
			}
			break;
 8000746:	e283      	b.n	8000c50 <fsm_automatic_run3+0x71c>
		case INIT:
			Print_Mode(INIT);
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <fsm_automatic_run3+0x24c>)
 800074a:	f000 fb93 	bl	8000e74 <Print_Mode>
			offP();
 800074e:	f7ff fd91 	bl	8000274 <offP>
			Print_ERROR();// check if RED_TIME == GREEN_TIME + YELLOW_TIME
 8000752:	f000 fc3b 	bl	8000fcc <Print_ERROR>
			timer3=0;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <fsm_automatic_run3+0x260>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
			setTimer0(OneSec);
 800075c:	2064      	movs	r0, #100	; 0x64
 800075e:	f001 f98f 	bl	8001a80 <setTimer0>
			status1=INIT;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <fsm_automatic_run3+0x268>)
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <fsm_automatic_run3+0x24c>)
 8000766:	601a      	str	r2, [r3, #0]
			status2=INIT;
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <fsm_automatic_run3+0x26c>)
 800076a:	4a05      	ldr	r2, [pc, #20]	; (8000780 <fsm_automatic_run3+0x24c>)
 800076c:	601a      	str	r2, [r3, #0]
			status4=INIT;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <fsm_automatic_run3+0x25c>)
 8000770:	4a03      	ldr	r2, [pc, #12]	; (8000780 <fsm_automatic_run3+0x24c>)
 8000772:	601a      	str	r2, [r3, #0]
			status3=RUNNING;
 8000774:	4b01      	ldr	r3, [pc, #4]	; (800077c <fsm_automatic_run3+0x248>)
 8000776:	2264      	movs	r2, #100	; 0x64
 8000778:	601a      	str	r2, [r3, #0]
			break;
 800077a:	e270      	b.n	8000c5e <fsm_automatic_run3+0x72a>
 800077c:	2000000c 	.word	0x2000000c
 8000780:	01605b22 	.word	0x01605b22
 8000784:	200000dc 	.word	0x200000dc
 8000788:	200000c8 	.word	0x200000c8
 800078c:	200000cc 	.word	0x200000cc
 8000790:	20000008 	.word	0x20000008
 8000794:	200000d0 	.word	0x200000d0
 8000798:	200000f4 	.word	0x200000f4
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000004 	.word	0x20000004
 80007a4:	20000010 	.word	0x20000010
 80007a8:	51eb851f 	.word	0x51eb851f
 80007ac:	2000001c 	.word	0x2000001c
 80007b0:	20000018 	.word	0x20000018
		case MAN_RED:
			toogleRed();
 80007b4:	f7ff fcca 	bl	800014c <toogleRed>
			toogleRed1();
 80007b8:	f7ff fd04 	bl	80001c4 <toogleRed1>
			if( timer0_flag == 1) {
 80007bc:	4b9f      	ldr	r3, [pc, #636]	; (8000a3c <fsm_automatic_run3+0x508>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d116      	bne.n	80007f2 <fsm_automatic_run3+0x2be>
				Print_Mode(timer);
 80007c4:	4b9e      	ldr	r3, [pc, #632]	; (8000a40 <fsm_automatic_run3+0x50c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fb53 	bl	8000e74 <Print_Mode>
				Print_Time(timer2);
 80007ce:	4b9d      	ldr	r3, [pc, #628]	; (8000a44 <fsm_automatic_run3+0x510>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fb6c 	bl	8000eb0 <Print_Time>
				Print_TimeOut(timer3);
 80007d8:	4b9b      	ldr	r3, [pc, #620]	; (8000a48 <fsm_automatic_run3+0x514>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fb2b 	bl	8000e38 <Print_TimeOut>
				timer3--;
 80007e2:	4b99      	ldr	r3, [pc, #612]	; (8000a48 <fsm_automatic_run3+0x514>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	4a97      	ldr	r2, [pc, #604]	; (8000a48 <fsm_automatic_run3+0x514>)
 80007ea:	6013      	str	r3, [r2, #0]
				setTimer0 (OneSec) ;
 80007ec:	2064      	movs	r0, #100	; 0x64
 80007ee:	f001 f947 	bl	8001a80 <setTimer0>
				}
			if(timer2>99)timer2=0;
 80007f2:	4b94      	ldr	r3, [pc, #592]	; (8000a44 <fsm_automatic_run3+0x510>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b63      	cmp	r3, #99	; 0x63
 80007f8:	dd02      	ble.n	8000800 <fsm_automatic_run3+0x2cc>
 80007fa:	4b92      	ldr	r3, [pc, #584]	; (8000a44 <fsm_automatic_run3+0x510>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
			RED_TIME=timer2*100;
 8000800:	4b90      	ldr	r3, [pc, #576]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2264      	movs	r2, #100	; 0x64
 8000806:	fb02 f303 	mul.w	r3, r2, r3
 800080a:	4a90      	ldr	r2, [pc, #576]	; (8000a4c <fsm_automatic_run3+0x518>)
 800080c:	6013      	str	r3, [r2, #0]
			if(button_flag[0]==1){
 800080e:	4b90      	ldr	r3, [pc, #576]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d11f      	bne.n	8000856 <fsm_automatic_run3+0x322>
				button_flag[0]=0;
 8000816:	4b8e      	ldr	r3, [pc, #568]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
				timer2=GREEN_TIME/OneSec;
 800081c:	4b8d      	ldr	r3, [pc, #564]	; (8000a54 <fsm_automatic_run3+0x520>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a8d      	ldr	r2, [pc, #564]	; (8000a58 <fsm_automatic_run3+0x524>)
 8000822:	fb82 1203 	smull	r1, r2, r2, r3
 8000826:	1152      	asrs	r2, r2, #5
 8000828:	17db      	asrs	r3, r3, #31
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	4a85      	ldr	r2, [pc, #532]	; (8000a44 <fsm_automatic_run3+0x510>)
 800082e:	6013      	str	r3, [r2, #0]
				timer = MAN_GREEN;
 8000830:	4b83      	ldr	r3, [pc, #524]	; (8000a40 <fsm_automatic_run3+0x50c>)
 8000832:	220c      	movs	r2, #12
 8000834:	601a      	str	r2, [r3, #0]
				status3=MAN_GREEN;
 8000836:	4b89      	ldr	r3, [pc, #548]	; (8000a5c <fsm_automatic_run3+0x528>)
 8000838:	220c      	movs	r2, #12
 800083a:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 800083c:	2064      	movs	r0, #100	; 0x64
 800083e:	f001 f91f 	bl	8001a80 <setTimer0>
				timer3= TIME_OUT/OneSec;
 8000842:	4b87      	ldr	r3, [pc, #540]	; (8000a60 <fsm_automatic_run3+0x52c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a84      	ldr	r2, [pc, #528]	; (8000a58 <fsm_automatic_run3+0x524>)
 8000848:	fb82 1203 	smull	r1, r2, r2, r3
 800084c:	1152      	asrs	r2, r2, #5
 800084e:	17db      	asrs	r3, r3, #31
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	4a7d      	ldr	r2, [pc, #500]	; (8000a48 <fsm_automatic_run3+0x514>)
 8000854:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[1]==1){
 8000856:	4b7e      	ldr	r3, [pc, #504]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d107      	bne.n	800086e <fsm_automatic_run3+0x33a>
				button_flag[1]=0;
 800085e:	4b7c      	ldr	r3, [pc, #496]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
				timer2++;
 8000864:	4b77      	ldr	r3, [pc, #476]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	4a76      	ldr	r2, [pc, #472]	; (8000a44 <fsm_automatic_run3+0x510>)
 800086c:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 800086e:	4b78      	ldr	r3, [pc, #480]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d107      	bne.n	8000886 <fsm_automatic_run3+0x352>
				button_flag[2]=0;
 8000876:	4b76      	ldr	r3, [pc, #472]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
				timer2--;
 800087c:	4b71      	ldr	r3, [pc, #452]	; (8000a44 <fsm_automatic_run3+0x510>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3b01      	subs	r3, #1
 8000882:	4a70      	ldr	r2, [pc, #448]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000884:	6013      	str	r3, [r2, #0]
			}
			if(timer3==STOP){
 8000886:	4b70      	ldr	r3, [pc, #448]	; (8000a48 <fsm_automatic_run3+0x514>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	f040 81e2 	bne.w	8000c54 <fsm_automatic_run3+0x720>
				status3=INIT;
 8000890:	4b72      	ldr	r3, [pc, #456]	; (8000a5c <fsm_automatic_run3+0x528>)
 8000892:	4a74      	ldr	r2, [pc, #464]	; (8000a64 <fsm_automatic_run3+0x530>)
 8000894:	601a      	str	r2, [r3, #0]
			}
			break;
 8000896:	e1dd      	b.n	8000c54 <fsm_automatic_run3+0x720>
		case MAN_GREEN:
			if( timer0_flag == 1) {
 8000898:	4b68      	ldr	r3, [pc, #416]	; (8000a3c <fsm_automatic_run3+0x508>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d116      	bne.n	80008ce <fsm_automatic_run3+0x39a>
				Print_Mode(timer);
 80008a0:	4b67      	ldr	r3, [pc, #412]	; (8000a40 <fsm_automatic_run3+0x50c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fae5 	bl	8000e74 <Print_Mode>
				Print_Time(timer2);
 80008aa:	4b66      	ldr	r3, [pc, #408]	; (8000a44 <fsm_automatic_run3+0x510>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fafe 	bl	8000eb0 <Print_Time>
				Print_TimeOut(timer3);
 80008b4:	4b64      	ldr	r3, [pc, #400]	; (8000a48 <fsm_automatic_run3+0x514>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fabd 	bl	8000e38 <Print_TimeOut>
				timer3--;
 80008be:	4b62      	ldr	r3, [pc, #392]	; (8000a48 <fsm_automatic_run3+0x514>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	4a60      	ldr	r2, [pc, #384]	; (8000a48 <fsm_automatic_run3+0x514>)
 80008c6:	6013      	str	r3, [r2, #0]
				setTimer0 (OneSec) ;
 80008c8:	2064      	movs	r0, #100	; 0x64
 80008ca:	f001 f8d9 	bl	8001a80 <setTimer0>
				}
			toogleGreen();
 80008ce:	f7ff fc51 	bl	8000174 <toogleGreen>
			toogleGreen1();
 80008d2:	f7ff fc87 	bl	80001e4 <toogleGreen1>
			if(timer2>99)timer2=0;
 80008d6:	4b5b      	ldr	r3, [pc, #364]	; (8000a44 <fsm_automatic_run3+0x510>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b63      	cmp	r3, #99	; 0x63
 80008dc:	dd02      	ble.n	80008e4 <fsm_automatic_run3+0x3b0>
 80008de:	4b59      	ldr	r3, [pc, #356]	; (8000a44 <fsm_automatic_run3+0x510>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
			GREEN_TIME=timer2*100;
 80008e4:	4b57      	ldr	r3, [pc, #348]	; (8000a44 <fsm_automatic_run3+0x510>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2264      	movs	r2, #100	; 0x64
 80008ea:	fb02 f303 	mul.w	r3, r2, r3
 80008ee:	4a59      	ldr	r2, [pc, #356]	; (8000a54 <fsm_automatic_run3+0x520>)
 80008f0:	6013      	str	r3, [r2, #0]
			if(button_flag[0]==1){
 80008f2:	4b57      	ldr	r3, [pc, #348]	; (8000a50 <fsm_automatic_run3+0x51c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d11f      	bne.n	800093a <fsm_automatic_run3+0x406>
				button_flag[0]=0;
 80008fa:	4b55      	ldr	r3, [pc, #340]	; (8000a50 <fsm_automatic_run3+0x51c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
				timer2=YELLOW_TIME/OneSec;
 8000900:	4b59      	ldr	r3, [pc, #356]	; (8000a68 <fsm_automatic_run3+0x534>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a54      	ldr	r2, [pc, #336]	; (8000a58 <fsm_automatic_run3+0x524>)
 8000906:	fb82 1203 	smull	r1, r2, r2, r3
 800090a:	1152      	asrs	r2, r2, #5
 800090c:	17db      	asrs	r3, r3, #31
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	4a4c      	ldr	r2, [pc, #304]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000912:	6013      	str	r3, [r2, #0]
				status3=MAN_YELLOW;
 8000914:	4b51      	ldr	r3, [pc, #324]	; (8000a5c <fsm_automatic_run3+0x528>)
 8000916:	220d      	movs	r2, #13
 8000918:	601a      	str	r2, [r3, #0]
				timer = MAN_YELLOW;
 800091a:	4b49      	ldr	r3, [pc, #292]	; (8000a40 <fsm_automatic_run3+0x50c>)
 800091c:	220d      	movs	r2, #13
 800091e:	601a      	str	r2, [r3, #0]
				setTimer0(OneSec);
 8000920:	2064      	movs	r0, #100	; 0x64
 8000922:	f001 f8ad 	bl	8001a80 <setTimer0>
				timer3= TIME_OUT/OneSec;
 8000926:	4b4e      	ldr	r3, [pc, #312]	; (8000a60 <fsm_automatic_run3+0x52c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a4b      	ldr	r2, [pc, #300]	; (8000a58 <fsm_automatic_run3+0x524>)
 800092c:	fb82 1203 	smull	r1, r2, r2, r3
 8000930:	1152      	asrs	r2, r2, #5
 8000932:	17db      	asrs	r3, r3, #31
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	4a44      	ldr	r2, [pc, #272]	; (8000a48 <fsm_automatic_run3+0x514>)
 8000938:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[1]==1){
 800093a:	4b45      	ldr	r3, [pc, #276]	; (8000a50 <fsm_automatic_run3+0x51c>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d107      	bne.n	8000952 <fsm_automatic_run3+0x41e>
				button_flag[1]=0;
 8000942:	4b43      	ldr	r3, [pc, #268]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
				timer2++;
 8000948:	4b3e      	ldr	r3, [pc, #248]	; (8000a44 <fsm_automatic_run3+0x510>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	4a3d      	ldr	r2, [pc, #244]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000950:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000952:	4b3f      	ldr	r3, [pc, #252]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d107      	bne.n	800096a <fsm_automatic_run3+0x436>
				button_flag[2]=0;
 800095a:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <fsm_automatic_run3+0x51c>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
				timer2--;
 8000960:	4b38      	ldr	r3, [pc, #224]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3b01      	subs	r3, #1
 8000966:	4a37      	ldr	r2, [pc, #220]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000968:	6013      	str	r3, [r2, #0]
			}
			if(timer3==STOP){
 800096a:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <fsm_automatic_run3+0x514>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	f040 8172 	bne.w	8000c58 <fsm_automatic_run3+0x724>
				status3=INIT;
 8000974:	4b39      	ldr	r3, [pc, #228]	; (8000a5c <fsm_automatic_run3+0x528>)
 8000976:	4a3b      	ldr	r2, [pc, #236]	; (8000a64 <fsm_automatic_run3+0x530>)
 8000978:	601a      	str	r2, [r3, #0]
			}

			break;
 800097a:	e16d      	b.n	8000c58 <fsm_automatic_run3+0x724>
		case MAN_YELLOW:
			if( timer0_flag == 1) {
 800097c:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <fsm_automatic_run3+0x508>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d116      	bne.n	80009b2 <fsm_automatic_run3+0x47e>
				Print_Mode(timer);
 8000984:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <fsm_automatic_run3+0x50c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fa73 	bl	8000e74 <Print_Mode>
				Print_Time(timer2);
 800098e:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f000 fa8c 	bl	8000eb0 <Print_Time>
				Print_TimeOut(timer3);
 8000998:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <fsm_automatic_run3+0x514>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fa4b 	bl	8000e38 <Print_TimeOut>
				setTimer0 (OneSec) ;
 80009a2:	2064      	movs	r0, #100	; 0x64
 80009a4:	f001 f86c 	bl	8001a80 <setTimer0>
				timer3--;
 80009a8:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <fsm_automatic_run3+0x514>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <fsm_automatic_run3+0x514>)
 80009b0:	6013      	str	r3, [r2, #0]
				}
			toogleYellow();
 80009b2:	f7ff fbf3 	bl	800019c <toogleYellow>
			toogleYellow1();
 80009b6:	f7ff fc25 	bl	8000204 <toogleYellow1>
			if(timer2>99)timer2=3;
 80009ba:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <fsm_automatic_run3+0x510>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b63      	cmp	r3, #99	; 0x63
 80009c0:	dd02      	ble.n	80009c8 <fsm_automatic_run3+0x494>
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <fsm_automatic_run3+0x510>)
 80009c4:	2203      	movs	r2, #3
 80009c6:	601a      	str	r2, [r3, #0]
			if(timer2<3)timer2=3;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <fsm_automatic_run3+0x510>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	dc02      	bgt.n	80009d6 <fsm_automatic_run3+0x4a2>
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <fsm_automatic_run3+0x510>)
 80009d2:	2203      	movs	r2, #3
 80009d4:	601a      	str	r2, [r3, #0]
			YELLOW_TIME=timer2*100;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <fsm_automatic_run3+0x510>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2264      	movs	r2, #100	; 0x64
 80009dc:	fb02 f303 	mul.w	r3, r2, r3
 80009e0:	4a21      	ldr	r2, [pc, #132]	; (8000a68 <fsm_automatic_run3+0x534>)
 80009e2:	6013      	str	r3, [r2, #0]
			if(button_flag[0]==1){
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <fsm_automatic_run3+0x51c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d105      	bne.n	80009f8 <fsm_automatic_run3+0x4c4>
				button_flag[0]=0;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <fsm_automatic_run3+0x51c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
				status3=INIT;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <fsm_automatic_run3+0x528>)
 80009f4:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <fsm_automatic_run3+0x530>)
 80009f6:	601a      	str	r2, [r3, #0]
			}
			if(button_flag[1]==1){
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <fsm_automatic_run3+0x51c>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d107      	bne.n	8000a10 <fsm_automatic_run3+0x4dc>
				button_flag[1]=0;
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
				timer2++;
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000a0e:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d107      	bne.n	8000a28 <fsm_automatic_run3+0x4f4>
				button_flag[2]=0;
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
				timer2--;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000a26:	6013      	str	r3, [r2, #0]
			}
			if(timer3==STOP){
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <fsm_automatic_run3+0x514>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	f040 8115 	bne.w	8000c5c <fsm_automatic_run3+0x728>
				status3=INIT;
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <fsm_automatic_run3+0x528>)
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <fsm_automatic_run3+0x530>)
 8000a36:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a38:	e110      	b.n	8000c5c <fsm_automatic_run3+0x728>
 8000a3a:	bf00      	nop
 8000a3c:	200000dc 	.word	0x200000dc
 8000a40:	200000c8 	.word	0x200000c8
 8000a44:	200000cc 	.word	0x200000cc
 8000a48:	200000d0 	.word	0x200000d0
 8000a4c:	20000010 	.word	0x20000010
 8000a50:	200000f4 	.word	0x200000f4
 8000a54:	20000014 	.word	0x20000014
 8000a58:	51eb851f 	.word	0x51eb851f
 8000a5c:	2000000c 	.word	0x2000000c
 8000a60:	2000001c 	.word	0x2000001c
 8000a64:	01605b22 	.word	0x01605b22
 8000a68:	20000018 	.word	0x20000018
		case HAND_RED:
			if(timer0_flag == 1) {
 8000a6c:	4b7d      	ldr	r3, [pc, #500]	; (8000c64 <fsm_automatic_run3+0x730>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d10f      	bne.n	8000a94 <fsm_automatic_run3+0x560>
				timer--;
 8000a74:	4b7c      	ldr	r3, [pc, #496]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	4a7b      	ldr	r2, [pc, #492]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000a7c:	6013      	str	r3, [r2, #0]
				Print_Mode(HAND_RED);
 8000a7e:	2015      	movs	r0, #21
 8000a80:	f000 f9f8 	bl	8000e74 <Print_Mode>
				Print_TimeOut(timer);
 8000a84:	4b78      	ldr	r3, [pc, #480]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f9d5 	bl	8000e38 <Print_TimeOut>
				setTimer0 (OneSec) ;
 8000a8e:	2064      	movs	r0, #100	; 0x64
 8000a90:	f000 fff6 	bl	8001a80 <setTimer0>
			}
			if(button_flag[1]==1){
 8000a94:	4b75      	ldr	r3, [pc, #468]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d112      	bne.n	8000ac2 <fsm_automatic_run3+0x58e>
				button_flag[1]=0;
 8000a9c:	4b73      	ldr	r3, [pc, #460]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	605a      	str	r2, [r3, #4]
				status3=HAND_GREEN;
 8000aa2:	4b73      	ldr	r3, [pc, #460]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000aa4:	2216      	movs	r2, #22
 8000aa6:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000aa8:	2064      	movs	r0, #100	; 0x64
 8000aaa:	f000 ffe9 	bl	8001a80 <setTimer0>
				timer=TIME_OUT/OneSec;
 8000aae:	4b71      	ldr	r3, [pc, #452]	; (8000c74 <fsm_automatic_run3+0x740>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a71      	ldr	r2, [pc, #452]	; (8000c78 <fsm_automatic_run3+0x744>)
 8000ab4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ab8:	1152      	asrs	r2, r2, #5
 8000aba:	17db      	asrs	r3, r3, #31
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	4a6a      	ldr	r2, [pc, #424]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000ac0:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000ac2:	4b6a      	ldr	r3, [pc, #424]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d112      	bne.n	8000af0 <fsm_automatic_run3+0x5bc>
				button_flag[2]=0;
 8000aca:	4b68      	ldr	r3, [pc, #416]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
				status3=HAND_YELLOW;
 8000ad0:	4b67      	ldr	r3, [pc, #412]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000ad2:	2217      	movs	r2, #23
 8000ad4:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f000 ffd2 	bl	8001a80 <setTimer0>
				timer=TIME_OUT/OneSec;
 8000adc:	4b65      	ldr	r3, [pc, #404]	; (8000c74 <fsm_automatic_run3+0x740>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a65      	ldr	r2, [pc, #404]	; (8000c78 <fsm_automatic_run3+0x744>)
 8000ae2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae6:	1152      	asrs	r2, r2, #5
 8000ae8:	17db      	asrs	r3, r3, #31
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	4a5e      	ldr	r2, [pc, #376]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000aee:	6013      	str	r3, [r2, #0]
			}
			if(timer==STOP){
 8000af0:	4b5d      	ldr	r3, [pc, #372]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <fsm_automatic_run3+0x5ca>
				status3=INIT;
 8000af8:	4b5d      	ldr	r3, [pc, #372]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000afa:	4a60      	ldr	r2, [pc, #384]	; (8000c7c <fsm_automatic_run3+0x748>)
 8000afc:	601a      	str	r2, [r3, #0]
			}
			 toogleGreen1();
 8000afe:	f7ff fb71 	bl	80001e4 <toogleGreen1>
			 toogleRed();
 8000b02:	f7ff fb23 	bl	800014c <toogleRed>
			 greenP();
 8000b06:	f7ff fba1 	bl	800024c <greenP>
			break;
 8000b0a:	e0a8      	b.n	8000c5e <fsm_automatic_run3+0x72a>
		case HAND_GREEN:
			if(timer0_flag == 1) {
 8000b0c:	4b55      	ldr	r3, [pc, #340]	; (8000c64 <fsm_automatic_run3+0x730>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d10f      	bne.n	8000b34 <fsm_automatic_run3+0x600>
				timer--;
 8000b14:	4b54      	ldr	r3, [pc, #336]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	4a53      	ldr	r2, [pc, #332]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000b1c:	6013      	str	r3, [r2, #0]
				Print_Mode(HAND_GREEN);
 8000b1e:	2016      	movs	r0, #22
 8000b20:	f000 f9a8 	bl	8000e74 <Print_Mode>
				Print_TimeOut(timer);
 8000b24:	4b50      	ldr	r3, [pc, #320]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f985 	bl	8000e38 <Print_TimeOut>
				setTimer0 (OneSec) ;
 8000b2e:	2064      	movs	r0, #100	; 0x64
 8000b30:	f000 ffa6 	bl	8001a80 <setTimer0>
				}
			if(button_flag[1]==1){
 8000b34:	4b4d      	ldr	r3, [pc, #308]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d112      	bne.n	8000b62 <fsm_automatic_run3+0x62e>
				button_flag[1]=0;
 8000b3c:	4b4b      	ldr	r3, [pc, #300]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
				status3=HAND_YELLOW;
 8000b42:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000b44:	2217      	movs	r2, #23
 8000b46:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000b48:	2064      	movs	r0, #100	; 0x64
 8000b4a:	f000 ff99 	bl	8001a80 <setTimer0>
				timer=TIME_OUT/OneSec;
 8000b4e:	4b49      	ldr	r3, [pc, #292]	; (8000c74 <fsm_automatic_run3+0x740>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a49      	ldr	r2, [pc, #292]	; (8000c78 <fsm_automatic_run3+0x744>)
 8000b54:	fb82 1203 	smull	r1, r2, r2, r3
 8000b58:	1152      	asrs	r2, r2, #5
 8000b5a:	17db      	asrs	r3, r3, #31
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	4a42      	ldr	r2, [pc, #264]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000b60:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000b62:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d112      	bne.n	8000b90 <fsm_automatic_run3+0x65c>
				button_flag[2]=0;
 8000b6a:	4b40      	ldr	r3, [pc, #256]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
				status3=HAND_RED;
 8000b70:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000b72:	2215      	movs	r2, #21
 8000b74:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000b76:	2064      	movs	r0, #100	; 0x64
 8000b78:	f000 ff82 	bl	8001a80 <setTimer0>
				timer=TIME_OUT/OneSec;
 8000b7c:	4b3d      	ldr	r3, [pc, #244]	; (8000c74 <fsm_automatic_run3+0x740>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a3d      	ldr	r2, [pc, #244]	; (8000c78 <fsm_automatic_run3+0x744>)
 8000b82:	fb82 1203 	smull	r1, r2, r2, r3
 8000b86:	1152      	asrs	r2, r2, #5
 8000b88:	17db      	asrs	r3, r3, #31
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	4a36      	ldr	r2, [pc, #216]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000b8e:	6013      	str	r3, [r2, #0]
			}
			if(timer==STOP){
 8000b90:	4b35      	ldr	r3, [pc, #212]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <fsm_automatic_run3+0x66a>
				status3=INIT;
 8000b98:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000b9a:	4a38      	ldr	r2, [pc, #224]	; (8000c7c <fsm_automatic_run3+0x748>)
 8000b9c:	601a      	str	r2, [r3, #0]
			}
			toogleRed1();
 8000b9e:	f7ff fb11 	bl	80001c4 <toogleRed1>
			toogleGreen();
 8000ba2:	f7ff fae7 	bl	8000174 <toogleGreen>
			redP();
 8000ba6:	f7ff fb3d 	bl	8000224 <redP>
			break;
 8000baa:	e058      	b.n	8000c5e <fsm_automatic_run3+0x72a>
		case HAND_YELLOW:
			if(timer0_flag == 1) {
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <fsm_automatic_run3+0x730>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d10f      	bne.n	8000bd4 <fsm_automatic_run3+0x6a0>
				timer--;
 8000bb4:	4b2c      	ldr	r3, [pc, #176]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	4a2b      	ldr	r2, [pc, #172]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000bbc:	6013      	str	r3, [r2, #0]
				Print_Mode(HAND_YELLOW);
 8000bbe:	2017      	movs	r0, #23
 8000bc0:	f000 f958 	bl	8000e74 <Print_Mode>
				Print_TimeOut(timer);
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 f935 	bl	8000e38 <Print_TimeOut>
				setTimer0 (OneSec) ;
 8000bce:	2064      	movs	r0, #100	; 0x64
 8000bd0:	f000 ff56 	bl	8001a80 <setTimer0>
				}
			if(button_flag[1]==1){
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d112      	bne.n	8000c02 <fsm_automatic_run3+0x6ce>
				button_flag[1]=0;
 8000bdc:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
				status3=HAND_RED;
 8000be2:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000be4:	2215      	movs	r2, #21
 8000be6:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000be8:	2064      	movs	r0, #100	; 0x64
 8000bea:	f000 ff49 	bl	8001a80 <setTimer0>
				timer=TIME_OUT/OneSec;
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <fsm_automatic_run3+0x740>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a21      	ldr	r2, [pc, #132]	; (8000c78 <fsm_automatic_run3+0x744>)
 8000bf4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf8:	1152      	asrs	r2, r2, #5
 8000bfa:	17db      	asrs	r3, r3, #31
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	4a1a      	ldr	r2, [pc, #104]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000c00:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d112      	bne.n	8000c30 <fsm_automatic_run3+0x6fc>
				button_flag[2]=0;
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
				status3=HAND_GREEN;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000c12:	2216      	movs	r2, #22
 8000c14:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000c16:	2064      	movs	r0, #100	; 0x64
 8000c18:	f000 ff32 	bl	8001a80 <setTimer0>
				timer=TIME_OUT/OneSec;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <fsm_automatic_run3+0x740>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <fsm_automatic_run3+0x744>)
 8000c22:	fb82 1203 	smull	r1, r2, r2, r3
 8000c26:	1152      	asrs	r2, r2, #5
 8000c28:	17db      	asrs	r3, r3, #31
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000c2e:	6013      	str	r3, [r2, #0]
			}
			if(timer==STOP){
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <fsm_automatic_run3+0x70a>
				status3=INIT;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <fsm_automatic_run3+0x748>)
 8000c3c:	601a      	str	r2, [r3, #0]
			}
			toogleRed1();
 8000c3e:	f7ff fac1 	bl	80001c4 <toogleRed1>
			toogleYellow();
 8000c42:	f7ff faab 	bl	800019c <toogleYellow>
			redP();
 8000c46:	f7ff faed 	bl	8000224 <redP>
			break;
 8000c4a:	e008      	b.n	8000c5e <fsm_automatic_run3+0x72a>
		default:
			break;
 8000c4c:	bf00      	nop
 8000c4e:	e006      	b.n	8000c5e <fsm_automatic_run3+0x72a>
			break;
 8000c50:	bf00      	nop
 8000c52:	e004      	b.n	8000c5e <fsm_automatic_run3+0x72a>
			break;
 8000c54:	bf00      	nop
 8000c56:	e002      	b.n	8000c5e <fsm_automatic_run3+0x72a>
			break;
 8000c58:	bf00      	nop
 8000c5a:	e000      	b.n	8000c5e <fsm_automatic_run3+0x72a>
			break;
 8000c5c:	bf00      	nop
	}
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200000dc 	.word	0x200000dc
 8000c68:	200000c8 	.word	0x200000c8
 8000c6c:	200000f4 	.word	0x200000f4
 8000c70:	2000000c 	.word	0x2000000c
 8000c74:	2000001c 	.word	0x2000001c
 8000c78:	51eb851f 	.word	0x51eb851f
 8000c7c:	01605b22 	.word	0x01605b22

08000c80 <subkeyProcess>:

//unsigned char is_button_pressed_1s()


void subkeyProcess(unsigned char i)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	button_flag[i] = 1;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <subkeyProcess+0x20>)
 8000c8e:	2101      	movs	r1, #1
 8000c90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	200000f4 	.word	0x200000f4

08000ca4 <button_reading>:
void button_reading()
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	e094      	b.n	8000dda <button_reading+0x136>
	{
		debounceButtonBuffer0[i] = debounceButtonBuffer1[i];
 8000cb0:	79fa      	ldrb	r2, [r7, #7]
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	494d      	ldr	r1, [pc, #308]	; (8000dec <button_reading+0x148>)
 8000cb6:	5c89      	ldrb	r1, [r1, r2]
 8000cb8:	4a4d      	ldr	r2, [pc, #308]	; (8000df0 <button_reading+0x14c>)
 8000cba:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 8000cbc:	79fa      	ldrb	r2, [r7, #7]
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	494c      	ldr	r1, [pc, #304]	; (8000df4 <button_reading+0x150>)
 8000cc2:	5c89      	ldrb	r1, [r1, r2]
 8000cc4:	4a49      	ldr	r2, [pc, #292]	; (8000dec <button_reading+0x148>)
 8000cc6:	54d1      	strb	r1, [r2, r3]
		switch (i)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d832      	bhi.n	8000d34 <button_reading+0x90>
 8000cce:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <button_reading+0x30>)
 8000cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd4:	08000ce5 	.word	0x08000ce5
 8000cd8:	08000cf9 	.word	0x08000cf9
 8000cdc:	08000d0d 	.word	0x08000d0d
 8000ce0:	08000d21 	.word	0x08000d21
		{
			case 0:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_1_GPIO_Port, button_1_Pin);
 8000ce4:	79fc      	ldrb	r4, [r7, #7]
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4843      	ldr	r0, [pc, #268]	; (8000df8 <button_reading+0x154>)
 8000cea:	f001 fa3f 	bl	800216c <HAL_GPIO_ReadPin>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b40      	ldr	r3, [pc, #256]	; (8000df4 <button_reading+0x150>)
 8000cf4:	551a      	strb	r2, [r3, r4]
				break;
 8000cf6:	e022      	b.n	8000d3e <button_reading+0x9a>
			case 1:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_2_GPIO_Port, button_2_Pin);
 8000cf8:	79fc      	ldrb	r4, [r7, #7]
 8000cfa:	2110      	movs	r1, #16
 8000cfc:	483e      	ldr	r0, [pc, #248]	; (8000df8 <button_reading+0x154>)
 8000cfe:	f001 fa35 	bl	800216c <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b3b      	ldr	r3, [pc, #236]	; (8000df4 <button_reading+0x150>)
 8000d08:	551a      	strb	r2, [r3, r4]
				break;
 8000d0a:	e018      	b.n	8000d3e <button_reading+0x9a>
			case 2:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_3_GPIO_Port, button_3_Pin);
 8000d0c:	79fc      	ldrb	r4, [r7, #7]
 8000d0e:	2101      	movs	r1, #1
 8000d10:	483a      	ldr	r0, [pc, #232]	; (8000dfc <button_reading+0x158>)
 8000d12:	f001 fa2b 	bl	800216c <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <button_reading+0x150>)
 8000d1c:	551a      	strb	r2, [r3, r4]
				break;
 8000d1e:	e00e      	b.n	8000d3e <button_reading+0x9a>
			case 3:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_p_GPIO_Port, button_p_Pin);
 8000d20:	79fc      	ldrb	r4, [r7, #7]
 8000d22:	2101      	movs	r1, #1
 8000d24:	4834      	ldr	r0, [pc, #208]	; (8000df8 <button_reading+0x154>)
 8000d26:	f001 fa21 	bl	800216c <HAL_GPIO_ReadPin>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <button_reading+0x150>)
 8000d30:	551a      	strb	r2, [r3, r4]
				break;
 8000d32:	e004      	b.n	8000d3e <button_reading+0x9a>
			default:
				debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	4a2f      	ldr	r2, [pc, #188]	; (8000df4 <button_reading+0x150>)
 8000d38:	2101      	movs	r1, #1
 8000d3a:	54d1      	strb	r1, [r2, r3]
				break;
 8000d3c:	bf00      	nop
		}
		if((debounceButtonBuffer0[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]))
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	4a2b      	ldr	r2, [pc, #172]	; (8000df0 <button_reading+0x14c>)
 8000d42:	5cd2      	ldrb	r2, [r2, r3]
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4929      	ldr	r1, [pc, #164]	; (8000dec <button_reading+0x148>)
 8000d48:	5ccb      	ldrb	r3, [r1, r3]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d142      	bne.n	8000dd4 <button_reading+0x130>
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	4a26      	ldr	r2, [pc, #152]	; (8000dec <button_reading+0x148>)
 8000d52:	5cd2      	ldrb	r2, [r2, r3]
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4927      	ldr	r1, [pc, #156]	; (8000df4 <button_reading+0x150>)
 8000d58:	5ccb      	ldrb	r3, [r1, r3]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d13a      	bne.n	8000dd4 <button_reading+0x130>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i])
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <button_reading+0x15c>)
 8000d62:	5cd2      	ldrb	r2, [r2, r3]
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	4923      	ldr	r1, [pc, #140]	; (8000df4 <button_reading+0x150>)
 8000d68:	5ccb      	ldrb	r3, [r1, r3]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d015      	beq.n	8000d9a <button_reading+0xf6>
			{
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000d6e:	79fa      	ldrb	r2, [r7, #7]
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	4920      	ldr	r1, [pc, #128]	; (8000df4 <button_reading+0x150>)
 8000d74:	5c89      	ldrb	r1, [r1, r2]
 8000d76:	4a22      	ldr	r2, [pc, #136]	; (8000e00 <button_reading+0x15c>)
 8000d78:	54d1      	strb	r1, [r2, r3]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	4a20      	ldr	r2, [pc, #128]	; (8000e00 <button_reading+0x15c>)
 8000d7e:	5cd3      	ldrb	r3, [r2, r3]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d127      	bne.n	8000dd4 <button_reading+0x130>
				{
					counterForButtonPress1s[i] = DURATION_FOR_HOLDING;
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <button_reading+0x160>)
 8000d88:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					subkeyProcess(i);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff74 	bl	8000c80 <subkeyProcess>
 8000d98:	e01c      	b.n	8000dd4 <button_reading+0x130>
				}
			}
			else
			{
				counterForButtonPress1s[i]--;
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <button_reading+0x160>)
 8000d9e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000da2:	3a01      	subs	r2, #1
 8000da4:	b291      	uxth	r1, r2
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <button_reading+0x160>)
 8000da8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(counterForButtonPress1s[i] == 0)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <button_reading+0x160>)
 8000db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10d      	bne.n	8000dd4 <button_reading+0x130>
				{
					if(buttonBuffer[i]== BUTTON_IS_PRESSED)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <button_reading+0x15c>)
 8000dbc:	5cd3      	ldrb	r3, [r2, r3]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d108      	bne.n	8000dd4 <button_reading+0x130>
					{
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <button_reading+0x160>)
 8000dc6:	2164      	movs	r1, #100	; 0x64
 8000dc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						subkeyProcess(i);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff56 	bl	8000c80 <subkeyProcess>
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	f67f af67 	bls.w	8000cb0 <button_reading+0xc>
					//buttonBuffer[i] = BUTTON_IS_RELEASED;
				}
			}
		}
	}
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd90      	pop	{r4, r7, pc}
 8000dec:	200000b4 	.word	0x200000b4
 8000df0:	200000b0 	.word	0x200000b0
 8000df4:	200000b8 	.word	0x200000b8
 8000df8:	40010800 	.word	0x40010800
 8000dfc:	40010c00 	.word	0x40010c00
 8000e00:	200000ac 	.word	0x200000ac
 8000e04:	200000bc 	.word	0x200000bc

08000e08 <Print_HELLO>:

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
void Print_HELLO()
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
	char str[30];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "HELLO\n\r"), 1000);
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <Print_HELLO+0x28>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 ff3c 	bl	8003c90 <siprintf>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4639      	mov	r1, r7
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	4804      	ldr	r0, [pc, #16]	; (8000e34 <Print_HELLO+0x2c>)
 8000e24:	f002 fd97 	bl	8003956 <HAL_UART_Transmit>
}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	0800451c 	.word	0x0800451c
 8000e34:	20000194 	.word	0x20000194

08000e38 <Print_TimeOut>:
void Print_TimeOut(int abc){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "timeout: %d\n\r", temp), 1000);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <Print_TimeOut+0x34>)
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 ff1f 	bl	8003c90 <siprintf>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	f107 010c 	add.w	r1, r7, #12
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	4804      	ldr	r0, [pc, #16]	; (8000e70 <Print_TimeOut+0x38>)
 8000e60:	f002 fd79 	bl	8003956 <HAL_UART_Transmit>
}
 8000e64:	bf00      	nop
 8000e66:	3730      	adds	r7, #48	; 0x30
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	08004524 	.word	0x08004524
 8000e70:	20000194 	.word	0x20000194

08000e74 <Print_Mode>:
	char str[30];
	int temp;
	temp=abc;
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time_P: %d\n\r", temp), 1000);
}
void Print_Mode(int abc){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Mode: %d\n\r", temp), 1000);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <Print_Mode+0x34>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 ff01 	bl	8003c90 <siprintf>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	f107 010c 	add.w	r1, r7, #12
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	4804      	ldr	r0, [pc, #16]	; (8000eac <Print_Mode+0x38>)
 8000e9c:	f002 fd5b 	bl	8003956 <HAL_UART_Transmit>
}
 8000ea0:	bf00      	nop
 8000ea2:	3730      	adds	r7, #48	; 0x30
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	08004544 	.word	0x08004544
 8000eac:	20000194 	.word	0x20000194

08000eb0 <Print_Time>:
void Print_Time(int abc){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time: %d\n\r", temp), 1000);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <Print_Time+0x34>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 fee3 	bl	8003c90 <siprintf>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	f107 010c 	add.w	r1, r7, #12
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <Print_Time+0x38>)
 8000ed8:	f002 fd3d 	bl	8003956 <HAL_UART_Transmit>
}
 8000edc:	bf00      	nop
 8000ede:	3730      	adds	r7, #48	; 0x30
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	08004550 	.word	0x08004550
 8000ee8:	20000194 	.word	0x20000194

08000eec <Print_Time1>:
void Print_Time1(int abc){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	; 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time_1: %d\n\r", temp), 1000);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <Print_Time1+0x34>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 fec5 	bl	8003c90 <siprintf>
 8000f06:	4603      	mov	r3, r0
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	f107 010c 	add.w	r1, r7, #12
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	4804      	ldr	r0, [pc, #16]	; (8000f24 <Print_Time1+0x38>)
 8000f14:	f002 fd1f 	bl	8003956 <HAL_UART_Transmit>
}
 8000f18:	bf00      	nop
 8000f1a:	3730      	adds	r7, #48	; 0x30
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	0800455c 	.word	0x0800455c
 8000f24:	20000194 	.word	0x20000194

08000f28 <Print_Time2>:
void Print_Time2(int abc){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time_2: %d\n\r", temp), 1000);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <Print_Time2+0x34>)
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fea7 	bl	8003c90 <siprintf>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	f107 010c 	add.w	r1, r7, #12
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <Print_Time2+0x38>)
 8000f50:	f002 fd01 	bl	8003956 <HAL_UART_Transmit>
}
 8000f54:	bf00      	nop
 8000f56:	3730      	adds	r7, #48	; 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	0800456c 	.word	0x0800456c
 8000f60:	20000194 	.word	0x20000194

08000f64 <off_Speaker>:

void off_Speaker(){
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
		__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,0);
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <off_Speaker+0x1c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
		speaker = 0;
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <off_Speaker+0x20>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000104 	.word	0x20000104
 8000f84:	200000c4 	.word	0x200000c4

08000f88 <toogle_Speaker>:
void toogle_Speaker(){
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	if(speaker == 0){
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <toogle_Speaker+0x3c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d108      	bne.n	8000fa6 <toogle_Speaker+0x1e>
		__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,910);
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <toogle_Speaker+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f240 328e 	movw	r2, #910	; 0x38e
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34
		speaker = 1;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <toogle_Speaker+0x3c>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
	}
	else if(speaker == 1){
		__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,0);
		speaker = 0;
	}
}
 8000fa4:	e00a      	b.n	8000fbc <toogle_Speaker+0x34>
	else if(speaker == 1){
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <toogle_Speaker+0x3c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d106      	bne.n	8000fbc <toogle_Speaker+0x34>
		__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,0);
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <toogle_Speaker+0x40>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	635a      	str	r2, [r3, #52]	; 0x34
		speaker = 0;
 8000fb6:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <toogle_Speaker+0x3c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	200000c4 	.word	0x200000c4
 8000fc8:	20000104 	.word	0x20000104

08000fcc <Print_ERROR>:
void Print_ERROR(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
	char str[30];
	if(RED_TIME!=GREEN_TIME+YELLOW_TIME){
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <Print_ERROR+0x48>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <Print_ERROR+0x4c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	441a      	add	r2, r3
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <Print_ERROR+0x50>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d013      	beq.n	800100c <Print_ERROR+0x40>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ERROR 1 reset TIME\n\r"), 1000);
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	490e      	ldr	r1, [pc, #56]	; (8001020 <Print_ERROR+0x54>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 fe51 	bl	8003c90 <siprintf>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4639      	mov	r1, r7
 8000ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff8:	480a      	ldr	r0, [pc, #40]	; (8001024 <Print_ERROR+0x58>)
 8000ffa:	f002 fcac 	bl	8003956 <HAL_UART_Transmit>
		RED_TIME = GREEN_TIME + YELLOW_TIME;
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <Print_ERROR+0x48>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <Print_ERROR+0x4c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <Print_ERROR+0x50>)
 800100a:	6013      	str	r3, [r2, #0]
	}
}
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000014 	.word	0x20000014
 8001018:	20000018 	.word	0x20000018
 800101c:	20000010 	.word	0x20000010
 8001020:	0800457c 	.word	0x0800457c
 8001024:	20000194 	.word	0x20000194

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f000 fdaa 	bl	8001b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f852 	bl	80010d8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init ();
 8001034:	f000 f978 	bl	8001328 <MX_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001038:	f000 f976 	bl	8001328 <MX_GPIO_Init>
  MX_TIM2_Init();
 800103c:	f000 f888 	bl	8001150 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001040:	f000 f948 	bl	80012d4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001044:	f000 f8d0 	bl	80011e8 <MX_TIM3_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001048:	2100      	movs	r1, #0
 800104a:	481a      	ldr	r0, [pc, #104]	; (80010b4 <main+0x8c>)
 800104c:	f001 fdd2 	bl	8002bf4 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8001050:	4819      	ldr	r0, [pc, #100]	; (80010b8 <main+0x90>)
 8001052:	f001 fd25 	bl	8002aa0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */

  SCH_Init();
 8001056:	f000 fa13 	bl	8001480 <SCH_Init>
  setTimer0(10);
 800105a:	200a      	movs	r0, #10
 800105c:	f000 fd10 	bl	8001a80 <setTimer0>
  setTimer3(10);
 8001060:	200a      	movs	r0, #10
 8001062:	f000 fd21 	bl	8001aa8 <setTimer3>



  SCH_Add_Task(timerRun0, 20, 10);
 8001066:	220a      	movs	r2, #10
 8001068:	2114      	movs	r1, #20
 800106a:	4814      	ldr	r0, [pc, #80]	; (80010bc <main+0x94>)
 800106c:	f000 fa14 	bl	8001498 <SCH_Add_Task>
  SCH_Add_Task(timerRun3, 20, 10);
 8001070:	220a      	movs	r2, #10
 8001072:	2114      	movs	r1, #20
 8001074:	4812      	ldr	r0, [pc, #72]	; (80010c0 <main+0x98>)
 8001076:	f000 fa0f 	bl	8001498 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 10, 10);
 800107a:	220a      	movs	r2, #10
 800107c:	210a      	movs	r1, #10
 800107e:	4811      	ldr	r0, [pc, #68]	; (80010c4 <main+0x9c>)
 8001080:	f000 fa0a 	bl	8001498 <SCH_Add_Task>

  SCH_Add_Task(fsm_automatic_run1, 20, 10);
 8001084:	220a      	movs	r2, #10
 8001086:	2114      	movs	r1, #20
 8001088:	480f      	ldr	r0, [pc, #60]	; (80010c8 <main+0xa0>)
 800108a:	f000 fa05 	bl	8001498 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run2, 20, 10);
 800108e:	220a      	movs	r2, #10
 8001090:	2114      	movs	r1, #20
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <main+0xa4>)
 8001094:	f000 fa00 	bl	8001498 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run3, 20, 10);
 8001098:	220a      	movs	r2, #10
 800109a:	2114      	movs	r1, #20
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <main+0xa8>)
 800109e:	f000 f9fb 	bl	8001498 <SCH_Add_Task>
  SCH_Add_Task(fsm_p, 20, 10);
 80010a2:	220a      	movs	r2, #10
 80010a4:	2114      	movs	r1, #20
 80010a6:	480b      	ldr	r0, [pc, #44]	; (80010d4 <main+0xac>)
 80010a8:	f000 f9f6 	bl	8001498 <SCH_Add_Task>


  while (1)
  {

	  SCH_Dispatch_Tasks();
 80010ac:	f000 faba 	bl	8001624 <SCH_Dispatch_Tasks>
 80010b0:	e7fc      	b.n	80010ac <main+0x84>
 80010b2:	bf00      	nop
 80010b4:	20000104 	.word	0x20000104
 80010b8:	2000014c 	.word	0x2000014c
 80010bc:	08001ad1 	.word	0x08001ad1
 80010c0:	08001b05 	.word	0x08001b05
 80010c4:	08000ca5 	.word	0x08000ca5
 80010c8:	0800029d 	.word	0x0800029d
 80010cc:	08000385 	.word	0x08000385
 80010d0:	08000535 	.word	0x08000535
 80010d4:	0800046d 	.word	0x0800046d

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b090      	sub	sp, #64	; 0x40
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2228      	movs	r2, #40	; 0x28
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fdca 	bl	8003c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fe:	2301      	movs	r3, #1
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001102:	2310      	movs	r3, #16
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001106:	2300      	movs	r3, #0
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	4618      	mov	r0, r3
 8001110:	f001 f85c 	bl	80021cc <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800111a:	f000 f9ac 	bl	8001476 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fac8 	bl	80026cc <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001142:	f000 f998 	bl	8001476 <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3740      	adds	r7, #64	; 0x40
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	463b      	mov	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_TIM2_Init+0x94>)
 800116e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001172:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001176:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800117a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_TIM2_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001184:	2209      	movs	r2, #9
 8001186:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_TIM2_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001194:	4813      	ldr	r0, [pc, #76]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001196:	f001 fc33 	bl	8002a00 <HAL_TIM_Base_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011a0:	f000 f969 	bl	8001476 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	4619      	mov	r1, r3
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <MX_TIM2_Init+0x94>)
 80011b2:	f001 ff87 	bl	80030c4 <HAL_TIM_ConfigClockSource>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011bc:	f000 f95b 	bl	8001476 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_TIM2_Init+0x94>)
 80011ce:	f002 fb05 	bl	80037dc <HAL_TIMEx_MasterConfigSynchronization>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011d8:	f000 f94d 	bl	8001476 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2000014c 	.word	0x2000014c

080011e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
 8001216:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_TIM3_Init+0xe4>)
 800121a:	4a2d      	ldr	r2, [pc, #180]	; (80012d0 <MX_TIM3_Init+0xe8>)
 800121c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001220:	223f      	movs	r2, #63	; 0x3f
 8001222:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <MX_TIM3_Init+0xe4>)
 800122c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001230:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <MX_TIM3_Init+0xe4>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800123e:	4823      	ldr	r0, [pc, #140]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001240:	f001 fbde 	bl	8002a00 <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800124a:	f000 f914 	bl	8001476 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001258:	4619      	mov	r1, r3
 800125a:	481c      	ldr	r0, [pc, #112]	; (80012cc <MX_TIM3_Init+0xe4>)
 800125c:	f001 ff32 	bl	80030c4 <HAL_TIM_ConfigClockSource>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001266:	f000 f906 	bl	8001476 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800126a:	4818      	ldr	r0, [pc, #96]	; (80012cc <MX_TIM3_Init+0xe4>)
 800126c:	f001 fc6a 	bl	8002b44 <HAL_TIM_PWM_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001276:	f000 f8fe 	bl	8001476 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	4619      	mov	r1, r3
 8001288:	4810      	ldr	r0, [pc, #64]	; (80012cc <MX_TIM3_Init+0xe4>)
 800128a:	f002 faa7 	bl	80037dc <HAL_TIMEx_MasterConfigSynchronization>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001294:	f000 f8ef 	bl	8001476 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001298:	2360      	movs	r3, #96	; 0x60
 800129a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	4807      	ldr	r0, [pc, #28]	; (80012cc <MX_TIM3_Init+0xe4>)
 80012b0:	f001 fe4a 	bl	8002f48 <HAL_TIM_PWM_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012ba:	f000 f8dc 	bl	8001476 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012be:	4803      	ldr	r0, [pc, #12]	; (80012cc <MX_TIM3_Init+0xe4>)
 80012c0:	f000 faf4 	bl	80018ac <HAL_TIM_MspPostInit>

}
 80012c4:	bf00      	nop
 80012c6:	3738      	adds	r7, #56	; 0x38
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000104 	.word	0x20000104
 80012d0:	40000400 	.word	0x40000400

080012d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_USART2_UART_Init+0x50>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 800130c:	f002 fad6 	bl	80038bc <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001316:	f000 f8ae 	bl	8001476 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000194 	.word	0x20000194
 8001324:	40004400 	.word	0x40004400

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b43      	ldr	r3, [pc, #268]	; (800144c <MX_GPIO_Init+0x124>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a42      	ldr	r2, [pc, #264]	; (800144c <MX_GPIO_Init+0x124>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b40      	ldr	r3, [pc, #256]	; (800144c <MX_GPIO_Init+0x124>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001354:	4b3d      	ldr	r3, [pc, #244]	; (800144c <MX_GPIO_Init+0x124>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a3c      	ldr	r2, [pc, #240]	; (800144c <MX_GPIO_Init+0x124>)
 800135a:	f043 0308 	orr.w	r3, r3, #8
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b3a      	ldr	r3, [pc, #232]	; (800144c <MX_GPIO_Init+0x124>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ledpa_Pin|led1b_Pin|led2b_Pin|led2a_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001372:	4837      	ldr	r0, [pc, #220]	; (8001450 <MX_GPIO_Init+0x128>)
 8001374:	f000 ff11 	bl	800219a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ledpb_Pin|led1a_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800137e:	4835      	ldr	r0, [pc, #212]	; (8001454 <MX_GPIO_Init+0x12c>)
 8001380:	f000 ff0b 	bl	800219a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : button_p_Pin button_1_Pin */
  GPIO_InitStruct.Pin = button_p_Pin|button_1_Pin;
 8001384:	2303      	movs	r3, #3
 8001386:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138c:	2301      	movs	r3, #1
 800138e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0308 	add.w	r3, r7, #8
 8001394:	4619      	mov	r1, r3
 8001396:	482f      	ldr	r0, [pc, #188]	; (8001454 <MX_GPIO_Init+0x12c>)
 8001398:	f000 fd64 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_2_Pin */
  GPIO_InitStruct.Pin = button_2_Pin;
 800139c:	2310      	movs	r3, #16
 800139e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(button_2_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	4619      	mov	r1, r3
 80013ae:	4829      	ldr	r0, [pc, #164]	; (8001454 <MX_GPIO_Init+0x12c>)
 80013b0:	f000 fd58 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_3_Pin */
  GPIO_InitStruct.Pin = button_3_Pin;
 80013b4:	2301      	movs	r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013bc:	2301      	movs	r3, #1
 80013be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(button_3_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	4619      	mov	r1, r3
 80013c6:	4822      	ldr	r0, [pc, #136]	; (8001450 <MX_GPIO_Init+0x128>)
 80013c8:	f000 fd4c 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ledpa_Pin led2b_Pin led2a_Pin */
  GPIO_InitStruct.Pin = ledpa_Pin|led2b_Pin|led2a_Pin;
 80013cc:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80013d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2302      	movs	r3, #2
 80013dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	4619      	mov	r1, r3
 80013e4:	481a      	ldr	r0, [pc, #104]	; (8001450 <MX_GPIO_Init+0x128>)
 80013e6:	f000 fd3d 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ledpb_Pin */
  GPIO_InitStruct.Pin = ledpb_Pin;
 80013ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2302      	movs	r3, #2
 80013fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ledpb_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4619      	mov	r1, r3
 8001402:	4814      	ldr	r0, [pc, #80]	; (8001454 <MX_GPIO_Init+0x12c>)
 8001404:	f000 fd2e 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : led1a_Pin */
  GPIO_InitStruct.Pin = led1a_Pin;
 8001408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800140c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001412:	2301      	movs	r3, #1
 8001414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2302      	movs	r3, #2
 8001418:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(led1a_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <MX_GPIO_Init+0x12c>)
 8001422:	f000 fd1f 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : led1b_Pin */
  GPIO_InitStruct.Pin = led1b_Pin;
 8001426:	2308      	movs	r3, #8
 8001428:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142e:	2301      	movs	r3, #1
 8001430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2302      	movs	r3, #2
 8001434:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(led1b_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	4619      	mov	r1, r3
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_GPIO_Init+0x128>)
 800143e:	f000 fd11 	bl	8001e64 <HAL_GPIO_Init>

}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	40010c00 	.word	0x40010c00
 8001454:	40010800 	.word	0x40010800

08001458 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	if( htim -> Instance == TIM2 ){
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001468:	d101      	bne.n	800146e <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 800146a:	f000 f867 	bl	800153c <SCH_Update>
		}
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147a:	b672      	cpsid	i
}
 800147c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147e:	e7fe      	b.n	800147e <Error_Handler+0x8>

08001480 <SCH_Init>:
#include "main.h"
sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
		current_index_task = 0;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <SCH_Init+0x14>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	200000d4 	.word	0x200000d4

08001498 <SCH_Add_Task>:

void SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS)
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <SCH_Add_Task+0x98>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b27      	cmp	r3, #39	; 0x27
 80014aa:	d83c      	bhi.n	8001526 <SCH_Add_Task+0x8e>
	{

		SCH_tasks_G[current_index_task].pTask = pFunction;
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <SCH_Add_Task+0x98>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	4a20      	ldr	r2, [pc, #128]	; (8001534 <SCH_Add_Task+0x9c>)
 80014b4:	460b      	mov	r3, r1
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY/TIMER_CYCLE;
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <SCH_Add_Task+0x98>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4a1b      	ldr	r2, [pc, #108]	; (8001538 <SCH_Add_Task+0xa0>)
 80014cc:	fba2 2303 	umull	r2, r3, r2, r3
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	4918      	ldr	r1, [pc, #96]	; (8001534 <SCH_Add_Task+0x9c>)
 80014d4:	4603      	mov	r3, r0
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4403      	add	r3, r0
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	3304      	adds	r3, #4
 80014e0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD/TIMER_CYCLE;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <SCH_Add_Task+0x98>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a13      	ldr	r2, [pc, #76]	; (8001538 <SCH_Add_Task+0xa0>)
 80014ec:	fba2 2303 	umull	r2, r3, r2, r3
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	4910      	ldr	r1, [pc, #64]	; (8001534 <SCH_Add_Task+0x9c>)
 80014f4:	4603      	mov	r3, r0
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4403      	add	r3, r0
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	3308      	adds	r3, #8
 8001500:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <SCH_Add_Task+0x98>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4619      	mov	r1, r3
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <SCH_Add_Task+0x9c>)
 800150a:	460b      	mov	r3, r1
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	330c      	adds	r3, #12
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
//		SCH_tasks_G[current_index_task].TaskID = current_index_task;
		current_index_task++;
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <SCH_Add_Task+0x98>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b03      	ldr	r3, [pc, #12]	; (8001530 <SCH_Add_Task+0x98>)
 8001524:	701a      	strb	r2, [r3, #0]
//		return current_index_task-1;
	}
//	return -1;
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	200000d4 	.word	0x200000d4
 8001534:	200001d8 	.word	0x200001d8
 8001538:	cccccccd 	.word	0xcccccccd

0800153c <SCH_Update>:

void SCH_Update(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < current_index_task; i++)
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	e05d      	b.n	8001604 <SCH_Update+0xc8>
	{
		if(SCH_tasks_G[i].Delay > 0)
 8001548:	4934      	ldr	r1, [pc, #208]	; (800161c <SCH_Update+0xe0>)
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	3304      	adds	r3, #4
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d012      	beq.n	8001584 <SCH_Update+0x48>
		{
			SCH_tasks_G[i].Delay--;
 800155e:	492f      	ldr	r1, [pc, #188]	; (800161c <SCH_Update+0xe0>)
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3304      	adds	r3, #4
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	1e59      	subs	r1, r3, #1
 8001572:	482a      	ldr	r0, [pc, #168]	; (800161c <SCH_Update+0xe0>)
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4403      	add	r3, r0
 8001580:	3304      	adds	r3, #4
 8001582:	6019      	str	r1, [r3, #0]
		}
		if(SCH_tasks_G[i].Delay == 0)
 8001584:	4925      	ldr	r1, [pc, #148]	; (800161c <SCH_Update+0xe0>)
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	3304      	adds	r3, #4
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d131      	bne.n	80015fe <SCH_Update+0xc2>
		{
			SCH_tasks_G[i].RunMe +=1;
 800159a:	4920      	ldr	r1, [pc, #128]	; (800161c <SCH_Update+0xe0>)
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	330c      	adds	r3, #12
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	b2d8      	uxtb	r0, r3
 80015b0:	491a      	ldr	r1, [pc, #104]	; (800161c <SCH_Update+0xe0>)
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	330c      	adds	r3, #12
 80015c0:	4602      	mov	r2, r0
 80015c2:	701a      	strb	r2, [r3, #0]
			if(SCH_tasks_G[i].Period)
 80015c4:	4915      	ldr	r1, [pc, #84]	; (800161c <SCH_Update+0xe0>)
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	3308      	adds	r3, #8
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d011      	beq.n	80015fe <SCH_Update+0xc2>
					SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 80015da:	4910      	ldr	r1, [pc, #64]	; (800161c <SCH_Update+0xe0>)
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	3308      	adds	r3, #8
 80015ea:	6819      	ldr	r1, [r3, #0]
 80015ec:	480b      	ldr	r0, [pc, #44]	; (800161c <SCH_Update+0xe0>)
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4403      	add	r3, r0
 80015fa:	3304      	adds	r3, #4
 80015fc:	6019      	str	r1, [r3, #0]
	for(int i = 0 ; i < current_index_task; i++)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <SCH_Update+0xe4>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4293      	cmp	r3, r2
 800160e:	db9b      	blt.n	8001548 <SCH_Update+0xc>
		}

	}
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	200001d8 	.word	0x200001d8
 8001620:	200000d4 	.word	0x200000d4

08001624 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
	for( int i = 0; i < current_index_task; i++)
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	e051      	b.n	80016d4 <SCH_Dispatch_Tasks+0xb0>
	{
		if(SCH_tasks_G[i].RunMe > 0)
 8001630:	492e      	ldr	r1, [pc, #184]	; (80016ec <SCH_Dispatch_Tasks+0xc8>)
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	330c      	adds	r3, #12
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d043      	beq.n	80016ce <SCH_Dispatch_Tasks+0xaa>
		{
			SCH_tasks_G[i].RunMe--;
 8001646:	4929      	ldr	r1, [pc, #164]	; (80016ec <SCH_Dispatch_Tasks+0xc8>)
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	330c      	adds	r3, #12
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	3b01      	subs	r3, #1
 800165a:	b2d8      	uxtb	r0, r3
 800165c:	4923      	ldr	r1, [pc, #140]	; (80016ec <SCH_Dispatch_Tasks+0xc8>)
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	330c      	adds	r3, #12
 800166c:	4602      	mov	r2, r0
 800166e:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 8001670:	491e      	ldr	r1, [pc, #120]	; (80016ec <SCH_Dispatch_Tasks+0xc8>)
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4798      	blx	r3
			if(SCH_tasks_G[i].Delay == 0 && SCH_tasks_G[i].Period == 0 && SCH_tasks_G[i].RunMe == 0)
 8001682:	491a      	ldr	r1, [pc, #104]	; (80016ec <SCH_Dispatch_Tasks+0xc8>)
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	3304      	adds	r3, #4
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d11a      	bne.n	80016ce <SCH_Dispatch_Tasks+0xaa>
 8001698:	4914      	ldr	r1, [pc, #80]	; (80016ec <SCH_Dispatch_Tasks+0xc8>)
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	3308      	adds	r3, #8
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10f      	bne.n	80016ce <SCH_Dispatch_Tasks+0xaa>
 80016ae:	490f      	ldr	r1, [pc, #60]	; (80016ec <SCH_Dispatch_Tasks+0xc8>)
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	330c      	adds	r3, #12
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d104      	bne.n	80016ce <SCH_Dispatch_Tasks+0xaa>
			{
				SCH_Delete_Task(i);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 f813 	bl	80016f4 <SCH_Delete_Task>
	for( int i = 0; i < current_index_task; i++)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3301      	adds	r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <SCH_Dispatch_Tasks+0xcc>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4293      	cmp	r3, r2
 80016de:	dba7      	blt.n	8001630 <SCH_Dispatch_Tasks+0xc>
			}
		}

	}
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200001d8 	.word	0x200001d8
 80016f0:	200000d4 	.word	0x200000d4

080016f4 <SCH_Delete_Task>:

void SCH_Delete_Task(const uint8_t TASK_INDEX)//in array index is taskid
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
   if(TASK_INDEX >= current_index_task)
 80016fe:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <SCH_Delete_Task+0xdc>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	79fa      	ldrb	r2, [r7, #7]
 8001704:	429a      	cmp	r2, r3
 8001706:	d25d      	bcs.n	80017c4 <SCH_Delete_Task+0xd0>
   {
	   return ;
   }
   else
   {
	   for( int i = TASK_INDEX; i < current_index_task - 1; i++)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e04d      	b.n	80017aa <SCH_Delete_Task+0xb6>
	   {
			SCH_tasks_G[i].pTask = SCH_tasks_G[i + 1].pTask;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	4930      	ldr	r1, [pc, #192]	; (80017d4 <SCH_Delete_Task+0xe0>)
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	6819      	ldr	r1, [r3, #0]
 8001720:	482c      	ldr	r0, [pc, #176]	; (80017d4 <SCH_Delete_Task+0xe0>)
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4403      	add	r3, r0
 800172e:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Delay = SCH_tasks_G[i + 1].Delay;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	4927      	ldr	r1, [pc, #156]	; (80017d4 <SCH_Delete_Task+0xe0>)
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	3304      	adds	r3, #4
 8001742:	6819      	ldr	r1, [r3, #0]
 8001744:	4823      	ldr	r0, [pc, #140]	; (80017d4 <SCH_Delete_Task+0xe0>)
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4403      	add	r3, r0
 8001752:	3304      	adds	r3, #4
 8001754:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Period = SCH_tasks_G[i + 1].Period;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	491e      	ldr	r1, [pc, #120]	; (80017d4 <SCH_Delete_Task+0xe0>)
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	3308      	adds	r3, #8
 8001768:	6819      	ldr	r1, [r3, #0]
 800176a:	481a      	ldr	r0, [pc, #104]	; (80017d4 <SCH_Delete_Task+0xe0>)
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4403      	add	r3, r0
 8001778:	3308      	adds	r3, #8
 800177a:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe = SCH_tasks_G[i + 1].RunMe;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	4914      	ldr	r1, [pc, #80]	; (80017d4 <SCH_Delete_Task+0xe0>)
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	330c      	adds	r3, #12
 800178e:	7818      	ldrb	r0, [r3, #0]
 8001790:	4910      	ldr	r1, [pc, #64]	; (80017d4 <SCH_Delete_Task+0xe0>)
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	330c      	adds	r3, #12
 80017a0:	4602      	mov	r2, r0
 80017a2:	701a      	strb	r2, [r3, #0]
	   for( int i = TASK_INDEX; i < current_index_task - 1; i++)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	3301      	adds	r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <SCH_Delete_Task+0xdc>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dbab      	blt.n	800170e <SCH_Delete_Task+0x1a>
	   }

	   current_index_task--;
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <SCH_Delete_Task+0xdc>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <SCH_Delete_Task+0xdc>)
 80017c0:	701a      	strb	r2, [r3, #0]
 80017c2:	e000      	b.n	80017c6 <SCH_Delete_Task+0xd2>
	   return ;
 80017c4:	bf00      	nop
//	   return ;
   }
}
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	200000d4 	.word	0x200000d4
 80017d4:	200001d8 	.word	0x200001d8

080017d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_MspInit+0x5c>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	4a14      	ldr	r2, [pc, #80]	; (8001834 <HAL_MspInit+0x5c>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6193      	str	r3, [r2, #24]
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_MspInit+0x5c>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_MspInit+0x5c>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <HAL_MspInit+0x5c>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	61d3      	str	r3, [r2, #28]
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_MspInit+0x5c>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_MspInit+0x60>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_MspInit+0x60>)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	40021000 	.word	0x40021000
 8001838:	40010000 	.word	0x40010000

0800183c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800184c:	d114      	bne.n	8001878 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_TIM_Base_MspInit+0x68>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <HAL_TIM_Base_MspInit+0x68>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	61d3      	str	r3, [r2, #28]
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_TIM_Base_MspInit+0x68>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	201c      	movs	r0, #28
 800186c:	f000 fac3 	bl	8001df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001870:	201c      	movs	r0, #28
 8001872:	f000 fadc 	bl	8001e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001876:	e010      	b.n	800189a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_TIM_Base_MspInit+0x6c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d10b      	bne.n	800189a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_TIM_Base_MspInit+0x68>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_TIM_Base_MspInit+0x68>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	61d3      	str	r3, [r2, #28]
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_TIM_Base_MspInit+0x68>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40000400 	.word	0x40000400

080018ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <HAL_TIM_MspPostInit+0x58>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d117      	bne.n	80018fc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_TIM_MspPostInit+0x5c>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_TIM_MspPostInit+0x5c>)
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_TIM_MspPostInit+0x5c>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018e4:	2340      	movs	r3, #64	; 0x40
 80018e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	4619      	mov	r1, r3
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_TIM_MspPostInit+0x60>)
 80018f8:	f000 fab4 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018fc:	bf00      	nop
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40000400 	.word	0x40000400
 8001908:	40021000 	.word	0x40021000
 800190c:	40010800 	.word	0x40010800

08001910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_UART_MspInit+0x88>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d12f      	bne.n	8001990 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_UART_MspInit+0x8c>)
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	4a19      	ldr	r2, [pc, #100]	; (800199c <HAL_UART_MspInit+0x8c>)
 8001936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193a:	61d3      	str	r3, [r2, #28]
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_UART_MspInit+0x8c>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_UART_MspInit+0x8c>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a13      	ldr	r2, [pc, #76]	; (800199c <HAL_UART_MspInit+0x8c>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_UART_MspInit+0x8c>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001960:	2304      	movs	r3, #4
 8001962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4619      	mov	r1, r3
 8001972:	480b      	ldr	r0, [pc, #44]	; (80019a0 <HAL_UART_MspInit+0x90>)
 8001974:	f000 fa76 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001978:	2308      	movs	r3, #8
 800197a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <HAL_UART_MspInit+0x90>)
 800198c:	f000 fa6a 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001990:	bf00      	nop
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40004400 	.word	0x40004400
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010800 	.word	0x40010800

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ea:	f000 f911 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM2_IRQHandler+0x10>)
 80019fa:	f001 f99d 	bl	8002d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000014c 	.word	0x2000014c

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f002 f8f8 	bl	8003c2c <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20005000 	.word	0x20005000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	200000d8 	.word	0x200000d8
 8001a70:	20000510 	.word	0x20000510

08001a74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <setTimer0>:
int timerOut1_counter = 0;

int timerOut2_flag = 0;
int timerOut2_counter = 0;

void setTimer0(int duration){
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 8001a88:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <setTimer0+0x20>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <setTimer0+0x24>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
};
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	200000e0 	.word	0x200000e0
 8001aa4:	200000dc 	.word	0x200000dc

08001aa8 <setTimer3>:
};
void setTimer2(int duration){
	timer2_counter = duration;
	timer2_flag = 0;
};
void setTimer3(int duration){
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001ab0:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <setTimer3+0x20>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <setTimer3+0x24>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
};
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	200000e8 	.word	0x200000e8
 8001acc:	200000e4 	.word	0x200000e4

08001ad0 <timerRun0>:
	timerOut2_flag = 0;
	timerOut2_counter = duration;
};


void timerRun0(){
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
	if(timer0_counter > 0 )
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <timerRun0+0x2c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	dd0b      	ble.n	8001af4 <timerRun0+0x24>
	{
		timer0_counter --;
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <timerRun0+0x2c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	4a06      	ldr	r2, [pc, #24]	; (8001afc <timerRun0+0x2c>)
 8001ae4:	6013      	str	r3, [r2, #0]
		if(timer0_counter <=0){
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <timerRun0+0x2c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	dc02      	bgt.n	8001af4 <timerRun0+0x24>
			timer0_flag=1;
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <timerRun0+0x30>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
		}
	}
};
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	200000e0 	.word	0x200000e0
 8001b00:	200000dc 	.word	0x200000dc

08001b04 <timerRun3>:
			timer2_flag=1;
		}
	}
};

void timerRun3(){
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
	if(timer3_counter > 0 )
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <timerRun3+0x2c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	dd0b      	ble.n	8001b28 <timerRun3+0x24>
	{
		timer3_counter --;
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <timerRun3+0x2c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	4a06      	ldr	r2, [pc, #24]	; (8001b30 <timerRun3+0x2c>)
 8001b18:	6013      	str	r3, [r2, #0]
		if(timer3_counter <=0){
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <timerRun3+0x2c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	dc02      	bgt.n	8001b28 <timerRun3+0x24>
			timer3_flag=1;
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <timerRun3+0x30>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
		}
	}
};
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	200000e8 	.word	0x200000e8
 8001b34:	200000e4 	.word	0x200000e4

08001b38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b38:	480c      	ldr	r0, [pc, #48]	; (8001b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b3a:	490d      	ldr	r1, [pc, #52]	; (8001b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b50:	4c0a      	ldr	r4, [pc, #40]	; (8001b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b5e:	f7ff ff89 	bl	8001a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b62:	f002 f869 	bl	8003c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b66:	f7ff fa5f 	bl	8001028 <main>
  bx lr
 8001b6a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b70:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001b74:	080045f8 	.word	0x080045f8
  ldr r2, =_sbss
 8001b78:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001b7c:	2000050c 	.word	0x2000050c

08001b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC1_2_IRQHandler>
	...

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_Init+0x28>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_Init+0x28>)
 8001b8e:	f043 0310 	orr.w	r3, r3, #16
 8001b92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 f923 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f000 f808 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba0:	f7ff fe1a 	bl	80017d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40022000 	.word	0x40022000

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x54>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_InitTick+0x58>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f93b 	bl	8001e4a <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f000 f903 	bl	8001df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <HAL_InitTick+0x5c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000020 	.word	0x20000020
 8001c08:	20000028 	.word	0x20000028
 8001c0c:	20000024 	.word	0x20000024

08001c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_IncTick+0x1c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_IncTick+0x20>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a03      	ldr	r2, [pc, #12]	; (8001c30 <HAL_IncTick+0x20>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	20000028 	.word	0x20000028
 8001c30:	200004f8 	.word	0x200004f8

08001c34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b02      	ldr	r3, [pc, #8]	; (8001c44 <HAL_GetTick+0x10>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	200004f8 	.word	0x200004f8

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db0b      	blt.n	8001cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4906      	ldr	r1, [pc, #24]	; (8001ce0 <__NVIC_EnableIRQ+0x34>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	e000e100 	.word	0xe000e100

08001ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0a      	blt.n	8001d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	490c      	ldr	r1, [pc, #48]	; (8001d30 <__NVIC_SetPriority+0x4c>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d0c:	e00a      	b.n	8001d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <__NVIC_SetPriority+0x50>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	0112      	lsls	r2, r2, #4
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440b      	add	r3, r1
 8001d22:	761a      	strb	r2, [r3, #24]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f1c3 0307 	rsb	r3, r3, #7
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	bf28      	it	cs
 8001d56:	2304      	movcs	r3, #4
 8001d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d902      	bls.n	8001d68 <NVIC_EncodePriority+0x30>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b03      	subs	r3, #3
 8001d66:	e000      	b.n	8001d6a <NVIC_EncodePriority+0x32>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	4313      	orrs	r3, r2
         );
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f7ff ff90 	bl	8001ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff2d 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff42 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff90 	bl	8001d38 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5f 	bl	8001ce4 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff35 	bl	8001cac <__NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffa2 	bl	8001d9c <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b08b      	sub	sp, #44	; 0x2c
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e76:	e169      	b.n	800214c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	f040 8158 	bne.w	8002146 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	4a9a      	ldr	r2, [pc, #616]	; (8002104 <HAL_GPIO_Init+0x2a0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d05e      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
 8001ea0:	4a98      	ldr	r2, [pc, #608]	; (8002104 <HAL_GPIO_Init+0x2a0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d875      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001ea6:	4a98      	ldr	r2, [pc, #608]	; (8002108 <HAL_GPIO_Init+0x2a4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d058      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
 8001eac:	4a96      	ldr	r2, [pc, #600]	; (8002108 <HAL_GPIO_Init+0x2a4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d86f      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001eb2:	4a96      	ldr	r2, [pc, #600]	; (800210c <HAL_GPIO_Init+0x2a8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d052      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
 8001eb8:	4a94      	ldr	r2, [pc, #592]	; (800210c <HAL_GPIO_Init+0x2a8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d869      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001ebe:	4a94      	ldr	r2, [pc, #592]	; (8002110 <HAL_GPIO_Init+0x2ac>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d04c      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
 8001ec4:	4a92      	ldr	r2, [pc, #584]	; (8002110 <HAL_GPIO_Init+0x2ac>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d863      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001eca:	4a92      	ldr	r2, [pc, #584]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d046      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
 8001ed0:	4a90      	ldr	r2, [pc, #576]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d85d      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001ed6:	2b12      	cmp	r3, #18
 8001ed8:	d82a      	bhi.n	8001f30 <HAL_GPIO_Init+0xcc>
 8001eda:	2b12      	cmp	r3, #18
 8001edc:	d859      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001ede:	a201      	add	r2, pc, #4	; (adr r2, 8001ee4 <HAL_GPIO_Init+0x80>)
 8001ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee4:	08001f5f 	.word	0x08001f5f
 8001ee8:	08001f39 	.word	0x08001f39
 8001eec:	08001f4b 	.word	0x08001f4b
 8001ef0:	08001f8d 	.word	0x08001f8d
 8001ef4:	08001f93 	.word	0x08001f93
 8001ef8:	08001f93 	.word	0x08001f93
 8001efc:	08001f93 	.word	0x08001f93
 8001f00:	08001f93 	.word	0x08001f93
 8001f04:	08001f93 	.word	0x08001f93
 8001f08:	08001f93 	.word	0x08001f93
 8001f0c:	08001f93 	.word	0x08001f93
 8001f10:	08001f93 	.word	0x08001f93
 8001f14:	08001f93 	.word	0x08001f93
 8001f18:	08001f93 	.word	0x08001f93
 8001f1c:	08001f93 	.word	0x08001f93
 8001f20:	08001f93 	.word	0x08001f93
 8001f24:	08001f93 	.word	0x08001f93
 8001f28:	08001f41 	.word	0x08001f41
 8001f2c:	08001f55 	.word	0x08001f55
 8001f30:	4a79      	ldr	r2, [pc, #484]	; (8002118 <HAL_GPIO_Init+0x2b4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d013      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f36:	e02c      	b.n	8001f92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	623b      	str	r3, [r7, #32]
          break;
 8001f3e:	e029      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	3304      	adds	r3, #4
 8001f46:	623b      	str	r3, [r7, #32]
          break;
 8001f48:	e024      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	3308      	adds	r3, #8
 8001f50:	623b      	str	r3, [r7, #32]
          break;
 8001f52:	e01f      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	330c      	adds	r3, #12
 8001f5a:	623b      	str	r3, [r7, #32]
          break;
 8001f5c:	e01a      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d102      	bne.n	8001f6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f66:	2304      	movs	r3, #4
 8001f68:	623b      	str	r3, [r7, #32]
          break;
 8001f6a:	e013      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d105      	bne.n	8001f80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f74:	2308      	movs	r3, #8
 8001f76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	611a      	str	r2, [r3, #16]
          break;
 8001f7e:	e009      	b.n	8001f94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f80:	2308      	movs	r3, #8
 8001f82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	615a      	str	r2, [r3, #20]
          break;
 8001f8a:	e003      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	623b      	str	r3, [r7, #32]
          break;
 8001f90:	e000      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          break;
 8001f92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	2bff      	cmp	r3, #255	; 0xff
 8001f98:	d801      	bhi.n	8001f9e <HAL_GPIO_Init+0x13a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	e001      	b.n	8001fa2 <HAL_GPIO_Init+0x13e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2bff      	cmp	r3, #255	; 0xff
 8001fa8:	d802      	bhi.n	8001fb0 <HAL_GPIO_Init+0x14c>
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	e002      	b.n	8001fb6 <HAL_GPIO_Init+0x152>
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	3b08      	subs	r3, #8
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	210f      	movs	r1, #15
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	6a39      	ldr	r1, [r7, #32]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 80b1 	beq.w	8002146 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe4:	4b4d      	ldr	r3, [pc, #308]	; (800211c <HAL_GPIO_Init+0x2b8>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a4c      	ldr	r2, [pc, #304]	; (800211c <HAL_GPIO_Init+0x2b8>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b4a      	ldr	r3, [pc, #296]	; (800211c <HAL_GPIO_Init+0x2b8>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ffc:	4a48      	ldr	r2, [pc, #288]	; (8002120 <HAL_GPIO_Init+0x2bc>)
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	3302      	adds	r3, #2
 8002004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002008:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	220f      	movs	r2, #15
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4013      	ands	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a40      	ldr	r2, [pc, #256]	; (8002124 <HAL_GPIO_Init+0x2c0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d013      	beq.n	8002050 <HAL_GPIO_Init+0x1ec>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a3f      	ldr	r2, [pc, #252]	; (8002128 <HAL_GPIO_Init+0x2c4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00d      	beq.n	800204c <HAL_GPIO_Init+0x1e8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3e      	ldr	r2, [pc, #248]	; (800212c <HAL_GPIO_Init+0x2c8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d007      	beq.n	8002048 <HAL_GPIO_Init+0x1e4>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3d      	ldr	r2, [pc, #244]	; (8002130 <HAL_GPIO_Init+0x2cc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d101      	bne.n	8002044 <HAL_GPIO_Init+0x1e0>
 8002040:	2303      	movs	r3, #3
 8002042:	e006      	b.n	8002052 <HAL_GPIO_Init+0x1ee>
 8002044:	2304      	movs	r3, #4
 8002046:	e004      	b.n	8002052 <HAL_GPIO_Init+0x1ee>
 8002048:	2302      	movs	r3, #2
 800204a:	e002      	b.n	8002052 <HAL_GPIO_Init+0x1ee>
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <HAL_GPIO_Init+0x1ee>
 8002050:	2300      	movs	r3, #0
 8002052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002054:	f002 0203 	and.w	r2, r2, #3
 8002058:	0092      	lsls	r2, r2, #2
 800205a:	4093      	lsls	r3, r2
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002062:	492f      	ldr	r1, [pc, #188]	; (8002120 <HAL_GPIO_Init+0x2bc>)
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800207c:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	492c      	ldr	r1, [pc, #176]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	600b      	str	r3, [r1, #0]
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800208a:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	43db      	mvns	r3, r3
 8002092:	4928      	ldr	r1, [pc, #160]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 8002094:	4013      	ands	r3, r2
 8002096:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a4:	4b23      	ldr	r3, [pc, #140]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4922      	ldr	r1, [pc, #136]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	491e      	ldr	r1, [pc, #120]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020bc:	4013      	ands	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	4918      	ldr	r1, [pc, #96]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	608b      	str	r3, [r1, #8]
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4914      	ldr	r1, [pc, #80]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d021      	beq.n	8002138 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	490e      	ldr	r1, [pc, #56]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60cb      	str	r3, [r1, #12]
 8002100:	e021      	b.n	8002146 <HAL_GPIO_Init+0x2e2>
 8002102:	bf00      	nop
 8002104:	10320000 	.word	0x10320000
 8002108:	10310000 	.word	0x10310000
 800210c:	10220000 	.word	0x10220000
 8002110:	10210000 	.word	0x10210000
 8002114:	10120000 	.word	0x10120000
 8002118:	10110000 	.word	0x10110000
 800211c:	40021000 	.word	0x40021000
 8002120:	40010000 	.word	0x40010000
 8002124:	40010800 	.word	0x40010800
 8002128:	40010c00 	.word	0x40010c00
 800212c:	40011000 	.word	0x40011000
 8002130:	40011400 	.word	0x40011400
 8002134:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_GPIO_Init+0x304>)
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	43db      	mvns	r3, r3
 8002140:	4909      	ldr	r1, [pc, #36]	; (8002168 <HAL_GPIO_Init+0x304>)
 8002142:	4013      	ands	r3, r2
 8002144:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	3301      	adds	r3, #1
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	fa22 f303 	lsr.w	r3, r2, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	f47f ae8e 	bne.w	8001e78 <HAL_GPIO_Init+0x14>
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	372c      	adds	r7, #44	; 0x2c
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	40010400 	.word	0x40010400

0800216c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	887b      	ldrh	r3, [r7, #2]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	e001      	b.n	800218e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	807b      	strh	r3, [r7, #2]
 80021a6:	4613      	mov	r3, r2
 80021a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021aa:	787b      	ldrb	r3, [r7, #1]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b0:	887a      	ldrh	r2, [r7, #2]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021b6:	e003      	b.n	80021c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	041a      	lsls	r2, r3, #16
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	611a      	str	r2, [r3, #16]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e26c      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8087 	beq.w	80022fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ec:	4b92      	ldr	r3, [pc, #584]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d00c      	beq.n	8002212 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021f8:	4b8f      	ldr	r3, [pc, #572]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d112      	bne.n	800222a <HAL_RCC_OscConfig+0x5e>
 8002204:	4b8c      	ldr	r3, [pc, #560]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002210:	d10b      	bne.n	800222a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002212:	4b89      	ldr	r3, [pc, #548]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d06c      	beq.n	80022f8 <HAL_RCC_OscConfig+0x12c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d168      	bne.n	80022f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e246      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002232:	d106      	bne.n	8002242 <HAL_RCC_OscConfig+0x76>
 8002234:	4b80      	ldr	r3, [pc, #512]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a7f      	ldr	r2, [pc, #508]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800223a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e02e      	b.n	80022a0 <HAL_RCC_OscConfig+0xd4>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x98>
 800224a:	4b7b      	ldr	r3, [pc, #492]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7a      	ldr	r2, [pc, #488]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b78      	ldr	r3, [pc, #480]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a77      	ldr	r2, [pc, #476]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800225c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e01d      	b.n	80022a0 <HAL_RCC_OscConfig+0xd4>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0xbc>
 800226e:	4b72      	ldr	r3, [pc, #456]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a71      	ldr	r2, [pc, #452]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b6f      	ldr	r3, [pc, #444]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6e      	ldr	r2, [pc, #440]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xd4>
 8002288:	4b6b      	ldr	r3, [pc, #428]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a6a      	ldr	r2, [pc, #424]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b68      	ldr	r3, [pc, #416]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a67      	ldr	r2, [pc, #412]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fcc4 	bl	8001c34 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff fcc0 	bl	8001c34 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e1fa      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0xe4>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff fcb0 	bl	8001c34 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff fcac 	bl	8001c34 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1e6      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	4b53      	ldr	r3, [pc, #332]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x10c>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d063      	beq.n	80023ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002306:	4b4c      	ldr	r3, [pc, #304]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002312:	4b49      	ldr	r3, [pc, #292]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b08      	cmp	r3, #8
 800231c:	d11c      	bne.n	8002358 <HAL_RCC_OscConfig+0x18c>
 800231e:	4b46      	ldr	r3, [pc, #280]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d116      	bne.n	8002358 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	4b43      	ldr	r3, [pc, #268]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_RCC_OscConfig+0x176>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e1ba      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4939      	ldr	r1, [pc, #228]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	e03a      	b.n	80023ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002360:	4b36      	ldr	r3, [pc, #216]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7ff fc65 	bl	8001c34 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236e:	f7ff fc61 	bl	8001c34 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e19b      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002380:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4927      	ldr	r1, [pc, #156]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
 80023a0:	e015      	b.n	80023ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <HAL_RCC_OscConfig+0x270>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7ff fc44 	bl	8001c34 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b0:	f7ff fc40 	bl	8001c34 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e17a      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d03a      	beq.n	8002450 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d019      	beq.n	8002416 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e2:	4b17      	ldr	r3, [pc, #92]	; (8002440 <HAL_RCC_OscConfig+0x274>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e8:	f7ff fc24 	bl	8001c34 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f0:	f7ff fc20 	bl	8001c34 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e15a      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800240e:	2001      	movs	r0, #1
 8002410:	f000 fad8 	bl	80029c4 <RCC_Delay>
 8002414:	e01c      	b.n	8002450 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_RCC_OscConfig+0x274>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7ff fc0a 	bl	8001c34 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002422:	e00f      	b.n	8002444 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002424:	f7ff fc06 	bl	8001c34 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d908      	bls.n	8002444 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e140      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	42420000 	.word	0x42420000
 8002440:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002444:	4b9e      	ldr	r3, [pc, #632]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1e9      	bne.n	8002424 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80a6 	beq.w	80025aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002462:	4b97      	ldr	r3, [pc, #604]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10d      	bne.n	800248a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246e:	4b94      	ldr	r3, [pc, #592]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a93      	ldr	r2, [pc, #588]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002478:	61d3      	str	r3, [r2, #28]
 800247a:	4b91      	ldr	r3, [pc, #580]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002486:	2301      	movs	r3, #1
 8002488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248a:	4b8e      	ldr	r3, [pc, #568]	; (80026c4 <HAL_RCC_OscConfig+0x4f8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d118      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002496:	4b8b      	ldr	r3, [pc, #556]	; (80026c4 <HAL_RCC_OscConfig+0x4f8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a8a      	ldr	r2, [pc, #552]	; (80026c4 <HAL_RCC_OscConfig+0x4f8>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a2:	f7ff fbc7 	bl	8001c34 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024aa:	f7ff fbc3 	bl	8001c34 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b64      	cmp	r3, #100	; 0x64
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e0fd      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	4b81      	ldr	r3, [pc, #516]	; (80026c4 <HAL_RCC_OscConfig+0x4f8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x312>
 80024d0:	4b7b      	ldr	r3, [pc, #492]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4a7a      	ldr	r2, [pc, #488]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6213      	str	r3, [r2, #32]
 80024dc:	e02d      	b.n	800253a <HAL_RCC_OscConfig+0x36e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x334>
 80024e6:	4b76      	ldr	r3, [pc, #472]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a75      	ldr	r2, [pc, #468]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	6213      	str	r3, [r2, #32]
 80024f2:	4b73      	ldr	r3, [pc, #460]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a72      	ldr	r2, [pc, #456]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	6213      	str	r3, [r2, #32]
 80024fe:	e01c      	b.n	800253a <HAL_RCC_OscConfig+0x36e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b05      	cmp	r3, #5
 8002506:	d10c      	bne.n	8002522 <HAL_RCC_OscConfig+0x356>
 8002508:	4b6d      	ldr	r3, [pc, #436]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4a6c      	ldr	r2, [pc, #432]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	6213      	str	r3, [r2, #32]
 8002514:	4b6a      	ldr	r3, [pc, #424]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4a69      	ldr	r2, [pc, #420]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6213      	str	r3, [r2, #32]
 8002520:	e00b      	b.n	800253a <HAL_RCC_OscConfig+0x36e>
 8002522:	4b67      	ldr	r3, [pc, #412]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a66      	ldr	r2, [pc, #408]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	6213      	str	r3, [r2, #32]
 800252e:	4b64      	ldr	r3, [pc, #400]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a63      	ldr	r2, [pc, #396]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	f023 0304 	bic.w	r3, r3, #4
 8002538:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d015      	beq.n	800256e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002542:	f7ff fb77 	bl	8001c34 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002548:	e00a      	b.n	8002560 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f7ff fb73 	bl	8001c34 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f241 3288 	movw	r2, #5000	; 0x1388
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e0ab      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	4b57      	ldr	r3, [pc, #348]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ee      	beq.n	800254a <HAL_RCC_OscConfig+0x37e>
 800256c:	e014      	b.n	8002598 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7ff fb61 	bl	8001c34 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7ff fb5d 	bl	8001c34 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e095      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258c:	4b4c      	ldr	r3, [pc, #304]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ee      	bne.n	8002576 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d105      	bne.n	80025aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259e:	4b48      	ldr	r3, [pc, #288]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4a47      	ldr	r2, [pc, #284]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8081 	beq.w	80026b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b4:	4b42      	ldr	r3, [pc, #264]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 030c 	and.w	r3, r3, #12
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d061      	beq.n	8002684 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d146      	bne.n	8002656 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c8:	4b3f      	ldr	r3, [pc, #252]	; (80026c8 <HAL_RCC_OscConfig+0x4fc>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7ff fb31 	bl	8001c34 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d6:	f7ff fb2d 	bl	8001c34 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e067      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e8:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fc:	d108      	bne.n	8002610 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025fe:	4b30      	ldr	r3, [pc, #192]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	492d      	ldr	r1, [pc, #180]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a19      	ldr	r1, [r3, #32]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	430b      	orrs	r3, r1
 8002622:	4927      	ldr	r1, [pc, #156]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <HAL_RCC_OscConfig+0x4fc>)
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7ff fb01 	bl	8001c34 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002636:	f7ff fafd 	bl	8001c34 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e037      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002648:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x46a>
 8002654:	e02f      	b.n	80026b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002656:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <HAL_RCC_OscConfig+0x4fc>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff faea 	bl	8001c34 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002664:	f7ff fae6 	bl	8001c34 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e020      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x498>
 8002682:	e018      	b.n	80026b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e013      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40007000 	.word	0x40007000
 80026c8:	42420060 	.word	0x42420060

080026cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0d0      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e0:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d910      	bls.n	8002710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b67      	ldr	r3, [pc, #412]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0207 	bic.w	r2, r3, #7
 80026f6:	4965      	ldr	r1, [pc, #404]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b63      	ldr	r3, [pc, #396]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0b8      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d020      	beq.n	800275e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002728:	4b59      	ldr	r3, [pc, #356]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4a58      	ldr	r2, [pc, #352]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002732:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002740:	4b53      	ldr	r3, [pc, #332]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4a52      	ldr	r2, [pc, #328]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800274a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800274c:	4b50      	ldr	r3, [pc, #320]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	494d      	ldr	r1, [pc, #308]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d040      	beq.n	80027ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b47      	ldr	r3, [pc, #284]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d115      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e07f      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278a:	4b41      	ldr	r3, [pc, #260]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e073      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279a:	4b3d      	ldr	r3, [pc, #244]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e06b      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027aa:	4b39      	ldr	r3, [pc, #228]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f023 0203 	bic.w	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4936      	ldr	r1, [pc, #216]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027bc:	f7ff fa3a 	bl	8001c34 <HAL_GetTick>
 80027c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	e00a      	b.n	80027da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c4:	f7ff fa36 	bl	8001c34 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e053      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027da:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 020c 	and.w	r2, r3, #12
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d1eb      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ec:	4b27      	ldr	r3, [pc, #156]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d210      	bcs.n	800281c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 0207 	bic.w	r2, r3, #7
 8002802:	4922      	ldr	r1, [pc, #136]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e032      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4916      	ldr	r1, [pc, #88]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	490e      	ldr	r1, [pc, #56]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800285a:	f000 f821 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 800285e:	4602      	mov	r2, r0
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	490a      	ldr	r1, [pc, #40]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800286c:	5ccb      	ldrb	r3, [r1, r3]
 800286e:	fa22 f303 	lsr.w	r3, r2, r3
 8002872:	4a09      	ldr	r2, [pc, #36]	; (8002898 <HAL_RCC_ClockConfig+0x1cc>)
 8002874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <HAL_RCC_ClockConfig+0x1d0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff f998 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40022000 	.word	0x40022000
 8002890:	40021000 	.word	0x40021000
 8002894:	080045a4 	.word	0x080045a4
 8002898:	20000020 	.word	0x20000020
 800289c:	20000024 	.word	0x20000024

080028a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a0:	b490      	push	{r4, r7}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028a6:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028a8:	1d3c      	adds	r4, r7, #4
 80028aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028b0:	f240 2301 	movw	r3, #513	; 0x201
 80028b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028ca:	4b22      	ldr	r3, [pc, #136]	; (8002954 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x40>
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0x46>
 80028de:	e02d      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e2:	623b      	str	r3, [r7, #32]
      break;
 80028e4:	e02d      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	0c9b      	lsrs	r3, r3, #18
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028f2:	4413      	add	r3, r2
 80028f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	0c5b      	lsrs	r3, r3, #17
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002912:	4413      	add	r3, r2
 8002914:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002918:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 800291e:	fb02 f203 	mul.w	r2, r2, r3
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
 800292a:	e004      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	4a0b      	ldr	r2, [pc, #44]	; (800295c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	623b      	str	r3, [r7, #32]
      break;
 800293a:	e002      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 800293e:	623b      	str	r3, [r7, #32]
      break;
 8002940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002942:	6a3b      	ldr	r3, [r7, #32]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3728      	adds	r7, #40	; 0x28
 8002948:	46bd      	mov	sp, r7
 800294a:	bc90      	pop	{r4, r7}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	08004594 	.word	0x08004594
 8002954:	40021000 	.word	0x40021000
 8002958:	007a1200 	.word	0x007a1200
 800295c:	003d0900 	.word	0x003d0900

08002960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002964:	4b02      	ldr	r3, [pc, #8]	; (8002970 <HAL_RCC_GetHCLKFreq+0x10>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	20000020 	.word	0x20000020

08002974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002978:	f7ff fff2 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 800297c:	4602      	mov	r2, r0
 800297e:	4b05      	ldr	r3, [pc, #20]	; (8002994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	4903      	ldr	r1, [pc, #12]	; (8002998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800298a:	5ccb      	ldrb	r3, [r1, r3]
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002990:	4618      	mov	r0, r3
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	080045b4 	.word	0x080045b4

0800299c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029a0:	f7ff ffde 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	0adb      	lsrs	r3, r3, #11
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	4903      	ldr	r1, [pc, #12]	; (80029c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	080045b4 	.word	0x080045b4

080029c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <RCC_Delay+0x34>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <RCC_Delay+0x38>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	0a5b      	lsrs	r3, r3, #9
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029e0:	bf00      	nop
  }
  while (Delay --);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	60fa      	str	r2, [r7, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f9      	bne.n	80029e0 <RCC_Delay+0x1c>
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	20000020 	.word	0x20000020
 80029fc:	10624dd3 	.word	0x10624dd3

08002a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e041      	b.n	8002a96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fe ff08 	bl	800183c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f000 fc28 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d001      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e03a      	b.n	8002b2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_TIM_Base_Start_IT+0x98>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00e      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x58>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae2:	d009      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x58>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <HAL_TIM_Base_Start_IT+0x9c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d004      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x58>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <HAL_TIM_Base_Start_IT+0xa0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d111      	bne.n	8002b1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b06      	cmp	r3, #6
 8002b08:	d010      	beq.n	8002b2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1a:	e007      	b.n	8002b2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	40012c00 	.word	0x40012c00
 8002b3c:	40000400 	.word	0x40000400
 8002b40:	40000800 	.word	0x40000800

08002b44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e041      	b.n	8002bda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f839 	bl	8002be2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	4619      	mov	r1, r3
 8002b82:	4610      	mov	r0, r2
 8002b84:	f000 fb86 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <HAL_TIM_PWM_Start+0x24>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	bf14      	ite	ne
 8002c10:	2301      	movne	r3, #1
 8002c12:	2300      	moveq	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e022      	b.n	8002c5e <HAL_TIM_PWM_Start+0x6a>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d109      	bne.n	8002c32 <HAL_TIM_PWM_Start+0x3e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	bf14      	ite	ne
 8002c2a:	2301      	movne	r3, #1
 8002c2c:	2300      	moveq	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	e015      	b.n	8002c5e <HAL_TIM_PWM_Start+0x6a>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d109      	bne.n	8002c4c <HAL_TIM_PWM_Start+0x58>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e008      	b.n	8002c5e <HAL_TIM_PWM_Start+0x6a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	bf14      	ite	ne
 8002c58:	2301      	movne	r3, #1
 8002c5a:	2300      	moveq	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e05e      	b.n	8002d24 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <HAL_TIM_PWM_Start+0x82>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c74:	e013      	b.n	8002c9e <HAL_TIM_PWM_Start+0xaa>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d104      	bne.n	8002c86 <HAL_TIM_PWM_Start+0x92>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c84:	e00b      	b.n	8002c9e <HAL_TIM_PWM_Start+0xaa>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d104      	bne.n	8002c96 <HAL_TIM_PWM_Start+0xa2>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c94:	e003      	b.n	8002c9e <HAL_TIM_PWM_Start+0xaa>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	6839      	ldr	r1, [r7, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fd74 	bl	8003794 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <HAL_TIM_PWM_Start+0x138>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d107      	bne.n	8002cc6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a18      	ldr	r2, [pc, #96]	; (8002d2c <HAL_TIM_PWM_Start+0x138>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00e      	beq.n	8002cee <HAL_TIM_PWM_Start+0xfa>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd8:	d009      	beq.n	8002cee <HAL_TIM_PWM_Start+0xfa>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a14      	ldr	r2, [pc, #80]	; (8002d30 <HAL_TIM_PWM_Start+0x13c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d004      	beq.n	8002cee <HAL_TIM_PWM_Start+0xfa>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <HAL_TIM_PWM_Start+0x140>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d111      	bne.n	8002d12 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2b06      	cmp	r3, #6
 8002cfe:	d010      	beq.n	8002d22 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d10:	e007      	b.n	8002d22 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40012c00 	.word	0x40012c00
 8002d30:	40000400 	.word	0x40000400
 8002d34:	40000800 	.word	0x40000800

08002d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d122      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d11b      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0202 	mvn.w	r2, #2
 8002d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fa6f 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fa62 	bl	800324c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fa71 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d122      	bne.n	8002de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d11b      	bne.n	8002de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0204 	mvn.w	r2, #4
 8002db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fa45 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa38 	bl	800324c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fa47 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d122      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d11b      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0208 	mvn.w	r2, #8
 8002e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2204      	movs	r2, #4
 8002e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fa1b 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 8002e28:	e005      	b.n	8002e36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fa0e 	bl	800324c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fa1d 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d122      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b10      	cmp	r3, #16
 8002e56:	d11b      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0210 	mvn.w	r2, #16
 8002e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2208      	movs	r2, #8
 8002e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f9f1 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 8002e7c:	e005      	b.n	8002e8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f9e4 	bl	800324c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f9f3 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d10e      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d107      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0201 	mvn.w	r2, #1
 8002eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fe face 	bl	8001458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec6:	2b80      	cmp	r3, #128	; 0x80
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed4:	2b80      	cmp	r3, #128	; 0x80
 8002ed6:	d107      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fce1 	bl	80038aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	2b40      	cmp	r3, #64	; 0x40
 8002ef4:	d10e      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d107      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f9b7 	bl	8003282 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d10e      	bne.n	8002f40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d107      	bne.n	8002f40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0220 	mvn.w	r2, #32
 8002f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fcac 	bl	8003898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e0ac      	b.n	80030bc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b0c      	cmp	r3, #12
 8002f6e:	f200 809f 	bhi.w	80030b0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002f72:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f78:	08002fad 	.word	0x08002fad
 8002f7c:	080030b1 	.word	0x080030b1
 8002f80:	080030b1 	.word	0x080030b1
 8002f84:	080030b1 	.word	0x080030b1
 8002f88:	08002fed 	.word	0x08002fed
 8002f8c:	080030b1 	.word	0x080030b1
 8002f90:	080030b1 	.word	0x080030b1
 8002f94:	080030b1 	.word	0x080030b1
 8002f98:	0800302f 	.word	0x0800302f
 8002f9c:	080030b1 	.word	0x080030b1
 8002fa0:	080030b1 	.word	0x080030b1
 8002fa4:	080030b1 	.word	0x080030b1
 8002fa8:	0800306f 	.word	0x0800306f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f9d0 	bl	8003358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0208 	orr.w	r2, r2, #8
 8002fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0204 	bic.w	r2, r2, #4
 8002fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6999      	ldr	r1, [r3, #24]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	619a      	str	r2, [r3, #24]
      break;
 8002fea:	e062      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fa16 	bl	8003424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6999      	ldr	r1, [r3, #24]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	021a      	lsls	r2, r3, #8
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	619a      	str	r2, [r3, #24]
      break;
 800302c:	e041      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fa5f 	bl	80034f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0208 	orr.w	r2, r2, #8
 8003048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0204 	bic.w	r2, r2, #4
 8003058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69d9      	ldr	r1, [r3, #28]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	61da      	str	r2, [r3, #28]
      break;
 800306c:	e021      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	4618      	mov	r0, r3
 8003076:	f000 faa9 	bl	80035cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69da      	ldr	r2, [r3, #28]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69da      	ldr	r2, [r3, #28]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69d9      	ldr	r1, [r3, #28]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	021a      	lsls	r2, r3, #8
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	61da      	str	r2, [r3, #28]
      break;
 80030ae:	e000      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80030b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_TIM_ConfigClockSource+0x18>
 80030d8:	2302      	movs	r3, #2
 80030da:	e0b3      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x180>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003102:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003114:	d03e      	beq.n	8003194 <HAL_TIM_ConfigClockSource+0xd0>
 8003116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311a:	f200 8087 	bhi.w	800322c <HAL_TIM_ConfigClockSource+0x168>
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	f000 8085 	beq.w	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312a:	d87f      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x168>
 800312c:	2b70      	cmp	r3, #112	; 0x70
 800312e:	d01a      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0xa2>
 8003130:	2b70      	cmp	r3, #112	; 0x70
 8003132:	d87b      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x168>
 8003134:	2b60      	cmp	r3, #96	; 0x60
 8003136:	d050      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x116>
 8003138:	2b60      	cmp	r3, #96	; 0x60
 800313a:	d877      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x168>
 800313c:	2b50      	cmp	r3, #80	; 0x50
 800313e:	d03c      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0xf6>
 8003140:	2b50      	cmp	r3, #80	; 0x50
 8003142:	d873      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x168>
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d058      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x136>
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	d86f      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x168>
 800314c:	2b30      	cmp	r3, #48	; 0x30
 800314e:	d064      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x156>
 8003150:	2b30      	cmp	r3, #48	; 0x30
 8003152:	d86b      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x168>
 8003154:	2b20      	cmp	r3, #32
 8003156:	d060      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x156>
 8003158:	2b20      	cmp	r3, #32
 800315a:	d867      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x168>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d05c      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x156>
 8003160:	2b10      	cmp	r3, #16
 8003162:	d05a      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003164:	e062      	b.n	800322c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6899      	ldr	r1, [r3, #8]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f000 faee 	bl	8003756 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003188:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	609a      	str	r2, [r3, #8]
      break;
 8003192:	e04e      	b.n	8003232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f000 fad7 	bl	8003756 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b6:	609a      	str	r2, [r3, #8]
      break;
 80031b8:	e03b      	b.n	8003232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6859      	ldr	r1, [r3, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f000 fa4e 	bl	8003668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2150      	movs	r1, #80	; 0x50
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 faa5 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 80031d8:	e02b      	b.n	8003232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6859      	ldr	r1, [r3, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	461a      	mov	r2, r3
 80031e8:	f000 fa6c 	bl	80036c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2160      	movs	r1, #96	; 0x60
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fa95 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 80031f8:	e01b      	b.n	8003232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6859      	ldr	r1, [r3, #4]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	461a      	mov	r2, r3
 8003208:	f000 fa2e 	bl	8003668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2140      	movs	r1, #64	; 0x40
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fa85 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 8003218:	e00b      	b.n	8003232 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f000 fa7c 	bl	8003722 <TIM_ITRx_SetConfig>
        break;
 800322a:	e002      	b.n	8003232 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800322c:	bf00      	nop
 800322e:	e000      	b.n	8003232 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003230:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr

0800325e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr

08003270 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr

08003282 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a29      	ldr	r2, [pc, #164]	; (800334c <TIM_Base_SetConfig+0xb8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <TIM_Base_SetConfig+0x30>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b2:	d007      	beq.n	80032c4 <TIM_Base_SetConfig+0x30>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a26      	ldr	r2, [pc, #152]	; (8003350 <TIM_Base_SetConfig+0xbc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_Base_SetConfig+0x30>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a25      	ldr	r2, [pc, #148]	; (8003354 <TIM_Base_SetConfig+0xc0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d108      	bne.n	80032d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1c      	ldr	r2, [pc, #112]	; (800334c <TIM_Base_SetConfig+0xb8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00b      	beq.n	80032f6 <TIM_Base_SetConfig+0x62>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d007      	beq.n	80032f6 <TIM_Base_SetConfig+0x62>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a19      	ldr	r2, [pc, #100]	; (8003350 <TIM_Base_SetConfig+0xbc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d003      	beq.n	80032f6 <TIM_Base_SetConfig+0x62>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a18      	ldr	r2, [pc, #96]	; (8003354 <TIM_Base_SetConfig+0xc0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d108      	bne.n	8003308 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a07      	ldr	r2, [pc, #28]	; (800334c <TIM_Base_SetConfig+0xb8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d103      	bne.n	800333c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	615a      	str	r2, [r3, #20]
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	40012c00 	.word	0x40012c00
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800

08003358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0303 	bic.w	r3, r3, #3
 800338e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f023 0302 	bic.w	r3, r3, #2
 80033a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <TIM_OC1_SetConfig+0xc8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d10c      	bne.n	80033ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0308 	bic.w	r3, r3, #8
 80033ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a13      	ldr	r2, [pc, #76]	; (8003420 <TIM_OC1_SetConfig+0xc8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d111      	bne.n	80033fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	621a      	str	r2, [r3, #32]
}
 8003414:	bf00      	nop
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40012c00 	.word	0x40012c00

08003424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	f023 0210 	bic.w	r2, r3, #16
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4313      	orrs	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f023 0320 	bic.w	r3, r3, #32
 800346e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <TIM_OC2_SetConfig+0xd0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d10d      	bne.n	80034a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800348a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800349e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <TIM_OC2_SetConfig+0xd0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d113      	bne.n	80034d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	621a      	str	r2, [r3, #32]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	40012c00 	.word	0x40012c00

080034f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0303 	bic.w	r3, r3, #3
 800352e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <TIM_OC3_SetConfig+0xd0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10d      	bne.n	8003572 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800355c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <TIM_OC3_SetConfig+0xd0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d113      	bne.n	80035a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	621a      	str	r2, [r3, #32]
}
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40012c00 	.word	0x40012c00

080035cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	021b      	lsls	r3, r3, #8
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	031b      	lsls	r3, r3, #12
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <TIM_OC4_SetConfig+0x98>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d109      	bne.n	8003640 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	019b      	lsls	r3, r3, #6
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	621a      	str	r2, [r3, #32]
}
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00

08003668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f023 0201 	bic.w	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f023 030a 	bic.w	r3, r3, #10
 80036a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	621a      	str	r2, [r3, #32]
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f023 0210 	bic.w	r2, r3, #16
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	031b      	lsls	r3, r3, #12
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003700:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	621a      	str	r2, [r3, #32]
}
 8003718:	bf00      	nop
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr

08003722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	f043 0307 	orr.w	r3, r3, #7
 8003744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr

08003756 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003756:	b480      	push	{r7}
 8003758:	b087      	sub	sp, #28
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003770:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	021a      	lsls	r2, r3, #8
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	431a      	orrs	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	4313      	orrs	r3, r2
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	609a      	str	r2, [r3, #8]
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	2201      	movs	r2, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a1a      	ldr	r2, [r3, #32]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	401a      	ands	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a1a      	ldr	r2, [r3, #32]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	fa01 f303 	lsl.w	r3, r1, r3
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	621a      	str	r2, [r3, #32]
}
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e046      	b.n	8003882 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a16      	ldr	r2, [pc, #88]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00e      	beq.n	8003856 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003840:	d009      	beq.n	8003856 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a12      	ldr	r2, [pc, #72]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d004      	beq.n	8003856 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a10      	ldr	r2, [pc, #64]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d10c      	bne.n	8003870 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800385c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	4313      	orrs	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40000400 	.word	0x40000400
 8003894:	40000800 	.word	0x40000800

08003898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr

080038aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e03f      	b.n	800394e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fe f814 	bl	8001910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	; 0x24
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f905 	bl	8003b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003914:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003924:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003934:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b08a      	sub	sp, #40	; 0x28
 800395a:	af02      	add	r7, sp, #8
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	4613      	mov	r3, r2
 8003964:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b20      	cmp	r3, #32
 8003974:	d17c      	bne.n	8003a70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_UART_Transmit+0x2c>
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e075      	b.n	8003a72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_UART_Transmit+0x3e>
 8003990:	2302      	movs	r3, #2
 8003992:	e06e      	b.n	8003a72 <HAL_UART_Transmit+0x11c>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2221      	movs	r2, #33	; 0x21
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039aa:	f7fe f943 	bl	8001c34 <HAL_GetTick>
 80039ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	88fa      	ldrh	r2, [r7, #6]
 80039b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	88fa      	ldrh	r2, [r7, #6]
 80039ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c4:	d108      	bne.n	80039d8 <HAL_UART_Transmit+0x82>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d104      	bne.n	80039d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	e003      	b.n	80039e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039e8:	e02a      	b.n	8003a40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2200      	movs	r2, #0
 80039f2:	2180      	movs	r1, #128	; 0x80
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f840 	bl	8003a7a <UART_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e036      	b.n	8003a72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10b      	bne.n	8003a22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	e007      	b.n	8003a32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	781a      	ldrb	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1cf      	bne.n	80039ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2200      	movs	r2, #0
 8003a52:	2140      	movs	r1, #64	; 0x40
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f810 	bl	8003a7a <UART_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e006      	b.n	8003a72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e000      	b.n	8003a72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
  }
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3720      	adds	r7, #32
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	4613      	mov	r3, r2
 8003a88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a8a:	e02c      	b.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d028      	beq.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d007      	beq.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x30>
 8003a9a:	f7fe f8cb 	bl	8001c34 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d21d      	bcs.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ab8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e00f      	b.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4013      	ands	r3, r2
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	bf0c      	ite	eq
 8003af6:	2301      	moveq	r3, #1
 8003af8:	2300      	movne	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d0c3      	beq.n	8003a8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b4a:	f023 030c 	bic.w	r3, r3, #12
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	430b      	orrs	r3, r1
 8003b56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2c      	ldr	r2, [pc, #176]	; (8003c24 <UART_SetConfig+0x114>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d103      	bne.n	8003b80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b78:	f7fe ff10 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	e002      	b.n	8003b86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7fe fef8 	bl	8002974 <HAL_RCC_GetPCLK1Freq>
 8003b84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009a      	lsls	r2, r3, #2
 8003b90:	441a      	add	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	4a22      	ldr	r2, [pc, #136]	; (8003c28 <UART_SetConfig+0x118>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	0119      	lsls	r1, r3, #4
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	009a      	lsls	r2, r3, #2
 8003bb0:	441a      	add	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <UART_SetConfig+0x118>)
 8003bbe:	fba3 0302 	umull	r0, r3, r3, r2
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	2064      	movs	r0, #100	; 0x64
 8003bc6:	fb00 f303 	mul.w	r3, r0, r3
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	3332      	adds	r3, #50	; 0x32
 8003bd0:	4a15      	ldr	r2, [pc, #84]	; (8003c28 <UART_SetConfig+0x118>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bdc:	4419      	add	r1, r3
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009a      	lsls	r2, r3, #2
 8003be8:	441a      	add	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <UART_SetConfig+0x118>)
 8003bf6:	fba3 0302 	umull	r0, r3, r3, r2
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	2064      	movs	r0, #100	; 0x64
 8003bfe:	fb00 f303 	mul.w	r3, r0, r3
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	3332      	adds	r3, #50	; 0x32
 8003c08:	4a07      	ldr	r2, [pc, #28]	; (8003c28 <UART_SetConfig+0x118>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	f003 020f 	and.w	r2, r3, #15
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	440a      	add	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40013800 	.word	0x40013800
 8003c28:	51eb851f 	.word	0x51eb851f

08003c2c <__errno>:
 8003c2c:	4b01      	ldr	r3, [pc, #4]	; (8003c34 <__errno+0x8>)
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	2000002c 	.word	0x2000002c

08003c38 <__libc_init_array>:
 8003c38:	b570      	push	{r4, r5, r6, lr}
 8003c3a:	2600      	movs	r6, #0
 8003c3c:	4d0c      	ldr	r5, [pc, #48]	; (8003c70 <__libc_init_array+0x38>)
 8003c3e:	4c0d      	ldr	r4, [pc, #52]	; (8003c74 <__libc_init_array+0x3c>)
 8003c40:	1b64      	subs	r4, r4, r5
 8003c42:	10a4      	asrs	r4, r4, #2
 8003c44:	42a6      	cmp	r6, r4
 8003c46:	d109      	bne.n	8003c5c <__libc_init_array+0x24>
 8003c48:	f000 fc5c 	bl	8004504 <_init>
 8003c4c:	2600      	movs	r6, #0
 8003c4e:	4d0a      	ldr	r5, [pc, #40]	; (8003c78 <__libc_init_array+0x40>)
 8003c50:	4c0a      	ldr	r4, [pc, #40]	; (8003c7c <__libc_init_array+0x44>)
 8003c52:	1b64      	subs	r4, r4, r5
 8003c54:	10a4      	asrs	r4, r4, #2
 8003c56:	42a6      	cmp	r6, r4
 8003c58:	d105      	bne.n	8003c66 <__libc_init_array+0x2e>
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}
 8003c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c60:	4798      	blx	r3
 8003c62:	3601      	adds	r6, #1
 8003c64:	e7ee      	b.n	8003c44 <__libc_init_array+0xc>
 8003c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c6a:	4798      	blx	r3
 8003c6c:	3601      	adds	r6, #1
 8003c6e:	e7f2      	b.n	8003c56 <__libc_init_array+0x1e>
 8003c70:	080045f0 	.word	0x080045f0
 8003c74:	080045f0 	.word	0x080045f0
 8003c78:	080045f0 	.word	0x080045f0
 8003c7c:	080045f4 	.word	0x080045f4

08003c80 <memset>:
 8003c80:	4603      	mov	r3, r0
 8003c82:	4402      	add	r2, r0
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d100      	bne.n	8003c8a <memset+0xa>
 8003c88:	4770      	bx	lr
 8003c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c8e:	e7f9      	b.n	8003c84 <memset+0x4>

08003c90 <siprintf>:
 8003c90:	b40e      	push	{r1, r2, r3}
 8003c92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c96:	b500      	push	{lr}
 8003c98:	b09c      	sub	sp, #112	; 0x70
 8003c9a:	ab1d      	add	r3, sp, #116	; 0x74
 8003c9c:	9002      	str	r0, [sp, #8]
 8003c9e:	9006      	str	r0, [sp, #24]
 8003ca0:	9107      	str	r1, [sp, #28]
 8003ca2:	9104      	str	r1, [sp, #16]
 8003ca4:	4808      	ldr	r0, [pc, #32]	; (8003cc8 <siprintf+0x38>)
 8003ca6:	4909      	ldr	r1, [pc, #36]	; (8003ccc <siprintf+0x3c>)
 8003ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cac:	9105      	str	r1, [sp, #20]
 8003cae:	6800      	ldr	r0, [r0, #0]
 8003cb0:	a902      	add	r1, sp, #8
 8003cb2:	9301      	str	r3, [sp, #4]
 8003cb4:	f000 f868 	bl	8003d88 <_svfiprintf_r>
 8003cb8:	2200      	movs	r2, #0
 8003cba:	9b02      	ldr	r3, [sp, #8]
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	b01c      	add	sp, #112	; 0x70
 8003cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cc4:	b003      	add	sp, #12
 8003cc6:	4770      	bx	lr
 8003cc8:	2000002c 	.word	0x2000002c
 8003ccc:	ffff0208 	.word	0xffff0208

08003cd0 <__ssputs_r>:
 8003cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd4:	688e      	ldr	r6, [r1, #8]
 8003cd6:	4682      	mov	sl, r0
 8003cd8:	429e      	cmp	r6, r3
 8003cda:	460c      	mov	r4, r1
 8003cdc:	4690      	mov	r8, r2
 8003cde:	461f      	mov	r7, r3
 8003ce0:	d838      	bhi.n	8003d54 <__ssputs_r+0x84>
 8003ce2:	898a      	ldrh	r2, [r1, #12]
 8003ce4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ce8:	d032      	beq.n	8003d50 <__ssputs_r+0x80>
 8003cea:	6825      	ldr	r5, [r4, #0]
 8003cec:	6909      	ldr	r1, [r1, #16]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	eba5 0901 	sub.w	r9, r5, r1
 8003cf4:	6965      	ldr	r5, [r4, #20]
 8003cf6:	444b      	add	r3, r9
 8003cf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d00:	106d      	asrs	r5, r5, #1
 8003d02:	429d      	cmp	r5, r3
 8003d04:	bf38      	it	cc
 8003d06:	461d      	movcc	r5, r3
 8003d08:	0553      	lsls	r3, r2, #21
 8003d0a:	d531      	bpl.n	8003d70 <__ssputs_r+0xa0>
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	f000 fb53 	bl	80043b8 <_malloc_r>
 8003d12:	4606      	mov	r6, r0
 8003d14:	b950      	cbnz	r0, 8003d2c <__ssputs_r+0x5c>
 8003d16:	230c      	movs	r3, #12
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1c:	f8ca 3000 	str.w	r3, [sl]
 8003d20:	89a3      	ldrh	r3, [r4, #12]
 8003d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d26:	81a3      	strh	r3, [r4, #12]
 8003d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2c:	464a      	mov	r2, r9
 8003d2e:	6921      	ldr	r1, [r4, #16]
 8003d30:	f000 face 	bl	80042d0 <memcpy>
 8003d34:	89a3      	ldrh	r3, [r4, #12]
 8003d36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3e:	81a3      	strh	r3, [r4, #12]
 8003d40:	6126      	str	r6, [r4, #16]
 8003d42:	444e      	add	r6, r9
 8003d44:	6026      	str	r6, [r4, #0]
 8003d46:	463e      	mov	r6, r7
 8003d48:	6165      	str	r5, [r4, #20]
 8003d4a:	eba5 0509 	sub.w	r5, r5, r9
 8003d4e:	60a5      	str	r5, [r4, #8]
 8003d50:	42be      	cmp	r6, r7
 8003d52:	d900      	bls.n	8003d56 <__ssputs_r+0x86>
 8003d54:	463e      	mov	r6, r7
 8003d56:	4632      	mov	r2, r6
 8003d58:	4641      	mov	r1, r8
 8003d5a:	6820      	ldr	r0, [r4, #0]
 8003d5c:	f000 fac6 	bl	80042ec <memmove>
 8003d60:	68a3      	ldr	r3, [r4, #8]
 8003d62:	6822      	ldr	r2, [r4, #0]
 8003d64:	1b9b      	subs	r3, r3, r6
 8003d66:	4432      	add	r2, r6
 8003d68:	2000      	movs	r0, #0
 8003d6a:	60a3      	str	r3, [r4, #8]
 8003d6c:	6022      	str	r2, [r4, #0]
 8003d6e:	e7db      	b.n	8003d28 <__ssputs_r+0x58>
 8003d70:	462a      	mov	r2, r5
 8003d72:	f000 fb7b 	bl	800446c <_realloc_r>
 8003d76:	4606      	mov	r6, r0
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d1e1      	bne.n	8003d40 <__ssputs_r+0x70>
 8003d7c:	4650      	mov	r0, sl
 8003d7e:	6921      	ldr	r1, [r4, #16]
 8003d80:	f000 face 	bl	8004320 <_free_r>
 8003d84:	e7c7      	b.n	8003d16 <__ssputs_r+0x46>
	...

08003d88 <_svfiprintf_r>:
 8003d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d8c:	4698      	mov	r8, r3
 8003d8e:	898b      	ldrh	r3, [r1, #12]
 8003d90:	4607      	mov	r7, r0
 8003d92:	061b      	lsls	r3, r3, #24
 8003d94:	460d      	mov	r5, r1
 8003d96:	4614      	mov	r4, r2
 8003d98:	b09d      	sub	sp, #116	; 0x74
 8003d9a:	d50e      	bpl.n	8003dba <_svfiprintf_r+0x32>
 8003d9c:	690b      	ldr	r3, [r1, #16]
 8003d9e:	b963      	cbnz	r3, 8003dba <_svfiprintf_r+0x32>
 8003da0:	2140      	movs	r1, #64	; 0x40
 8003da2:	f000 fb09 	bl	80043b8 <_malloc_r>
 8003da6:	6028      	str	r0, [r5, #0]
 8003da8:	6128      	str	r0, [r5, #16]
 8003daa:	b920      	cbnz	r0, 8003db6 <_svfiprintf_r+0x2e>
 8003dac:	230c      	movs	r3, #12
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	f04f 30ff 	mov.w	r0, #4294967295
 8003db4:	e0d1      	b.n	8003f5a <_svfiprintf_r+0x1d2>
 8003db6:	2340      	movs	r3, #64	; 0x40
 8003db8:	616b      	str	r3, [r5, #20]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dbe:	2320      	movs	r3, #32
 8003dc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dc4:	2330      	movs	r3, #48	; 0x30
 8003dc6:	f04f 0901 	mov.w	r9, #1
 8003dca:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f74 <_svfiprintf_r+0x1ec>
 8003dd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	469a      	mov	sl, r3
 8003dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dde:	b10a      	cbz	r2, 8003de4 <_svfiprintf_r+0x5c>
 8003de0:	2a25      	cmp	r2, #37	; 0x25
 8003de2:	d1f9      	bne.n	8003dd8 <_svfiprintf_r+0x50>
 8003de4:	ebba 0b04 	subs.w	fp, sl, r4
 8003de8:	d00b      	beq.n	8003e02 <_svfiprintf_r+0x7a>
 8003dea:	465b      	mov	r3, fp
 8003dec:	4622      	mov	r2, r4
 8003dee:	4629      	mov	r1, r5
 8003df0:	4638      	mov	r0, r7
 8003df2:	f7ff ff6d 	bl	8003cd0 <__ssputs_r>
 8003df6:	3001      	adds	r0, #1
 8003df8:	f000 80aa 	beq.w	8003f50 <_svfiprintf_r+0x1c8>
 8003dfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dfe:	445a      	add	r2, fp
 8003e00:	9209      	str	r2, [sp, #36]	; 0x24
 8003e02:	f89a 3000 	ldrb.w	r3, [sl]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80a2 	beq.w	8003f50 <_svfiprintf_r+0x1c8>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e16:	f10a 0a01 	add.w	sl, sl, #1
 8003e1a:	9304      	str	r3, [sp, #16]
 8003e1c:	9307      	str	r3, [sp, #28]
 8003e1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e22:	931a      	str	r3, [sp, #104]	; 0x68
 8003e24:	4654      	mov	r4, sl
 8003e26:	2205      	movs	r2, #5
 8003e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e2c:	4851      	ldr	r0, [pc, #324]	; (8003f74 <_svfiprintf_r+0x1ec>)
 8003e2e:	f000 fa41 	bl	80042b4 <memchr>
 8003e32:	9a04      	ldr	r2, [sp, #16]
 8003e34:	b9d8      	cbnz	r0, 8003e6e <_svfiprintf_r+0xe6>
 8003e36:	06d0      	lsls	r0, r2, #27
 8003e38:	bf44      	itt	mi
 8003e3a:	2320      	movmi	r3, #32
 8003e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e40:	0711      	lsls	r1, r2, #28
 8003e42:	bf44      	itt	mi
 8003e44:	232b      	movmi	r3, #43	; 0x2b
 8003e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e50:	d015      	beq.n	8003e7e <_svfiprintf_r+0xf6>
 8003e52:	4654      	mov	r4, sl
 8003e54:	2000      	movs	r0, #0
 8003e56:	f04f 0c0a 	mov.w	ip, #10
 8003e5a:	9a07      	ldr	r2, [sp, #28]
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e62:	3b30      	subs	r3, #48	; 0x30
 8003e64:	2b09      	cmp	r3, #9
 8003e66:	d94e      	bls.n	8003f06 <_svfiprintf_r+0x17e>
 8003e68:	b1b0      	cbz	r0, 8003e98 <_svfiprintf_r+0x110>
 8003e6a:	9207      	str	r2, [sp, #28]
 8003e6c:	e014      	b.n	8003e98 <_svfiprintf_r+0x110>
 8003e6e:	eba0 0308 	sub.w	r3, r0, r8
 8003e72:	fa09 f303 	lsl.w	r3, r9, r3
 8003e76:	4313      	orrs	r3, r2
 8003e78:	46a2      	mov	sl, r4
 8003e7a:	9304      	str	r3, [sp, #16]
 8003e7c:	e7d2      	b.n	8003e24 <_svfiprintf_r+0x9c>
 8003e7e:	9b03      	ldr	r3, [sp, #12]
 8003e80:	1d19      	adds	r1, r3, #4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	9103      	str	r1, [sp, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bfbb      	ittet	lt
 8003e8a:	425b      	neglt	r3, r3
 8003e8c:	f042 0202 	orrlt.w	r2, r2, #2
 8003e90:	9307      	strge	r3, [sp, #28]
 8003e92:	9307      	strlt	r3, [sp, #28]
 8003e94:	bfb8      	it	lt
 8003e96:	9204      	strlt	r2, [sp, #16]
 8003e98:	7823      	ldrb	r3, [r4, #0]
 8003e9a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e9c:	d10c      	bne.n	8003eb8 <_svfiprintf_r+0x130>
 8003e9e:	7863      	ldrb	r3, [r4, #1]
 8003ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ea2:	d135      	bne.n	8003f10 <_svfiprintf_r+0x188>
 8003ea4:	9b03      	ldr	r3, [sp, #12]
 8003ea6:	3402      	adds	r4, #2
 8003ea8:	1d1a      	adds	r2, r3, #4
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	9203      	str	r2, [sp, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bfb8      	it	lt
 8003eb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003eb6:	9305      	str	r3, [sp, #20]
 8003eb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f84 <_svfiprintf_r+0x1fc>
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	4650      	mov	r0, sl
 8003ec0:	7821      	ldrb	r1, [r4, #0]
 8003ec2:	f000 f9f7 	bl	80042b4 <memchr>
 8003ec6:	b140      	cbz	r0, 8003eda <_svfiprintf_r+0x152>
 8003ec8:	2340      	movs	r3, #64	; 0x40
 8003eca:	eba0 000a 	sub.w	r0, r0, sl
 8003ece:	fa03 f000 	lsl.w	r0, r3, r0
 8003ed2:	9b04      	ldr	r3, [sp, #16]
 8003ed4:	3401      	adds	r4, #1
 8003ed6:	4303      	orrs	r3, r0
 8003ed8:	9304      	str	r3, [sp, #16]
 8003eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ede:	2206      	movs	r2, #6
 8003ee0:	4825      	ldr	r0, [pc, #148]	; (8003f78 <_svfiprintf_r+0x1f0>)
 8003ee2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ee6:	f000 f9e5 	bl	80042b4 <memchr>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d038      	beq.n	8003f60 <_svfiprintf_r+0x1d8>
 8003eee:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <_svfiprintf_r+0x1f4>)
 8003ef0:	bb1b      	cbnz	r3, 8003f3a <_svfiprintf_r+0x1b2>
 8003ef2:	9b03      	ldr	r3, [sp, #12]
 8003ef4:	3307      	adds	r3, #7
 8003ef6:	f023 0307 	bic.w	r3, r3, #7
 8003efa:	3308      	adds	r3, #8
 8003efc:	9303      	str	r3, [sp, #12]
 8003efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f00:	4433      	add	r3, r6
 8003f02:	9309      	str	r3, [sp, #36]	; 0x24
 8003f04:	e767      	b.n	8003dd6 <_svfiprintf_r+0x4e>
 8003f06:	460c      	mov	r4, r1
 8003f08:	2001      	movs	r0, #1
 8003f0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f0e:	e7a5      	b.n	8003e5c <_svfiprintf_r+0xd4>
 8003f10:	2300      	movs	r3, #0
 8003f12:	f04f 0c0a 	mov.w	ip, #10
 8003f16:	4619      	mov	r1, r3
 8003f18:	3401      	adds	r4, #1
 8003f1a:	9305      	str	r3, [sp, #20]
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f22:	3a30      	subs	r2, #48	; 0x30
 8003f24:	2a09      	cmp	r2, #9
 8003f26:	d903      	bls.n	8003f30 <_svfiprintf_r+0x1a8>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0c5      	beq.n	8003eb8 <_svfiprintf_r+0x130>
 8003f2c:	9105      	str	r1, [sp, #20]
 8003f2e:	e7c3      	b.n	8003eb8 <_svfiprintf_r+0x130>
 8003f30:	4604      	mov	r4, r0
 8003f32:	2301      	movs	r3, #1
 8003f34:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f38:	e7f0      	b.n	8003f1c <_svfiprintf_r+0x194>
 8003f3a:	ab03      	add	r3, sp, #12
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	462a      	mov	r2, r5
 8003f40:	4638      	mov	r0, r7
 8003f42:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <_svfiprintf_r+0x1f8>)
 8003f44:	a904      	add	r1, sp, #16
 8003f46:	f3af 8000 	nop.w
 8003f4a:	1c42      	adds	r2, r0, #1
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	d1d6      	bne.n	8003efe <_svfiprintf_r+0x176>
 8003f50:	89ab      	ldrh	r3, [r5, #12]
 8003f52:	065b      	lsls	r3, r3, #25
 8003f54:	f53f af2c 	bmi.w	8003db0 <_svfiprintf_r+0x28>
 8003f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f5a:	b01d      	add	sp, #116	; 0x74
 8003f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f60:	ab03      	add	r3, sp, #12
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	462a      	mov	r2, r5
 8003f66:	4638      	mov	r0, r7
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <_svfiprintf_r+0x1f8>)
 8003f6a:	a904      	add	r1, sp, #16
 8003f6c:	f000 f87c 	bl	8004068 <_printf_i>
 8003f70:	e7eb      	b.n	8003f4a <_svfiprintf_r+0x1c2>
 8003f72:	bf00      	nop
 8003f74:	080045bc 	.word	0x080045bc
 8003f78:	080045c6 	.word	0x080045c6
 8003f7c:	00000000 	.word	0x00000000
 8003f80:	08003cd1 	.word	0x08003cd1
 8003f84:	080045c2 	.word	0x080045c2

08003f88 <_printf_common>:
 8003f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f8c:	4616      	mov	r6, r2
 8003f8e:	4699      	mov	r9, r3
 8003f90:	688a      	ldr	r2, [r1, #8]
 8003f92:	690b      	ldr	r3, [r1, #16]
 8003f94:	4607      	mov	r7, r0
 8003f96:	4293      	cmp	r3, r2
 8003f98:	bfb8      	it	lt
 8003f9a:	4613      	movlt	r3, r2
 8003f9c:	6033      	str	r3, [r6, #0]
 8003f9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fa8:	b10a      	cbz	r2, 8003fae <_printf_common+0x26>
 8003faa:	3301      	adds	r3, #1
 8003fac:	6033      	str	r3, [r6, #0]
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	0699      	lsls	r1, r3, #26
 8003fb2:	bf42      	ittt	mi
 8003fb4:	6833      	ldrmi	r3, [r6, #0]
 8003fb6:	3302      	addmi	r3, #2
 8003fb8:	6033      	strmi	r3, [r6, #0]
 8003fba:	6825      	ldr	r5, [r4, #0]
 8003fbc:	f015 0506 	ands.w	r5, r5, #6
 8003fc0:	d106      	bne.n	8003fd0 <_printf_common+0x48>
 8003fc2:	f104 0a19 	add.w	sl, r4, #25
 8003fc6:	68e3      	ldr	r3, [r4, #12]
 8003fc8:	6832      	ldr	r2, [r6, #0]
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	42ab      	cmp	r3, r5
 8003fce:	dc28      	bgt.n	8004022 <_printf_common+0x9a>
 8003fd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fd4:	1e13      	subs	r3, r2, #0
 8003fd6:	6822      	ldr	r2, [r4, #0]
 8003fd8:	bf18      	it	ne
 8003fda:	2301      	movne	r3, #1
 8003fdc:	0692      	lsls	r2, r2, #26
 8003fde:	d42d      	bmi.n	800403c <_printf_common+0xb4>
 8003fe0:	4649      	mov	r1, r9
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fe8:	47c0      	blx	r8
 8003fea:	3001      	adds	r0, #1
 8003fec:	d020      	beq.n	8004030 <_printf_common+0xa8>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	68e5      	ldr	r5, [r4, #12]
 8003ff2:	f003 0306 	and.w	r3, r3, #6
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	bf18      	it	ne
 8003ffa:	2500      	movne	r5, #0
 8003ffc:	6832      	ldr	r2, [r6, #0]
 8003ffe:	f04f 0600 	mov.w	r6, #0
 8004002:	68a3      	ldr	r3, [r4, #8]
 8004004:	bf08      	it	eq
 8004006:	1aad      	subeq	r5, r5, r2
 8004008:	6922      	ldr	r2, [r4, #16]
 800400a:	bf08      	it	eq
 800400c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004010:	4293      	cmp	r3, r2
 8004012:	bfc4      	itt	gt
 8004014:	1a9b      	subgt	r3, r3, r2
 8004016:	18ed      	addgt	r5, r5, r3
 8004018:	341a      	adds	r4, #26
 800401a:	42b5      	cmp	r5, r6
 800401c:	d11a      	bne.n	8004054 <_printf_common+0xcc>
 800401e:	2000      	movs	r0, #0
 8004020:	e008      	b.n	8004034 <_printf_common+0xac>
 8004022:	2301      	movs	r3, #1
 8004024:	4652      	mov	r2, sl
 8004026:	4649      	mov	r1, r9
 8004028:	4638      	mov	r0, r7
 800402a:	47c0      	blx	r8
 800402c:	3001      	adds	r0, #1
 800402e:	d103      	bne.n	8004038 <_printf_common+0xb0>
 8004030:	f04f 30ff 	mov.w	r0, #4294967295
 8004034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004038:	3501      	adds	r5, #1
 800403a:	e7c4      	b.n	8003fc6 <_printf_common+0x3e>
 800403c:	2030      	movs	r0, #48	; 0x30
 800403e:	18e1      	adds	r1, r4, r3
 8004040:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800404a:	4422      	add	r2, r4
 800404c:	3302      	adds	r3, #2
 800404e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004052:	e7c5      	b.n	8003fe0 <_printf_common+0x58>
 8004054:	2301      	movs	r3, #1
 8004056:	4622      	mov	r2, r4
 8004058:	4649      	mov	r1, r9
 800405a:	4638      	mov	r0, r7
 800405c:	47c0      	blx	r8
 800405e:	3001      	adds	r0, #1
 8004060:	d0e6      	beq.n	8004030 <_printf_common+0xa8>
 8004062:	3601      	adds	r6, #1
 8004064:	e7d9      	b.n	800401a <_printf_common+0x92>
	...

08004068 <_printf_i>:
 8004068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800406c:	460c      	mov	r4, r1
 800406e:	7e27      	ldrb	r7, [r4, #24]
 8004070:	4691      	mov	r9, r2
 8004072:	2f78      	cmp	r7, #120	; 0x78
 8004074:	4680      	mov	r8, r0
 8004076:	469a      	mov	sl, r3
 8004078:	990c      	ldr	r1, [sp, #48]	; 0x30
 800407a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800407e:	d807      	bhi.n	8004090 <_printf_i+0x28>
 8004080:	2f62      	cmp	r7, #98	; 0x62
 8004082:	d80a      	bhi.n	800409a <_printf_i+0x32>
 8004084:	2f00      	cmp	r7, #0
 8004086:	f000 80d9 	beq.w	800423c <_printf_i+0x1d4>
 800408a:	2f58      	cmp	r7, #88	; 0x58
 800408c:	f000 80a4 	beq.w	80041d8 <_printf_i+0x170>
 8004090:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004098:	e03a      	b.n	8004110 <_printf_i+0xa8>
 800409a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800409e:	2b15      	cmp	r3, #21
 80040a0:	d8f6      	bhi.n	8004090 <_printf_i+0x28>
 80040a2:	a001      	add	r0, pc, #4	; (adr r0, 80040a8 <_printf_i+0x40>)
 80040a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80040a8:	08004101 	.word	0x08004101
 80040ac:	08004115 	.word	0x08004115
 80040b0:	08004091 	.word	0x08004091
 80040b4:	08004091 	.word	0x08004091
 80040b8:	08004091 	.word	0x08004091
 80040bc:	08004091 	.word	0x08004091
 80040c0:	08004115 	.word	0x08004115
 80040c4:	08004091 	.word	0x08004091
 80040c8:	08004091 	.word	0x08004091
 80040cc:	08004091 	.word	0x08004091
 80040d0:	08004091 	.word	0x08004091
 80040d4:	08004223 	.word	0x08004223
 80040d8:	08004145 	.word	0x08004145
 80040dc:	08004205 	.word	0x08004205
 80040e0:	08004091 	.word	0x08004091
 80040e4:	08004091 	.word	0x08004091
 80040e8:	08004245 	.word	0x08004245
 80040ec:	08004091 	.word	0x08004091
 80040f0:	08004145 	.word	0x08004145
 80040f4:	08004091 	.word	0x08004091
 80040f8:	08004091 	.word	0x08004091
 80040fc:	0800420d 	.word	0x0800420d
 8004100:	680b      	ldr	r3, [r1, #0]
 8004102:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004106:	1d1a      	adds	r2, r3, #4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	600a      	str	r2, [r1, #0]
 800410c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004110:	2301      	movs	r3, #1
 8004112:	e0a4      	b.n	800425e <_printf_i+0x1f6>
 8004114:	6825      	ldr	r5, [r4, #0]
 8004116:	6808      	ldr	r0, [r1, #0]
 8004118:	062e      	lsls	r6, r5, #24
 800411a:	f100 0304 	add.w	r3, r0, #4
 800411e:	d50a      	bpl.n	8004136 <_printf_i+0xce>
 8004120:	6805      	ldr	r5, [r0, #0]
 8004122:	600b      	str	r3, [r1, #0]
 8004124:	2d00      	cmp	r5, #0
 8004126:	da03      	bge.n	8004130 <_printf_i+0xc8>
 8004128:	232d      	movs	r3, #45	; 0x2d
 800412a:	426d      	negs	r5, r5
 800412c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004130:	230a      	movs	r3, #10
 8004132:	485e      	ldr	r0, [pc, #376]	; (80042ac <_printf_i+0x244>)
 8004134:	e019      	b.n	800416a <_printf_i+0x102>
 8004136:	f015 0f40 	tst.w	r5, #64	; 0x40
 800413a:	6805      	ldr	r5, [r0, #0]
 800413c:	600b      	str	r3, [r1, #0]
 800413e:	bf18      	it	ne
 8004140:	b22d      	sxthne	r5, r5
 8004142:	e7ef      	b.n	8004124 <_printf_i+0xbc>
 8004144:	680b      	ldr	r3, [r1, #0]
 8004146:	6825      	ldr	r5, [r4, #0]
 8004148:	1d18      	adds	r0, r3, #4
 800414a:	6008      	str	r0, [r1, #0]
 800414c:	0628      	lsls	r0, r5, #24
 800414e:	d501      	bpl.n	8004154 <_printf_i+0xec>
 8004150:	681d      	ldr	r5, [r3, #0]
 8004152:	e002      	b.n	800415a <_printf_i+0xf2>
 8004154:	0669      	lsls	r1, r5, #25
 8004156:	d5fb      	bpl.n	8004150 <_printf_i+0xe8>
 8004158:	881d      	ldrh	r5, [r3, #0]
 800415a:	2f6f      	cmp	r7, #111	; 0x6f
 800415c:	bf0c      	ite	eq
 800415e:	2308      	moveq	r3, #8
 8004160:	230a      	movne	r3, #10
 8004162:	4852      	ldr	r0, [pc, #328]	; (80042ac <_printf_i+0x244>)
 8004164:	2100      	movs	r1, #0
 8004166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800416a:	6866      	ldr	r6, [r4, #4]
 800416c:	2e00      	cmp	r6, #0
 800416e:	bfa8      	it	ge
 8004170:	6821      	ldrge	r1, [r4, #0]
 8004172:	60a6      	str	r6, [r4, #8]
 8004174:	bfa4      	itt	ge
 8004176:	f021 0104 	bicge.w	r1, r1, #4
 800417a:	6021      	strge	r1, [r4, #0]
 800417c:	b90d      	cbnz	r5, 8004182 <_printf_i+0x11a>
 800417e:	2e00      	cmp	r6, #0
 8004180:	d04d      	beq.n	800421e <_printf_i+0x1b6>
 8004182:	4616      	mov	r6, r2
 8004184:	fbb5 f1f3 	udiv	r1, r5, r3
 8004188:	fb03 5711 	mls	r7, r3, r1, r5
 800418c:	5dc7      	ldrb	r7, [r0, r7]
 800418e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004192:	462f      	mov	r7, r5
 8004194:	42bb      	cmp	r3, r7
 8004196:	460d      	mov	r5, r1
 8004198:	d9f4      	bls.n	8004184 <_printf_i+0x11c>
 800419a:	2b08      	cmp	r3, #8
 800419c:	d10b      	bne.n	80041b6 <_printf_i+0x14e>
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	07df      	lsls	r7, r3, #31
 80041a2:	d508      	bpl.n	80041b6 <_printf_i+0x14e>
 80041a4:	6923      	ldr	r3, [r4, #16]
 80041a6:	6861      	ldr	r1, [r4, #4]
 80041a8:	4299      	cmp	r1, r3
 80041aa:	bfde      	ittt	le
 80041ac:	2330      	movle	r3, #48	; 0x30
 80041ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041b6:	1b92      	subs	r2, r2, r6
 80041b8:	6122      	str	r2, [r4, #16]
 80041ba:	464b      	mov	r3, r9
 80041bc:	4621      	mov	r1, r4
 80041be:	4640      	mov	r0, r8
 80041c0:	f8cd a000 	str.w	sl, [sp]
 80041c4:	aa03      	add	r2, sp, #12
 80041c6:	f7ff fedf 	bl	8003f88 <_printf_common>
 80041ca:	3001      	adds	r0, #1
 80041cc:	d14c      	bne.n	8004268 <_printf_i+0x200>
 80041ce:	f04f 30ff 	mov.w	r0, #4294967295
 80041d2:	b004      	add	sp, #16
 80041d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d8:	4834      	ldr	r0, [pc, #208]	; (80042ac <_printf_i+0x244>)
 80041da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041de:	680e      	ldr	r6, [r1, #0]
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80041e6:	061f      	lsls	r7, r3, #24
 80041e8:	600e      	str	r6, [r1, #0]
 80041ea:	d514      	bpl.n	8004216 <_printf_i+0x1ae>
 80041ec:	07d9      	lsls	r1, r3, #31
 80041ee:	bf44      	itt	mi
 80041f0:	f043 0320 	orrmi.w	r3, r3, #32
 80041f4:	6023      	strmi	r3, [r4, #0]
 80041f6:	b91d      	cbnz	r5, 8004200 <_printf_i+0x198>
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	f023 0320 	bic.w	r3, r3, #32
 80041fe:	6023      	str	r3, [r4, #0]
 8004200:	2310      	movs	r3, #16
 8004202:	e7af      	b.n	8004164 <_printf_i+0xfc>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	f043 0320 	orr.w	r3, r3, #32
 800420a:	6023      	str	r3, [r4, #0]
 800420c:	2378      	movs	r3, #120	; 0x78
 800420e:	4828      	ldr	r0, [pc, #160]	; (80042b0 <_printf_i+0x248>)
 8004210:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004214:	e7e3      	b.n	80041de <_printf_i+0x176>
 8004216:	065e      	lsls	r6, r3, #25
 8004218:	bf48      	it	mi
 800421a:	b2ad      	uxthmi	r5, r5
 800421c:	e7e6      	b.n	80041ec <_printf_i+0x184>
 800421e:	4616      	mov	r6, r2
 8004220:	e7bb      	b.n	800419a <_printf_i+0x132>
 8004222:	680b      	ldr	r3, [r1, #0]
 8004224:	6826      	ldr	r6, [r4, #0]
 8004226:	1d1d      	adds	r5, r3, #4
 8004228:	6960      	ldr	r0, [r4, #20]
 800422a:	600d      	str	r5, [r1, #0]
 800422c:	0635      	lsls	r5, r6, #24
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	d501      	bpl.n	8004236 <_printf_i+0x1ce>
 8004232:	6018      	str	r0, [r3, #0]
 8004234:	e002      	b.n	800423c <_printf_i+0x1d4>
 8004236:	0671      	lsls	r1, r6, #25
 8004238:	d5fb      	bpl.n	8004232 <_printf_i+0x1ca>
 800423a:	8018      	strh	r0, [r3, #0]
 800423c:	2300      	movs	r3, #0
 800423e:	4616      	mov	r6, r2
 8004240:	6123      	str	r3, [r4, #16]
 8004242:	e7ba      	b.n	80041ba <_printf_i+0x152>
 8004244:	680b      	ldr	r3, [r1, #0]
 8004246:	1d1a      	adds	r2, r3, #4
 8004248:	600a      	str	r2, [r1, #0]
 800424a:	681e      	ldr	r6, [r3, #0]
 800424c:	2100      	movs	r1, #0
 800424e:	4630      	mov	r0, r6
 8004250:	6862      	ldr	r2, [r4, #4]
 8004252:	f000 f82f 	bl	80042b4 <memchr>
 8004256:	b108      	cbz	r0, 800425c <_printf_i+0x1f4>
 8004258:	1b80      	subs	r0, r0, r6
 800425a:	6060      	str	r0, [r4, #4]
 800425c:	6863      	ldr	r3, [r4, #4]
 800425e:	6123      	str	r3, [r4, #16]
 8004260:	2300      	movs	r3, #0
 8004262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004266:	e7a8      	b.n	80041ba <_printf_i+0x152>
 8004268:	4632      	mov	r2, r6
 800426a:	4649      	mov	r1, r9
 800426c:	4640      	mov	r0, r8
 800426e:	6923      	ldr	r3, [r4, #16]
 8004270:	47d0      	blx	sl
 8004272:	3001      	adds	r0, #1
 8004274:	d0ab      	beq.n	80041ce <_printf_i+0x166>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	079b      	lsls	r3, r3, #30
 800427a:	d413      	bmi.n	80042a4 <_printf_i+0x23c>
 800427c:	68e0      	ldr	r0, [r4, #12]
 800427e:	9b03      	ldr	r3, [sp, #12]
 8004280:	4298      	cmp	r0, r3
 8004282:	bfb8      	it	lt
 8004284:	4618      	movlt	r0, r3
 8004286:	e7a4      	b.n	80041d2 <_printf_i+0x16a>
 8004288:	2301      	movs	r3, #1
 800428a:	4632      	mov	r2, r6
 800428c:	4649      	mov	r1, r9
 800428e:	4640      	mov	r0, r8
 8004290:	47d0      	blx	sl
 8004292:	3001      	adds	r0, #1
 8004294:	d09b      	beq.n	80041ce <_printf_i+0x166>
 8004296:	3501      	adds	r5, #1
 8004298:	68e3      	ldr	r3, [r4, #12]
 800429a:	9903      	ldr	r1, [sp, #12]
 800429c:	1a5b      	subs	r3, r3, r1
 800429e:	42ab      	cmp	r3, r5
 80042a0:	dcf2      	bgt.n	8004288 <_printf_i+0x220>
 80042a2:	e7eb      	b.n	800427c <_printf_i+0x214>
 80042a4:	2500      	movs	r5, #0
 80042a6:	f104 0619 	add.w	r6, r4, #25
 80042aa:	e7f5      	b.n	8004298 <_printf_i+0x230>
 80042ac:	080045cd 	.word	0x080045cd
 80042b0:	080045de 	.word	0x080045de

080042b4 <memchr>:
 80042b4:	4603      	mov	r3, r0
 80042b6:	b510      	push	{r4, lr}
 80042b8:	b2c9      	uxtb	r1, r1
 80042ba:	4402      	add	r2, r0
 80042bc:	4293      	cmp	r3, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	d101      	bne.n	80042c6 <memchr+0x12>
 80042c2:	2000      	movs	r0, #0
 80042c4:	e003      	b.n	80042ce <memchr+0x1a>
 80042c6:	7804      	ldrb	r4, [r0, #0]
 80042c8:	3301      	adds	r3, #1
 80042ca:	428c      	cmp	r4, r1
 80042cc:	d1f6      	bne.n	80042bc <memchr+0x8>
 80042ce:	bd10      	pop	{r4, pc}

080042d0 <memcpy>:
 80042d0:	440a      	add	r2, r1
 80042d2:	4291      	cmp	r1, r2
 80042d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80042d8:	d100      	bne.n	80042dc <memcpy+0xc>
 80042da:	4770      	bx	lr
 80042dc:	b510      	push	{r4, lr}
 80042de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042e2:	4291      	cmp	r1, r2
 80042e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042e8:	d1f9      	bne.n	80042de <memcpy+0xe>
 80042ea:	bd10      	pop	{r4, pc}

080042ec <memmove>:
 80042ec:	4288      	cmp	r0, r1
 80042ee:	b510      	push	{r4, lr}
 80042f0:	eb01 0402 	add.w	r4, r1, r2
 80042f4:	d902      	bls.n	80042fc <memmove+0x10>
 80042f6:	4284      	cmp	r4, r0
 80042f8:	4623      	mov	r3, r4
 80042fa:	d807      	bhi.n	800430c <memmove+0x20>
 80042fc:	1e43      	subs	r3, r0, #1
 80042fe:	42a1      	cmp	r1, r4
 8004300:	d008      	beq.n	8004314 <memmove+0x28>
 8004302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800430a:	e7f8      	b.n	80042fe <memmove+0x12>
 800430c:	4601      	mov	r1, r0
 800430e:	4402      	add	r2, r0
 8004310:	428a      	cmp	r2, r1
 8004312:	d100      	bne.n	8004316 <memmove+0x2a>
 8004314:	bd10      	pop	{r4, pc}
 8004316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800431a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800431e:	e7f7      	b.n	8004310 <memmove+0x24>

08004320 <_free_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	4605      	mov	r5, r0
 8004324:	2900      	cmp	r1, #0
 8004326:	d043      	beq.n	80043b0 <_free_r+0x90>
 8004328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800432c:	1f0c      	subs	r4, r1, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	bfb8      	it	lt
 8004332:	18e4      	addlt	r4, r4, r3
 8004334:	f000 f8d0 	bl	80044d8 <__malloc_lock>
 8004338:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <_free_r+0x94>)
 800433a:	6813      	ldr	r3, [r2, #0]
 800433c:	4610      	mov	r0, r2
 800433e:	b933      	cbnz	r3, 800434e <_free_r+0x2e>
 8004340:	6063      	str	r3, [r4, #4]
 8004342:	6014      	str	r4, [r2, #0]
 8004344:	4628      	mov	r0, r5
 8004346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800434a:	f000 b8cb 	b.w	80044e4 <__malloc_unlock>
 800434e:	42a3      	cmp	r3, r4
 8004350:	d90a      	bls.n	8004368 <_free_r+0x48>
 8004352:	6821      	ldr	r1, [r4, #0]
 8004354:	1862      	adds	r2, r4, r1
 8004356:	4293      	cmp	r3, r2
 8004358:	bf01      	itttt	eq
 800435a:	681a      	ldreq	r2, [r3, #0]
 800435c:	685b      	ldreq	r3, [r3, #4]
 800435e:	1852      	addeq	r2, r2, r1
 8004360:	6022      	streq	r2, [r4, #0]
 8004362:	6063      	str	r3, [r4, #4]
 8004364:	6004      	str	r4, [r0, #0]
 8004366:	e7ed      	b.n	8004344 <_free_r+0x24>
 8004368:	461a      	mov	r2, r3
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	b10b      	cbz	r3, 8004372 <_free_r+0x52>
 800436e:	42a3      	cmp	r3, r4
 8004370:	d9fa      	bls.n	8004368 <_free_r+0x48>
 8004372:	6811      	ldr	r1, [r2, #0]
 8004374:	1850      	adds	r0, r2, r1
 8004376:	42a0      	cmp	r0, r4
 8004378:	d10b      	bne.n	8004392 <_free_r+0x72>
 800437a:	6820      	ldr	r0, [r4, #0]
 800437c:	4401      	add	r1, r0
 800437e:	1850      	adds	r0, r2, r1
 8004380:	4283      	cmp	r3, r0
 8004382:	6011      	str	r1, [r2, #0]
 8004384:	d1de      	bne.n	8004344 <_free_r+0x24>
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4401      	add	r1, r0
 800438c:	6011      	str	r1, [r2, #0]
 800438e:	6053      	str	r3, [r2, #4]
 8004390:	e7d8      	b.n	8004344 <_free_r+0x24>
 8004392:	d902      	bls.n	800439a <_free_r+0x7a>
 8004394:	230c      	movs	r3, #12
 8004396:	602b      	str	r3, [r5, #0]
 8004398:	e7d4      	b.n	8004344 <_free_r+0x24>
 800439a:	6820      	ldr	r0, [r4, #0]
 800439c:	1821      	adds	r1, r4, r0
 800439e:	428b      	cmp	r3, r1
 80043a0:	bf01      	itttt	eq
 80043a2:	6819      	ldreq	r1, [r3, #0]
 80043a4:	685b      	ldreq	r3, [r3, #4]
 80043a6:	1809      	addeq	r1, r1, r0
 80043a8:	6021      	streq	r1, [r4, #0]
 80043aa:	6063      	str	r3, [r4, #4]
 80043ac:	6054      	str	r4, [r2, #4]
 80043ae:	e7c9      	b.n	8004344 <_free_r+0x24>
 80043b0:	bd38      	pop	{r3, r4, r5, pc}
 80043b2:	bf00      	nop
 80043b4:	200000ec 	.word	0x200000ec

080043b8 <_malloc_r>:
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ba:	1ccd      	adds	r5, r1, #3
 80043bc:	f025 0503 	bic.w	r5, r5, #3
 80043c0:	3508      	adds	r5, #8
 80043c2:	2d0c      	cmp	r5, #12
 80043c4:	bf38      	it	cc
 80043c6:	250c      	movcc	r5, #12
 80043c8:	2d00      	cmp	r5, #0
 80043ca:	4606      	mov	r6, r0
 80043cc:	db01      	blt.n	80043d2 <_malloc_r+0x1a>
 80043ce:	42a9      	cmp	r1, r5
 80043d0:	d903      	bls.n	80043da <_malloc_r+0x22>
 80043d2:	230c      	movs	r3, #12
 80043d4:	6033      	str	r3, [r6, #0]
 80043d6:	2000      	movs	r0, #0
 80043d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043da:	f000 f87d 	bl	80044d8 <__malloc_lock>
 80043de:	4921      	ldr	r1, [pc, #132]	; (8004464 <_malloc_r+0xac>)
 80043e0:	680a      	ldr	r2, [r1, #0]
 80043e2:	4614      	mov	r4, r2
 80043e4:	b99c      	cbnz	r4, 800440e <_malloc_r+0x56>
 80043e6:	4f20      	ldr	r7, [pc, #128]	; (8004468 <_malloc_r+0xb0>)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	b923      	cbnz	r3, 80043f6 <_malloc_r+0x3e>
 80043ec:	4621      	mov	r1, r4
 80043ee:	4630      	mov	r0, r6
 80043f0:	f000 f862 	bl	80044b8 <_sbrk_r>
 80043f4:	6038      	str	r0, [r7, #0]
 80043f6:	4629      	mov	r1, r5
 80043f8:	4630      	mov	r0, r6
 80043fa:	f000 f85d 	bl	80044b8 <_sbrk_r>
 80043fe:	1c43      	adds	r3, r0, #1
 8004400:	d123      	bne.n	800444a <_malloc_r+0x92>
 8004402:	230c      	movs	r3, #12
 8004404:	4630      	mov	r0, r6
 8004406:	6033      	str	r3, [r6, #0]
 8004408:	f000 f86c 	bl	80044e4 <__malloc_unlock>
 800440c:	e7e3      	b.n	80043d6 <_malloc_r+0x1e>
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	1b5b      	subs	r3, r3, r5
 8004412:	d417      	bmi.n	8004444 <_malloc_r+0x8c>
 8004414:	2b0b      	cmp	r3, #11
 8004416:	d903      	bls.n	8004420 <_malloc_r+0x68>
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	441c      	add	r4, r3
 800441c:	6025      	str	r5, [r4, #0]
 800441e:	e004      	b.n	800442a <_malloc_r+0x72>
 8004420:	6863      	ldr	r3, [r4, #4]
 8004422:	42a2      	cmp	r2, r4
 8004424:	bf0c      	ite	eq
 8004426:	600b      	streq	r3, [r1, #0]
 8004428:	6053      	strne	r3, [r2, #4]
 800442a:	4630      	mov	r0, r6
 800442c:	f000 f85a 	bl	80044e4 <__malloc_unlock>
 8004430:	f104 000b 	add.w	r0, r4, #11
 8004434:	1d23      	adds	r3, r4, #4
 8004436:	f020 0007 	bic.w	r0, r0, #7
 800443a:	1ac2      	subs	r2, r0, r3
 800443c:	d0cc      	beq.n	80043d8 <_malloc_r+0x20>
 800443e:	1a1b      	subs	r3, r3, r0
 8004440:	50a3      	str	r3, [r4, r2]
 8004442:	e7c9      	b.n	80043d8 <_malloc_r+0x20>
 8004444:	4622      	mov	r2, r4
 8004446:	6864      	ldr	r4, [r4, #4]
 8004448:	e7cc      	b.n	80043e4 <_malloc_r+0x2c>
 800444a:	1cc4      	adds	r4, r0, #3
 800444c:	f024 0403 	bic.w	r4, r4, #3
 8004450:	42a0      	cmp	r0, r4
 8004452:	d0e3      	beq.n	800441c <_malloc_r+0x64>
 8004454:	1a21      	subs	r1, r4, r0
 8004456:	4630      	mov	r0, r6
 8004458:	f000 f82e 	bl	80044b8 <_sbrk_r>
 800445c:	3001      	adds	r0, #1
 800445e:	d1dd      	bne.n	800441c <_malloc_r+0x64>
 8004460:	e7cf      	b.n	8004402 <_malloc_r+0x4a>
 8004462:	bf00      	nop
 8004464:	200000ec 	.word	0x200000ec
 8004468:	200000f0 	.word	0x200000f0

0800446c <_realloc_r>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	4607      	mov	r7, r0
 8004470:	4614      	mov	r4, r2
 8004472:	460e      	mov	r6, r1
 8004474:	b921      	cbnz	r1, 8004480 <_realloc_r+0x14>
 8004476:	4611      	mov	r1, r2
 8004478:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800447c:	f7ff bf9c 	b.w	80043b8 <_malloc_r>
 8004480:	b922      	cbnz	r2, 800448c <_realloc_r+0x20>
 8004482:	f7ff ff4d 	bl	8004320 <_free_r>
 8004486:	4625      	mov	r5, r4
 8004488:	4628      	mov	r0, r5
 800448a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800448c:	f000 f830 	bl	80044f0 <_malloc_usable_size_r>
 8004490:	42a0      	cmp	r0, r4
 8004492:	d20f      	bcs.n	80044b4 <_realloc_r+0x48>
 8004494:	4621      	mov	r1, r4
 8004496:	4638      	mov	r0, r7
 8004498:	f7ff ff8e 	bl	80043b8 <_malloc_r>
 800449c:	4605      	mov	r5, r0
 800449e:	2800      	cmp	r0, #0
 80044a0:	d0f2      	beq.n	8004488 <_realloc_r+0x1c>
 80044a2:	4631      	mov	r1, r6
 80044a4:	4622      	mov	r2, r4
 80044a6:	f7ff ff13 	bl	80042d0 <memcpy>
 80044aa:	4631      	mov	r1, r6
 80044ac:	4638      	mov	r0, r7
 80044ae:	f7ff ff37 	bl	8004320 <_free_r>
 80044b2:	e7e9      	b.n	8004488 <_realloc_r+0x1c>
 80044b4:	4635      	mov	r5, r6
 80044b6:	e7e7      	b.n	8004488 <_realloc_r+0x1c>

080044b8 <_sbrk_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	2300      	movs	r3, #0
 80044bc:	4d05      	ldr	r5, [pc, #20]	; (80044d4 <_sbrk_r+0x1c>)
 80044be:	4604      	mov	r4, r0
 80044c0:	4608      	mov	r0, r1
 80044c2:	602b      	str	r3, [r5, #0]
 80044c4:	f7fd faa0 	bl	8001a08 <_sbrk>
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	d102      	bne.n	80044d2 <_sbrk_r+0x1a>
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	b103      	cbz	r3, 80044d2 <_sbrk_r+0x1a>
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	200004fc 	.word	0x200004fc

080044d8 <__malloc_lock>:
 80044d8:	4801      	ldr	r0, [pc, #4]	; (80044e0 <__malloc_lock+0x8>)
 80044da:	f000 b811 	b.w	8004500 <__retarget_lock_acquire_recursive>
 80044de:	bf00      	nop
 80044e0:	20000504 	.word	0x20000504

080044e4 <__malloc_unlock>:
 80044e4:	4801      	ldr	r0, [pc, #4]	; (80044ec <__malloc_unlock+0x8>)
 80044e6:	f000 b80c 	b.w	8004502 <__retarget_lock_release_recursive>
 80044ea:	bf00      	nop
 80044ec:	20000504 	.word	0x20000504

080044f0 <_malloc_usable_size_r>:
 80044f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f4:	1f18      	subs	r0, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bfbc      	itt	lt
 80044fa:	580b      	ldrlt	r3, [r1, r0]
 80044fc:	18c0      	addlt	r0, r0, r3
 80044fe:	4770      	bx	lr

08004500 <__retarget_lock_acquire_recursive>:
 8004500:	4770      	bx	lr

08004502 <__retarget_lock_release_recursive>:
 8004502:	4770      	bx	lr

08004504 <_init>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	bf00      	nop
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr

08004510 <_fini>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	bf00      	nop
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr
