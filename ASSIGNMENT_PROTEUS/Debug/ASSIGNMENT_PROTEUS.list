
ASSIGNMENT_PROTEUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004250  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004420  08004420  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08004420  08004420  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004420  08004420  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004420  08004420  00014420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000090  080044b8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  080044b8  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d739  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225f  00000000  00000000  0002d7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0002fa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  000307f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b5b  00000000  00000000  000314b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e155  00000000  00000000  0003400b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088db5  00000000  00000000  00042160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000caf15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b88  00000000  00000000  000caf68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08004344 	.word	0x08004344

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08004344 	.word	0x08004344

0800014c <toogleRed>:
#define OneSec 100
#include "fsm.h"
#include "main.h"
//HAL_GPIO_WritePin(GPIOB, ledpa_Pin|led1b_Pin|led2b_Pin|led2a_Pin, GPIO_PIN_RESET);
//HAL_GPIO_WritePin(GPIOA, ledpb_Pin|led1a_Pin, GPIO_PIN_RESET);
void toogleRed(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,led1a_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000156:	4805      	ldr	r0, [pc, #20]	; (800016c <toogleRed+0x20>)
 8000158:	f001 ff99 	bl	800208e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led1b_Pin, GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	2108      	movs	r1, #8
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <toogleRed+0x24>)
 8000162:	f001 ff94 	bl	800208e <HAL_GPIO_WritePin>
}
 8000166:	bf00      	nop
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	40010800 	.word	0x40010800
 8000170:	40010c00 	.word	0x40010c00

08000174 <toogleGreen>:
void toogleGreen(){
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,led1a_Pin, GPIO_PIN_SET);
 8000178:	2201      	movs	r2, #1
 800017a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800017e:	4805      	ldr	r0, [pc, #20]	; (8000194 <toogleGreen+0x20>)
 8000180:	f001 ff85 	bl	800208e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led1b_Pin, GPIO_PIN_RESET);
 8000184:	2200      	movs	r2, #0
 8000186:	2108      	movs	r1, #8
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <toogleGreen+0x24>)
 800018a:	f001 ff80 	bl	800208e <HAL_GPIO_WritePin>
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40010800 	.word	0x40010800
 8000198:	40010c00 	.word	0x40010c00

0800019c <toogleYellow>:
void toogleYellow(){
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,led1a_Pin, GPIO_PIN_SET);
 80001a0:	2201      	movs	r2, #1
 80001a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001a6:	4805      	ldr	r0, [pc, #20]	; (80001bc <toogleYellow+0x20>)
 80001a8:	f001 ff71 	bl	800208e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led1b_Pin, GPIO_PIN_SET);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2108      	movs	r1, #8
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <toogleYellow+0x24>)
 80001b2:	f001 ff6c 	bl	800208e <HAL_GPIO_WritePin>
}
 80001b6:	bf00      	nop
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	40010800 	.word	0x40010800
 80001c0:	40010c00 	.word	0x40010c00

080001c4 <toogleRed1>:
void toogleRed1(){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,led2a_Pin, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2120      	movs	r1, #32
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <toogleRed1+0x1c>)
 80001ce:	f001 ff5e 	bl	800208e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led2b_Pin, GPIO_PIN_SET);
 80001d2:	2201      	movs	r2, #1
 80001d4:	2110      	movs	r1, #16
 80001d6:	4802      	ldr	r0, [pc, #8]	; (80001e0 <toogleRed1+0x1c>)
 80001d8:	f001 ff59 	bl	800208e <HAL_GPIO_WritePin>
}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	40010c00 	.word	0x40010c00

080001e4 <toogleGreen1>:
void toogleGreen1(){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,led2a_Pin, GPIO_PIN_SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2120      	movs	r1, #32
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <toogleGreen1+0x1c>)
 80001ee:	f001 ff4e 	bl	800208e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led2b_Pin, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2110      	movs	r1, #16
 80001f6:	4802      	ldr	r0, [pc, #8]	; (8000200 <toogleGreen1+0x1c>)
 80001f8:	f001 ff49 	bl	800208e <HAL_GPIO_WritePin>
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	40010c00 	.word	0x40010c00

08000204 <toogleYellow1>:
void toogleYellow1(){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,led2a_Pin, GPIO_PIN_SET);
 8000208:	2201      	movs	r2, #1
 800020a:	2120      	movs	r1, #32
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <toogleYellow1+0x1c>)
 800020e:	f001 ff3e 	bl	800208e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led2b_Pin, GPIO_PIN_SET);
 8000212:	2201      	movs	r2, #1
 8000214:	2110      	movs	r1, #16
 8000216:	4802      	ldr	r0, [pc, #8]	; (8000220 <toogleYellow1+0x1c>)
 8000218:	f001 ff39 	bl	800208e <HAL_GPIO_WritePin>
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	40010c00 	.word	0x40010c00

08000224 <redP>:
void redP(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ledpa_Pin, GPIO_PIN_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800022e:	4805      	ldr	r0, [pc, #20]	; (8000244 <redP+0x20>)
 8000230:	f001 ff2d 	bl	800208e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ledpb_Pin, GPIO_PIN_SET);
 8000234:	2201      	movs	r2, #1
 8000236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023a:	4803      	ldr	r0, [pc, #12]	; (8000248 <redP+0x24>)
 800023c:	f001 ff27 	bl	800208e <HAL_GPIO_WritePin>
}
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40010c00 	.word	0x40010c00
 8000248:	40010800 	.word	0x40010800

0800024c <greenP>:
void greenP(){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ledpa_Pin, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000256:	4805      	ldr	r0, [pc, #20]	; (800026c <greenP+0x20>)
 8000258:	f001 ff19 	bl	800208e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ledpb_Pin, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000262:	4803      	ldr	r0, [pc, #12]	; (8000270 <greenP+0x24>)
 8000264:	f001 ff13 	bl	800208e <HAL_GPIO_WritePin>
}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40010c00 	.word	0x40010c00
 8000270:	40010800 	.word	0x40010800

08000274 <offP>:
void offP(){
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ledpa_Pin, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <offP+0x20>)
 8000280:	f001 ff05 	bl	800208e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ledpb_Pin, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028a:	4803      	ldr	r0, [pc, #12]	; (8000298 <offP+0x24>)
 800028c:	f001 feff 	bl	800208e <HAL_GPIO_WritePin>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40010c00 	.word	0x40010c00
 8000298:	40010800 	.word	0x40010800

0800029c <fsm_automatic_run1>:
void fsm_automatic_run1(){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	switch (status1	) {
 80002a0:	4b31      	ldr	r3, [pc, #196]	; (8000368 <fsm_automatic_run1+0xcc>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a31      	ldr	r2, [pc, #196]	; (800036c <fsm_automatic_run1+0xd0>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d00b      	beq.n	80002c2 <fsm_automatic_run1+0x26>
 80002aa:	4a30      	ldr	r2, [pc, #192]	; (800036c <fsm_automatic_run1+0xd0>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	dc52      	bgt.n	8000356 <fsm_automatic_run1+0xba>
 80002b0:	2b03      	cmp	r3, #3
 80002b2:	d03c      	beq.n	800032e <fsm_automatic_run1+0x92>
 80002b4:	2b03      	cmp	r3, #3
 80002b6:	dc4e      	bgt.n	8000356 <fsm_automatic_run1+0xba>
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d010      	beq.n	80002de <fsm_automatic_run1+0x42>
 80002bc:	2b02      	cmp	r3, #2
 80002be:	d022      	beq.n	8000306 <fsm_automatic_run1+0x6a>
//				setTimer1(RED_TIME);
				timer=RED_TIME/OneSec;
			}
			break;
		default:
			break;
 80002c0:	e049      	b.n	8000356 <fsm_automatic_run1+0xba>
			status1 = AUTO_RED;
 80002c2:	4b29      	ldr	r3, [pc, #164]	; (8000368 <fsm_automatic_run1+0xcc>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	601a      	str	r2, [r3, #0]
			timer = RED_TIME/OneSec;
 80002c8:	4b29      	ldr	r3, [pc, #164]	; (8000370 <fsm_automatic_run1+0xd4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a29      	ldr	r2, [pc, #164]	; (8000374 <fsm_automatic_run1+0xd8>)
 80002ce:	fb82 1203 	smull	r1, r2, r2, r3
 80002d2:	1152      	asrs	r2, r2, #5
 80002d4:	17db      	asrs	r3, r3, #31
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	4a27      	ldr	r2, [pc, #156]	; (8000378 <fsm_automatic_run1+0xdc>)
 80002da:	6013      	str	r3, [r2, #0]
			break;
 80002dc:	e042      	b.n	8000364 <fsm_automatic_run1+0xc8>
			toogleRed();
 80002de:	f7ff ff35 	bl	800014c <toogleRed>
			if(timer==STOP){
 80002e2:	4b25      	ldr	r3, [pc, #148]	; (8000378 <fsm_automatic_run1+0xdc>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d137      	bne.n	800035a <fsm_automatic_run1+0xbe>
				status1 = AUTO_GREEN;
 80002ea:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <fsm_automatic_run1+0xcc>)
 80002ec:	2202      	movs	r2, #2
 80002ee:	601a      	str	r2, [r3, #0]
				timer=GREEN_TIME/OneSec;
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <fsm_automatic_run1+0xe0>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a1f      	ldr	r2, [pc, #124]	; (8000374 <fsm_automatic_run1+0xd8>)
 80002f6:	fb82 1203 	smull	r1, r2, r2, r3
 80002fa:	1152      	asrs	r2, r2, #5
 80002fc:	17db      	asrs	r3, r3, #31
 80002fe:	1ad3      	subs	r3, r2, r3
 8000300:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <fsm_automatic_run1+0xdc>)
 8000302:	6013      	str	r3, [r2, #0]
			break;
 8000304:	e029      	b.n	800035a <fsm_automatic_run1+0xbe>
			toogleGreen();
 8000306:	f7ff ff35 	bl	8000174 <toogleGreen>
			if(timer==STOP){
 800030a:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <fsm_automatic_run1+0xdc>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d125      	bne.n	800035e <fsm_automatic_run1+0xc2>
				status1 = AUTO_YELLOW;
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <fsm_automatic_run1+0xcc>)
 8000314:	2203      	movs	r2, #3
 8000316:	601a      	str	r2, [r3, #0]
				timer=YELLOW_TIME/OneSec;
 8000318:	4b19      	ldr	r3, [pc, #100]	; (8000380 <fsm_automatic_run1+0xe4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a15      	ldr	r2, [pc, #84]	; (8000374 <fsm_automatic_run1+0xd8>)
 800031e:	fb82 1203 	smull	r1, r2, r2, r3
 8000322:	1152      	asrs	r2, r2, #5
 8000324:	17db      	asrs	r3, r3, #31
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	4a13      	ldr	r2, [pc, #76]	; (8000378 <fsm_automatic_run1+0xdc>)
 800032a:	6013      	str	r3, [r2, #0]
			break;
 800032c:	e017      	b.n	800035e <fsm_automatic_run1+0xc2>
			toogleYellow();
 800032e:	f7ff ff35 	bl	800019c <toogleYellow>
			if(timer==STOP){
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <fsm_automatic_run1+0xdc>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d113      	bne.n	8000362 <fsm_automatic_run1+0xc6>
				status1 = AUTO_RED;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <fsm_automatic_run1+0xcc>)
 800033c:	2201      	movs	r2, #1
 800033e:	601a      	str	r2, [r3, #0]
				timer=RED_TIME/OneSec;
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <fsm_automatic_run1+0xd4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a0b      	ldr	r2, [pc, #44]	; (8000374 <fsm_automatic_run1+0xd8>)
 8000346:	fb82 1203 	smull	r1, r2, r2, r3
 800034a:	1152      	asrs	r2, r2, #5
 800034c:	17db      	asrs	r3, r3, #31
 800034e:	1ad3      	subs	r3, r2, r3
 8000350:	4a09      	ldr	r2, [pc, #36]	; (8000378 <fsm_automatic_run1+0xdc>)
 8000352:	6013      	str	r3, [r2, #0]
			break;
 8000354:	e005      	b.n	8000362 <fsm_automatic_run1+0xc6>
			break;
 8000356:	bf00      	nop
 8000358:	e004      	b.n	8000364 <fsm_automatic_run1+0xc8>
			break;
 800035a:	bf00      	nop
 800035c:	e002      	b.n	8000364 <fsm_automatic_run1+0xc8>
			break;
 800035e:	bf00      	nop
 8000360:	e000      	b.n	8000364 <fsm_automatic_run1+0xc8>
			break;
 8000362:	bf00      	nop
	}
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000000 	.word	0x20000000
 800036c:	01605b22 	.word	0x01605b22
 8000370:	20000010 	.word	0x20000010
 8000374:	51eb851f 	.word	0x51eb851f
 8000378:	200000c4 	.word	0x200000c4
 800037c:	20000014 	.word	0x20000014
 8000380:	20000018 	.word	0x20000018

08000384 <fsm_automatic_run2>:


void fsm_automatic_run2(){
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	switch (status2	) {
 8000388:	4b31      	ldr	r3, [pc, #196]	; (8000450 <fsm_automatic_run2+0xcc>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a31      	ldr	r2, [pc, #196]	; (8000454 <fsm_automatic_run2+0xd0>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d00b      	beq.n	80003aa <fsm_automatic_run2+0x26>
 8000392:	4a30      	ldr	r2, [pc, #192]	; (8000454 <fsm_automatic_run2+0xd0>)
 8000394:	4293      	cmp	r3, r2
 8000396:	dc52      	bgt.n	800043e <fsm_automatic_run2+0xba>
 8000398:	2b03      	cmp	r3, #3
 800039a:	d03c      	beq.n	8000416 <fsm_automatic_run2+0x92>
 800039c:	2b03      	cmp	r3, #3
 800039e:	dc4e      	bgt.n	800043e <fsm_automatic_run2+0xba>
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d010      	beq.n	80003c6 <fsm_automatic_run2+0x42>
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d022      	beq.n	80003ee <fsm_automatic_run2+0x6a>
				timer2=RED_TIME/OneSec;
			}

			break;
		default:
			break;
 80003a8:	e049      	b.n	800043e <fsm_automatic_run2+0xba>
			status2 = AUTO_GREEN;
 80003aa:	4b29      	ldr	r3, [pc, #164]	; (8000450 <fsm_automatic_run2+0xcc>)
 80003ac:	2202      	movs	r2, #2
 80003ae:	601a      	str	r2, [r3, #0]
			timer2=GREEN_TIME/OneSec;
 80003b0:	4b29      	ldr	r3, [pc, #164]	; (8000458 <fsm_automatic_run2+0xd4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a29      	ldr	r2, [pc, #164]	; (800045c <fsm_automatic_run2+0xd8>)
 80003b6:	fb82 1203 	smull	r1, r2, r2, r3
 80003ba:	1152      	asrs	r2, r2, #5
 80003bc:	17db      	asrs	r3, r3, #31
 80003be:	1ad3      	subs	r3, r2, r3
 80003c0:	4a27      	ldr	r2, [pc, #156]	; (8000460 <fsm_automatic_run2+0xdc>)
 80003c2:	6013      	str	r3, [r2, #0]
			break;
 80003c4:	e042      	b.n	800044c <fsm_automatic_run2+0xc8>
			toogleRed1();
 80003c6:	f7ff fefd 	bl	80001c4 <toogleRed1>
			if(timer2==STOP){
 80003ca:	4b25      	ldr	r3, [pc, #148]	; (8000460 <fsm_automatic_run2+0xdc>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d137      	bne.n	8000442 <fsm_automatic_run2+0xbe>
				status2 = AUTO_GREEN;
 80003d2:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <fsm_automatic_run2+0xcc>)
 80003d4:	2202      	movs	r2, #2
 80003d6:	601a      	str	r2, [r3, #0]
				timer2=GREEN_TIME/OneSec;
 80003d8:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <fsm_automatic_run2+0xd4>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a1f      	ldr	r2, [pc, #124]	; (800045c <fsm_automatic_run2+0xd8>)
 80003de:	fb82 1203 	smull	r1, r2, r2, r3
 80003e2:	1152      	asrs	r2, r2, #5
 80003e4:	17db      	asrs	r3, r3, #31
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	4a1d      	ldr	r2, [pc, #116]	; (8000460 <fsm_automatic_run2+0xdc>)
 80003ea:	6013      	str	r3, [r2, #0]
			break;
 80003ec:	e029      	b.n	8000442 <fsm_automatic_run2+0xbe>
			toogleGreen1();
 80003ee:	f7ff fef9 	bl	80001e4 <toogleGreen1>
			if(timer2==STOP){
 80003f2:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <fsm_automatic_run2+0xdc>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d125      	bne.n	8000446 <fsm_automatic_run2+0xc2>
				status2 = AUTO_YELLOW;
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <fsm_automatic_run2+0xcc>)
 80003fc:	2203      	movs	r2, #3
 80003fe:	601a      	str	r2, [r3, #0]
				timer2=YELLOW_TIME/OneSec;
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <fsm_automatic_run2+0xe0>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a15      	ldr	r2, [pc, #84]	; (800045c <fsm_automatic_run2+0xd8>)
 8000406:	fb82 1203 	smull	r1, r2, r2, r3
 800040a:	1152      	asrs	r2, r2, #5
 800040c:	17db      	asrs	r3, r3, #31
 800040e:	1ad3      	subs	r3, r2, r3
 8000410:	4a13      	ldr	r2, [pc, #76]	; (8000460 <fsm_automatic_run2+0xdc>)
 8000412:	6013      	str	r3, [r2, #0]
			break;
 8000414:	e017      	b.n	8000446 <fsm_automatic_run2+0xc2>
			toogleYellow1();
 8000416:	f7ff fef5 	bl	8000204 <toogleYellow1>
			if(timer2==STOP){
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <fsm_automatic_run2+0xdc>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d113      	bne.n	800044a <fsm_automatic_run2+0xc6>
				status2 = AUTO_RED;
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <fsm_automatic_run2+0xcc>)
 8000424:	2201      	movs	r2, #1
 8000426:	601a      	str	r2, [r3, #0]
				timer2=RED_TIME/OneSec;
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <fsm_automatic_run2+0xe4>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a0b      	ldr	r2, [pc, #44]	; (800045c <fsm_automatic_run2+0xd8>)
 800042e:	fb82 1203 	smull	r1, r2, r2, r3
 8000432:	1152      	asrs	r2, r2, #5
 8000434:	17db      	asrs	r3, r3, #31
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	4a09      	ldr	r2, [pc, #36]	; (8000460 <fsm_automatic_run2+0xdc>)
 800043a:	6013      	str	r3, [r2, #0]
			break;
 800043c:	e005      	b.n	800044a <fsm_automatic_run2+0xc6>
			break;
 800043e:	bf00      	nop
 8000440:	e004      	b.n	800044c <fsm_automatic_run2+0xc8>
			break;
 8000442:	bf00      	nop
 8000444:	e002      	b.n	800044c <fsm_automatic_run2+0xc8>
			break;
 8000446:	bf00      	nop
 8000448:	e000      	b.n	800044c <fsm_automatic_run2+0xc8>
			break;
 800044a:	bf00      	nop
	}
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000004 	.word	0x20000004
 8000454:	01605b22 	.word	0x01605b22
 8000458:	20000014 	.word	0x20000014
 800045c:	51eb851f 	.word	0x51eb851f
 8000460:	200000c8 	.word	0x200000c8
 8000464:	20000018 	.word	0x20000018
 8000468:	20000010 	.word	0x20000010

0800046c <fsm_p>:
void fsm_p(){
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	switch (status4) {
 8000470:	4b35      	ldr	r3, [pc, #212]	; (8000548 <fsm_p+0xdc>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a35      	ldr	r2, [pc, #212]	; (800054c <fsm_p+0xe0>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d00b      	beq.n	8000492 <fsm_p+0x26>
 800047a:	4a34      	ldr	r2, [pc, #208]	; (800054c <fsm_p+0xe0>)
 800047c:	4293      	cmp	r3, r2
 800047e:	dc59      	bgt.n	8000534 <fsm_p+0xc8>
 8000480:	2b63      	cmp	r3, #99	; 0x63
 8000482:	d059      	beq.n	8000538 <fsm_p+0xcc>
 8000484:	2b63      	cmp	r3, #99	; 0x63
 8000486:	dc55      	bgt.n	8000534 <fsm_p+0xc8>
 8000488:	2b1f      	cmp	r3, #31
 800048a:	d00b      	beq.n	80004a4 <fsm_p+0x38>
 800048c:	2b20      	cmp	r3, #32
 800048e:	d033      	beq.n	80004f8 <fsm_p+0x8c>
			if(timer3==STOP){
				status4=INIT;
			}
			break;
		default:
			break;
 8000490:	e050      	b.n	8000534 <fsm_p+0xc8>
			status4=Waiting;
 8000492:	4b2d      	ldr	r3, [pc, #180]	; (8000548 <fsm_p+0xdc>)
 8000494:	2263      	movs	r2, #99	; 0x63
 8000496:	601a      	str	r2, [r3, #0]
			timer3 = 0;
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <fsm_p+0xe4>)
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
			offP();
 800049e:	f7ff fee9 	bl	8000274 <offP>
			break;
 80004a2:	e04e      	b.n	8000542 <fsm_p+0xd6>
			redP();
 80004a4:	f7ff febe 	bl	8000224 <redP>
			if( timer3_flag == 1) {
 80004a8:	4b2a      	ldr	r3, [pc, #168]	; (8000554 <fsm_p+0xe8>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d10f      	bne.n	80004d0 <fsm_p+0x64>
				Print_Mode(P_RED);
 80004b0:	201f      	movs	r0, #31
 80004b2:	f000 fca3 	bl	8000dfc <Print_Mode>
				Print_TimeOut(timer3);
 80004b6:	4b26      	ldr	r3, [pc, #152]	; (8000550 <fsm_p+0xe4>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fc80 	bl	8000dc0 <Print_TimeOut>
				timer3--;
 80004c0:	4b23      	ldr	r3, [pc, #140]	; (8000550 <fsm_p+0xe4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	3b01      	subs	r3, #1
 80004c6:	4a22      	ldr	r2, [pc, #136]	; (8000550 <fsm_p+0xe4>)
 80004c8:	6013      	str	r3, [r2, #0]
				setTimer3 (OneSec) ;
 80004ca:	2064      	movs	r0, #100	; 0x64
 80004cc:	f001 f9ac 	bl	8001828 <setTimer3>
			if(timer3==STOP){
 80004d0:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <fsm_p+0xe4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d131      	bne.n	800053c <fsm_p+0xd0>
				status4=P_GREEN;
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <fsm_p+0xdc>)
 80004da:	2220      	movs	r2, #32
 80004dc:	601a      	str	r2, [r3, #0]
				timer3 = RED_TIME/OneSec;
 80004de:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <fsm_p+0xec>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a1e      	ldr	r2, [pc, #120]	; (800055c <fsm_p+0xf0>)
 80004e4:	fb82 1203 	smull	r1, r2, r2, r3
 80004e8:	1152      	asrs	r2, r2, #5
 80004ea:	17db      	asrs	r3, r3, #31
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	4a18      	ldr	r2, [pc, #96]	; (8000550 <fsm_p+0xe4>)
 80004f0:	6013      	str	r3, [r2, #0]
				offP();
 80004f2:	f7ff febf 	bl	8000274 <offP>
			break;
 80004f6:	e021      	b.n	800053c <fsm_p+0xd0>
			greenP();
 80004f8:	f7ff fea8 	bl	800024c <greenP>
			if( timer3_flag == 1) {
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <fsm_p+0xe8>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d10f      	bne.n	8000524 <fsm_p+0xb8>
				Print_Mode(P_GREEN);
 8000504:	2020      	movs	r0, #32
 8000506:	f000 fc79 	bl	8000dfc <Print_Mode>
				Print_TimeOut(timer3);
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <fsm_p+0xe4>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fc56 	bl	8000dc0 <Print_TimeOut>
				timer3--;
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <fsm_p+0xe4>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	3b01      	subs	r3, #1
 800051a:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <fsm_p+0xe4>)
 800051c:	6013      	str	r3, [r2, #0]
				setTimer3 (OneSec) ;
 800051e:	2064      	movs	r0, #100	; 0x64
 8000520:	f001 f982 	bl	8001828 <setTimer3>
			if(timer3==STOP){
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <fsm_p+0xe4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d109      	bne.n	8000540 <fsm_p+0xd4>
				status4=INIT;
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <fsm_p+0xdc>)
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <fsm_p+0xe0>)
 8000530:	601a      	str	r2, [r3, #0]
			break;
 8000532:	e005      	b.n	8000540 <fsm_p+0xd4>
			break;
 8000534:	bf00      	nop
 8000536:	e004      	b.n	8000542 <fsm_p+0xd6>
			break;
 8000538:	bf00      	nop
 800053a:	e002      	b.n	8000542 <fsm_p+0xd6>
			break;
 800053c:	bf00      	nop
 800053e:	e000      	b.n	8000542 <fsm_p+0xd6>
			break;
 8000540:	bf00      	nop
	}
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000008 	.word	0x20000008
 800054c:	01605b22 	.word	0x01605b22
 8000550:	200000cc 	.word	0x200000cc
 8000554:	200000e0 	.word	0x200000e0
 8000558:	20000010 	.word	0x20000010
 800055c:	51eb851f 	.word	0x51eb851f

08000560 <fsm_automatic_run3>:
void fsm_automatic_run3(){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	switch (status3	) {
 8000564:	4b88      	ldr	r3, [pc, #544]	; (8000788 <fsm_automatic_run3+0x228>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a88      	ldr	r2, [pc, #544]	; (800078c <fsm_automatic_run3+0x22c>)
 800056a:	4293      	cmp	r3, r2
 800056c:	f000 80f3 	beq.w	8000756 <fsm_automatic_run3+0x1f6>
 8000570:	4a86      	ldr	r2, [pc, #536]	; (800078c <fsm_automatic_run3+0x22c>)
 8000572:	4293      	cmp	r3, r2
 8000574:	f300 832f 	bgt.w	8000bd6 <fsm_automatic_run3+0x676>
 8000578:	2b17      	cmp	r3, #23
 800057a:	dc23      	bgt.n	80005c4 <fsm_automatic_run3+0x64>
 800057c:	2b0b      	cmp	r3, #11
 800057e:	f2c0 832a 	blt.w	8000bd6 <fsm_automatic_run3+0x676>
 8000582:	3b0b      	subs	r3, #11
 8000584:	2b0c      	cmp	r3, #12
 8000586:	f200 8326 	bhi.w	8000bd6 <fsm_automatic_run3+0x676>
 800058a:	a201      	add	r2, pc, #4	; (adr r2, 8000590 <fsm_automatic_run3+0x30>)
 800058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000590:	080007c1 	.word	0x080007c1
 8000594:	080008a5 	.word	0x080008a5
 8000598:	08000989 	.word	0x08000989
 800059c:	08000bd7 	.word	0x08000bd7
 80005a0:	08000bd7 	.word	0x08000bd7
 80005a4:	08000bd7 	.word	0x08000bd7
 80005a8:	08000bd7 	.word	0x08000bd7
 80005ac:	08000bd7 	.word	0x08000bd7
 80005b0:	08000bd7 	.word	0x08000bd7
 80005b4:	08000bd7 	.word	0x08000bd7
 80005b8:	08000a79 	.word	0x08000a79
 80005bc:	08000ae7 	.word	0x08000ae7
 80005c0:	08000b5f 	.word	0x08000b5f
 80005c4:	2b64      	cmp	r3, #100	; 0x64
 80005c6:	f040 8306 	bne.w	8000bd6 <fsm_automatic_run3+0x676>
		case RUNNING:
			if( timer0_flag == 1) {
 80005ca:	4b71      	ldr	r3, [pc, #452]	; (8000790 <fsm_automatic_run3+0x230>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d116      	bne.n	8000600 <fsm_automatic_run3+0xa0>
//				Pri
				Print_Time1(timer);
 80005d2:	4b70      	ldr	r3, [pc, #448]	; (8000794 <fsm_automatic_run3+0x234>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fc4c 	bl	8000e74 <Print_Time1>
				Print_Time2(timer2);
 80005dc:	4b6e      	ldr	r3, [pc, #440]	; (8000798 <fsm_automatic_run3+0x238>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fc65 	bl	8000eb0 <Print_Time2>
				timer--;
 80005e6:	4b6b      	ldr	r3, [pc, #428]	; (8000794 <fsm_automatic_run3+0x234>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	4a69      	ldr	r2, [pc, #420]	; (8000794 <fsm_automatic_run3+0x234>)
 80005ee:	6013      	str	r3, [r2, #0]
				timer2--;
 80005f0:	4b69      	ldr	r3, [pc, #420]	; (8000798 <fsm_automatic_run3+0x238>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	4a68      	ldr	r2, [pc, #416]	; (8000798 <fsm_automatic_run3+0x238>)
 80005f8:	6013      	str	r3, [r2, #0]
				setTimer0 (OneSec);
 80005fa:	2064      	movs	r0, #100	; 0x64
 80005fc:	f001 f900 	bl	8001800 <setTimer0>
//					Print_HELLO();
				}
			if(button_flag[0]==1){
 8000600:	4b66      	ldr	r3, [pc, #408]	; (800079c <fsm_automatic_run3+0x23c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d128      	bne.n	800065a <fsm_automatic_run3+0xfa>
				button_flag[0]=0;
 8000608:	4b64      	ldr	r3, [pc, #400]	; (800079c <fsm_automatic_run3+0x23c>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
				status1=Waiting;
 800060e:	4b64      	ldr	r3, [pc, #400]	; (80007a0 <fsm_automatic_run3+0x240>)
 8000610:	2263      	movs	r2, #99	; 0x63
 8000612:	601a      	str	r2, [r3, #0]
				status2=Waiting;
 8000614:	4b63      	ldr	r3, [pc, #396]	; (80007a4 <fsm_automatic_run3+0x244>)
 8000616:	2263      	movs	r2, #99	; 0x63
 8000618:	601a      	str	r2, [r3, #0]
				status4=Waiting;
 800061a:	4b63      	ldr	r3, [pc, #396]	; (80007a8 <fsm_automatic_run3+0x248>)
 800061c:	2263      	movs	r2, #99	; 0x63
 800061e:	601a      	str	r2, [r3, #0]
				status3=MAN_RED;
 8000620:	4b59      	ldr	r3, [pc, #356]	; (8000788 <fsm_automatic_run3+0x228>)
 8000622:	220b      	movs	r2, #11
 8000624:	601a      	str	r2, [r3, #0]
				setTimer0(OneSec);
 8000626:	2064      	movs	r0, #100	; 0x64
 8000628:	f001 f8ea 	bl	8001800 <setTimer0>
				timer = MAN_RED;
 800062c:	4b59      	ldr	r3, [pc, #356]	; (8000794 <fsm_automatic_run3+0x234>)
 800062e:	220b      	movs	r2, #11
 8000630:	601a      	str	r2, [r3, #0]
				timer2=RED_TIME/OneSec;
 8000632:	4b5e      	ldr	r3, [pc, #376]	; (80007ac <fsm_automatic_run3+0x24c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a5e      	ldr	r2, [pc, #376]	; (80007b0 <fsm_automatic_run3+0x250>)
 8000638:	fb82 1203 	smull	r1, r2, r2, r3
 800063c:	1152      	asrs	r2, r2, #5
 800063e:	17db      	asrs	r3, r3, #31
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	4a55      	ldr	r2, [pc, #340]	; (8000798 <fsm_automatic_run3+0x238>)
 8000644:	6013      	str	r3, [r2, #0]
//				setTimerOut1(TIME_OUT);
				timer3= TIME_OUT/OneSec;
 8000646:	4b5b      	ldr	r3, [pc, #364]	; (80007b4 <fsm_automatic_run3+0x254>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a59      	ldr	r2, [pc, #356]	; (80007b0 <fsm_automatic_run3+0x250>)
 800064c:	fb82 1203 	smull	r1, r2, r2, r3
 8000650:	1152      	asrs	r2, r2, #5
 8000652:	17db      	asrs	r3, r3, #31
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	4a58      	ldr	r2, [pc, #352]	; (80007b8 <fsm_automatic_run3+0x258>)
 8000658:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[1]==1)
 800065a:	4b50      	ldr	r3, [pc, #320]	; (800079c <fsm_automatic_run3+0x23c>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d132      	bne.n	80006c8 <fsm_automatic_run3+0x168>
			{
				button_flag[1] = 0;
 8000662:	4b4e      	ldr	r3, [pc, #312]	; (800079c <fsm_automatic_run3+0x23c>)
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
				Print_HELLO();
 8000668:	f000 fb92 	bl	8000d90 <Print_HELLO>
//				HAL_GPIO_WritePin(GPIOB,ledpa_Pin, GPIO_PIN_RESET);
//				HAL_GPIO_WritePin(GPIOA,ledpb_Pin, GPIO_PIN_SET);
				switch (status1) {
 800066c:	4b4c      	ldr	r3, [pc, #304]	; (80007a0 <fsm_automatic_run3+0x240>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b03      	cmp	r3, #3
 8000672:	d00a      	beq.n	800068a <fsm_automatic_run3+0x12a>
 8000674:	2b03      	cmp	r3, #3
 8000676:	dc10      	bgt.n	800069a <fsm_automatic_run3+0x13a>
 8000678:	2b01      	cmp	r3, #1
 800067a:	d002      	beq.n	8000682 <fsm_automatic_run3+0x122>
 800067c:	2b02      	cmp	r3, #2
 800067e:	d008      	beq.n	8000692 <fsm_automatic_run3+0x132>
						break;
					case AUTO_GREEN:
						status3 = HAND_YELLOW;
						break;
					default:
						break;
 8000680:	e00b      	b.n	800069a <fsm_automatic_run3+0x13a>
						status3 = HAND_GREEN;
 8000682:	4b41      	ldr	r3, [pc, #260]	; (8000788 <fsm_automatic_run3+0x228>)
 8000684:	2216      	movs	r2, #22
 8000686:	601a      	str	r2, [r3, #0]
						break;
 8000688:	e008      	b.n	800069c <fsm_automatic_run3+0x13c>
						status3 = HAND_RED;
 800068a:	4b3f      	ldr	r3, [pc, #252]	; (8000788 <fsm_automatic_run3+0x228>)
 800068c:	2215      	movs	r2, #21
 800068e:	601a      	str	r2, [r3, #0]
						break;
 8000690:	e004      	b.n	800069c <fsm_automatic_run3+0x13c>
						status3 = HAND_YELLOW;
 8000692:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <fsm_automatic_run3+0x228>)
 8000694:	2217      	movs	r2, #23
 8000696:	601a      	str	r2, [r3, #0]
						break;
 8000698:	e000      	b.n	800069c <fsm_automatic_run3+0x13c>
						break;
 800069a:	bf00      	nop
				}
				setTimer0 (OneSec);
 800069c:	2064      	movs	r0, #100	; 0x64
 800069e:	f001 f8af 	bl	8001800 <setTimer0>
//				setTimerOut1(TIME_OUT);
				timer=TIME_OUT/OneSec;
 80006a2:	4b44      	ldr	r3, [pc, #272]	; (80007b4 <fsm_automatic_run3+0x254>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a42      	ldr	r2, [pc, #264]	; (80007b0 <fsm_automatic_run3+0x250>)
 80006a8:	fb82 1203 	smull	r1, r2, r2, r3
 80006ac:	1152      	asrs	r2, r2, #5
 80006ae:	17db      	asrs	r3, r3, #31
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	4a38      	ldr	r2, [pc, #224]	; (8000794 <fsm_automatic_run3+0x234>)
 80006b4:	6013      	str	r3, [r2, #0]
				status1 = Waiting;
 80006b6:	4b3a      	ldr	r3, [pc, #232]	; (80007a0 <fsm_automatic_run3+0x240>)
 80006b8:	2263      	movs	r2, #99	; 0x63
 80006ba:	601a      	str	r2, [r3, #0]
				status2 = Waiting;
 80006bc:	4b39      	ldr	r3, [pc, #228]	; (80007a4 <fsm_automatic_run3+0x244>)
 80006be:	2263      	movs	r2, #99	; 0x63
 80006c0:	601a      	str	r2, [r3, #0]
				status4 = Waiting;
 80006c2:	4b39      	ldr	r3, [pc, #228]	; (80007a8 <fsm_automatic_run3+0x248>)
 80006c4:	2263      	movs	r2, #99	; 0x63
 80006c6:	601a      	str	r2, [r3, #0]

			}
			if(button_flag[3]==1){
 80006c8:	4b34      	ldr	r3, [pc, #208]	; (800079c <fsm_automatic_run3+0x23c>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	f040 8284 	bne.w	8000bda <fsm_automatic_run3+0x67a>
				button_flag[3]=0;
 80006d2:	4b32      	ldr	r3, [pc, #200]	; (800079c <fsm_automatic_run3+0x23c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
				if(status1== AUTO_RED){//oke
 80006d8:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <fsm_automatic_run3+0x240>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d10c      	bne.n	80006fa <fsm_automatic_run3+0x19a>
					status4=P_GREEN;
 80006e0:	4b31      	ldr	r3, [pc, #196]	; (80007a8 <fsm_automatic_run3+0x248>)
 80006e2:	2220      	movs	r2, #32
 80006e4:	601a      	str	r2, [r3, #0]
					redP();
 80006e6:	f7ff fd9d 	bl	8000224 <redP>
//					setTimerOut2(1000);
					setTimer3(OneSec);
 80006ea:	2064      	movs	r0, #100	; 0x64
 80006ec:	f001 f89c 	bl	8001828 <setTimer3>
					timer3=timer-1;
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <fsm_automatic_run3+0x234>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	4a30      	ldr	r2, [pc, #192]	; (80007b8 <fsm_automatic_run3+0x258>)
 80006f8:	6013      	str	r3, [r2, #0]
				}
				if(status1== AUTO_GREEN){//notoke
 80006fa:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <fsm_automatic_run3+0x240>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d115      	bne.n	800072e <fsm_automatic_run3+0x1ce>
					status4=P_RED;
 8000702:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <fsm_automatic_run3+0x248>)
 8000704:	221f      	movs	r2, #31
 8000706:	601a      	str	r2, [r3, #0]
					redP();
 8000708:	f7ff fd8c 	bl	8000224 <redP>
//					setTimerOut2(timer*100+YELLOW_TIME);
					setTimer3(OneSec);
 800070c:	2064      	movs	r0, #100	; 0x64
 800070e:	f001 f88b 	bl	8001828 <setTimer3>
					timer3=timer+YELLOW_TIME/OneSec-1;
 8000712:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <fsm_automatic_run3+0x25c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a26      	ldr	r2, [pc, #152]	; (80007b0 <fsm_automatic_run3+0x250>)
 8000718:	fb82 1203 	smull	r1, r2, r2, r3
 800071c:	1152      	asrs	r2, r2, #5
 800071e:	17db      	asrs	r3, r3, #31
 8000720:	1ad2      	subs	r2, r2, r3
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <fsm_automatic_run3+0x234>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4413      	add	r3, r2
 8000728:	3b01      	subs	r3, #1
 800072a:	4a23      	ldr	r2, [pc, #140]	; (80007b8 <fsm_automatic_run3+0x258>)
 800072c:	6013      	str	r3, [r2, #0]
				}
				if(status1== AUTO_YELLOW){//notoke
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <fsm_automatic_run3+0x240>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b03      	cmp	r3, #3
 8000734:	d10c      	bne.n	8000750 <fsm_automatic_run3+0x1f0>
					status4=P_RED;
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <fsm_automatic_run3+0x248>)
 8000738:	221f      	movs	r2, #31
 800073a:	601a      	str	r2, [r3, #0]
					offP();
 800073c:	f7ff fd9a 	bl	8000274 <offP>
//					setTimer2(timer*100);
					setTimer3(OneSec);
 8000740:	2064      	movs	r0, #100	; 0x64
 8000742:	f001 f871 	bl	8001828 <setTimer3>
					timer3=timer-1;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <fsm_automatic_run3+0x234>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	3b01      	subs	r3, #1
 800074c:	4a1a      	ldr	r2, [pc, #104]	; (80007b8 <fsm_automatic_run3+0x258>)
 800074e:	6013      	str	r3, [r2, #0]
				}
				Print_HELLO();
 8000750:	f000 fb1e 	bl	8000d90 <Print_HELLO>
			}
			break;
 8000754:	e241      	b.n	8000bda <fsm_automatic_run3+0x67a>

		case INIT:
			Print_Mode(INIT);
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <fsm_automatic_run3+0x22c>)
 8000758:	f000 fb50 	bl	8000dfc <Print_Mode>
			Print_ERROR();
 800075c:	f000 fbc6 	bl	8000eec <Print_ERROR>
//			setTimerOut1(1);
			timer3=0;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <fsm_automatic_run3+0x258>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
			setTimer0(OneSec);
 8000766:	2064      	movs	r0, #100	; 0x64
 8000768:	f001 f84a 	bl	8001800 <setTimer0>
			status1=INIT;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <fsm_automatic_run3+0x240>)
 800076e:	4a07      	ldr	r2, [pc, #28]	; (800078c <fsm_automatic_run3+0x22c>)
 8000770:	601a      	str	r2, [r3, #0]
			status2=INIT;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <fsm_automatic_run3+0x244>)
 8000774:	4a05      	ldr	r2, [pc, #20]	; (800078c <fsm_automatic_run3+0x22c>)
 8000776:	601a      	str	r2, [r3, #0]
			status4=INIT;
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <fsm_automatic_run3+0x248>)
 800077a:	4a04      	ldr	r2, [pc, #16]	; (800078c <fsm_automatic_run3+0x22c>)
 800077c:	601a      	str	r2, [r3, #0]
			status3=RUNNING;
 800077e:	4b02      	ldr	r3, [pc, #8]	; (8000788 <fsm_automatic_run3+0x228>)
 8000780:	2264      	movs	r2, #100	; 0x64
 8000782:	601a      	str	r2, [r3, #0]



			break;
 8000784:	e230      	b.n	8000be8 <fsm_automatic_run3+0x688>
 8000786:	bf00      	nop
 8000788:	2000000c 	.word	0x2000000c
 800078c:	01605b22 	.word	0x01605b22
 8000790:	200000d8 	.word	0x200000d8
 8000794:	200000c4 	.word	0x200000c4
 8000798:	200000c8 	.word	0x200000c8
 800079c:	200000f8 	.word	0x200000f8
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000004 	.word	0x20000004
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000010 	.word	0x20000010
 80007b0:	51eb851f 	.word	0x51eb851f
 80007b4:	2000001c 	.word	0x2000001c
 80007b8:	200000cc 	.word	0x200000cc
 80007bc:	20000018 	.word	0x20000018
		case MAN_RED:
			toogleRed();
 80007c0:	f7ff fcc4 	bl	800014c <toogleRed>
			toogleRed1();
 80007c4:	f7ff fcfe 	bl	80001c4 <toogleRed1>
			if( timer0_flag == 1) {
 80007c8:	4b9f      	ldr	r3, [pc, #636]	; (8000a48 <fsm_automatic_run3+0x4e8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d116      	bne.n	80007fe <fsm_automatic_run3+0x29e>
				Print_Mode(timer);
 80007d0:	4b9e      	ldr	r3, [pc, #632]	; (8000a4c <fsm_automatic_run3+0x4ec>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fb11 	bl	8000dfc <Print_Mode>
				Print_Time(timer2);
 80007da:	4b9d      	ldr	r3, [pc, #628]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 fb2a 	bl	8000e38 <Print_Time>
				Print_TimeOut(timer3);
 80007e4:	4b9b      	ldr	r3, [pc, #620]	; (8000a54 <fsm_automatic_run3+0x4f4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fae9 	bl	8000dc0 <Print_TimeOut>
				timer3--;
 80007ee:	4b99      	ldr	r3, [pc, #612]	; (8000a54 <fsm_automatic_run3+0x4f4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	4a97      	ldr	r2, [pc, #604]	; (8000a54 <fsm_automatic_run3+0x4f4>)
 80007f6:	6013      	str	r3, [r2, #0]
				setTimer0 (OneSec) ;
 80007f8:	2064      	movs	r0, #100	; 0x64
 80007fa:	f001 f801 	bl	8001800 <setTimer0>
				}
			if(timer2>99)timer2=0;
 80007fe:	4b94      	ldr	r3, [pc, #592]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b63      	cmp	r3, #99	; 0x63
 8000804:	dd02      	ble.n	800080c <fsm_automatic_run3+0x2ac>
 8000806:	4b92      	ldr	r3, [pc, #584]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
			RED_TIME=timer2*100;
 800080c:	4b90      	ldr	r3, [pc, #576]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2264      	movs	r2, #100	; 0x64
 8000812:	fb02 f303 	mul.w	r3, r2, r3
 8000816:	4a90      	ldr	r2, [pc, #576]	; (8000a58 <fsm_automatic_run3+0x4f8>)
 8000818:	6013      	str	r3, [r2, #0]
			if(button_flag[0]==1){
 800081a:	4b90      	ldr	r3, [pc, #576]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d11f      	bne.n	8000862 <fsm_automatic_run3+0x302>
				button_flag[0]=0;
 8000822:	4b8e      	ldr	r3, [pc, #568]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
				timer2=GREEN_TIME/OneSec;
 8000828:	4b8d      	ldr	r3, [pc, #564]	; (8000a60 <fsm_automatic_run3+0x500>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a8d      	ldr	r2, [pc, #564]	; (8000a64 <fsm_automatic_run3+0x504>)
 800082e:	fb82 1203 	smull	r1, r2, r2, r3
 8000832:	1152      	asrs	r2, r2, #5
 8000834:	17db      	asrs	r3, r3, #31
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	4a85      	ldr	r2, [pc, #532]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 800083a:	6013      	str	r3, [r2, #0]
				timer = MAN_GREEN;
 800083c:	4b83      	ldr	r3, [pc, #524]	; (8000a4c <fsm_automatic_run3+0x4ec>)
 800083e:	220c      	movs	r2, #12
 8000840:	601a      	str	r2, [r3, #0]
				status3=MAN_GREEN;
 8000842:	4b89      	ldr	r3, [pc, #548]	; (8000a68 <fsm_automatic_run3+0x508>)
 8000844:	220c      	movs	r2, #12
 8000846:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000848:	2064      	movs	r0, #100	; 0x64
 800084a:	f000 ffd9 	bl	8001800 <setTimer0>
//				setTimerOut1(TIME_OUT);
				timer3= TIME_OUT/OneSec;
 800084e:	4b87      	ldr	r3, [pc, #540]	; (8000a6c <fsm_automatic_run3+0x50c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a84      	ldr	r2, [pc, #528]	; (8000a64 <fsm_automatic_run3+0x504>)
 8000854:	fb82 1203 	smull	r1, r2, r2, r3
 8000858:	1152      	asrs	r2, r2, #5
 800085a:	17db      	asrs	r3, r3, #31
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	4a7d      	ldr	r2, [pc, #500]	; (8000a54 <fsm_automatic_run3+0x4f4>)
 8000860:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[1]==1){
 8000862:	4b7e      	ldr	r3, [pc, #504]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d107      	bne.n	800087a <fsm_automatic_run3+0x31a>
				button_flag[1]=0;
 800086a:	4b7c      	ldr	r3, [pc, #496]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
				timer2++;
 8000870:	4b77      	ldr	r3, [pc, #476]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	4a76      	ldr	r2, [pc, #472]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 8000878:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 800087a:	4b78      	ldr	r3, [pc, #480]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d107      	bne.n	8000892 <fsm_automatic_run3+0x332>
				button_flag[2]=0;
 8000882:	4b76      	ldr	r3, [pc, #472]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
				timer2--;
 8000888:	4b71      	ldr	r3, [pc, #452]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	3b01      	subs	r3, #1
 800088e:	4a70      	ldr	r2, [pc, #448]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 8000890:	6013      	str	r3, [r2, #0]
			}
			if(timer3==STOP){
 8000892:	4b70      	ldr	r3, [pc, #448]	; (8000a54 <fsm_automatic_run3+0x4f4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	f040 81a1 	bne.w	8000bde <fsm_automatic_run3+0x67e>
				status3=INIT;
 800089c:	4b72      	ldr	r3, [pc, #456]	; (8000a68 <fsm_automatic_run3+0x508>)
 800089e:	4a74      	ldr	r2, [pc, #464]	; (8000a70 <fsm_automatic_run3+0x510>)
 80008a0:	601a      	str	r2, [r3, #0]
			}
			break;
 80008a2:	e19c      	b.n	8000bde <fsm_automatic_run3+0x67e>
		case MAN_GREEN:

			if( timer0_flag == 1) {
 80008a4:	4b68      	ldr	r3, [pc, #416]	; (8000a48 <fsm_automatic_run3+0x4e8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d116      	bne.n	80008da <fsm_automatic_run3+0x37a>
				Print_Mode(timer);
 80008ac:	4b67      	ldr	r3, [pc, #412]	; (8000a4c <fsm_automatic_run3+0x4ec>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 faa3 	bl	8000dfc <Print_Mode>
				Print_Time(timer2);
 80008b6:	4b66      	ldr	r3, [pc, #408]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fabc 	bl	8000e38 <Print_Time>
				Print_TimeOut(timer3);
 80008c0:	4b64      	ldr	r3, [pc, #400]	; (8000a54 <fsm_automatic_run3+0x4f4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fa7b 	bl	8000dc0 <Print_TimeOut>
				timer3--;
 80008ca:	4b62      	ldr	r3, [pc, #392]	; (8000a54 <fsm_automatic_run3+0x4f4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	4a60      	ldr	r2, [pc, #384]	; (8000a54 <fsm_automatic_run3+0x4f4>)
 80008d2:	6013      	str	r3, [r2, #0]
				setTimer0 (OneSec) ;
 80008d4:	2064      	movs	r0, #100	; 0x64
 80008d6:	f000 ff93 	bl	8001800 <setTimer0>
				}
			toogleGreen();
 80008da:	f7ff fc4b 	bl	8000174 <toogleGreen>
			toogleGreen1();
 80008de:	f7ff fc81 	bl	80001e4 <toogleGreen1>
			if(timer2>99)timer2=0;
 80008e2:	4b5b      	ldr	r3, [pc, #364]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b63      	cmp	r3, #99	; 0x63
 80008e8:	dd02      	ble.n	80008f0 <fsm_automatic_run3+0x390>
 80008ea:	4b59      	ldr	r3, [pc, #356]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]

			GREEN_TIME=timer2*100;
 80008f0:	4b57      	ldr	r3, [pc, #348]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2264      	movs	r2, #100	; 0x64
 80008f6:	fb02 f303 	mul.w	r3, r2, r3
 80008fa:	4a59      	ldr	r2, [pc, #356]	; (8000a60 <fsm_automatic_run3+0x500>)
 80008fc:	6013      	str	r3, [r2, #0]
			if(button_flag[0]==1){
 80008fe:	4b57      	ldr	r3, [pc, #348]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d11f      	bne.n	8000946 <fsm_automatic_run3+0x3e6>
				button_flag[0]=0;
 8000906:	4b55      	ldr	r3, [pc, #340]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
				timer2=YELLOW_TIME/OneSec;
 800090c:	4b59      	ldr	r3, [pc, #356]	; (8000a74 <fsm_automatic_run3+0x514>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a54      	ldr	r2, [pc, #336]	; (8000a64 <fsm_automatic_run3+0x504>)
 8000912:	fb82 1203 	smull	r1, r2, r2, r3
 8000916:	1152      	asrs	r2, r2, #5
 8000918:	17db      	asrs	r3, r3, #31
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	4a4c      	ldr	r2, [pc, #304]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 800091e:	6013      	str	r3, [r2, #0]
				status3=MAN_YELLOW;
 8000920:	4b51      	ldr	r3, [pc, #324]	; (8000a68 <fsm_automatic_run3+0x508>)
 8000922:	220d      	movs	r2, #13
 8000924:	601a      	str	r2, [r3, #0]
				timer = MAN_YELLOW;
 8000926:	4b49      	ldr	r3, [pc, #292]	; (8000a4c <fsm_automatic_run3+0x4ec>)
 8000928:	220d      	movs	r2, #13
 800092a:	601a      	str	r2, [r3, #0]
				setTimer0(OneSec);
 800092c:	2064      	movs	r0, #100	; 0x64
 800092e:	f000 ff67 	bl	8001800 <setTimer0>
//				setTimerOut1(TIME_OUT);
				timer3= TIME_OUT/OneSec;
 8000932:	4b4e      	ldr	r3, [pc, #312]	; (8000a6c <fsm_automatic_run3+0x50c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a4b      	ldr	r2, [pc, #300]	; (8000a64 <fsm_automatic_run3+0x504>)
 8000938:	fb82 1203 	smull	r1, r2, r2, r3
 800093c:	1152      	asrs	r2, r2, #5
 800093e:	17db      	asrs	r3, r3, #31
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	4a44      	ldr	r2, [pc, #272]	; (8000a54 <fsm_automatic_run3+0x4f4>)
 8000944:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[1]==1){
 8000946:	4b45      	ldr	r3, [pc, #276]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d107      	bne.n	800095e <fsm_automatic_run3+0x3fe>
				button_flag[1]=0;
 800094e:	4b43      	ldr	r3, [pc, #268]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
				timer2++;
 8000954:	4b3e      	ldr	r3, [pc, #248]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	4a3d      	ldr	r2, [pc, #244]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 800095c:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 800095e:	4b3f      	ldr	r3, [pc, #252]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d107      	bne.n	8000976 <fsm_automatic_run3+0x416>
				button_flag[2]=0;
 8000966:	4b3d      	ldr	r3, [pc, #244]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
				timer2--;
 800096c:	4b38      	ldr	r3, [pc, #224]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3b01      	subs	r3, #1
 8000972:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 8000974:	6013      	str	r3, [r2, #0]
			}
			if(timer3==STOP){
 8000976:	4b37      	ldr	r3, [pc, #220]	; (8000a54 <fsm_automatic_run3+0x4f4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	f040 8131 	bne.w	8000be2 <fsm_automatic_run3+0x682>
				status3=INIT;
 8000980:	4b39      	ldr	r3, [pc, #228]	; (8000a68 <fsm_automatic_run3+0x508>)
 8000982:	4a3b      	ldr	r2, [pc, #236]	; (8000a70 <fsm_automatic_run3+0x510>)
 8000984:	601a      	str	r2, [r3, #0]
			}

			break;
 8000986:	e12c      	b.n	8000be2 <fsm_automatic_run3+0x682>
		case MAN_YELLOW:
			if( timer0_flag == 1) {
 8000988:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <fsm_automatic_run3+0x4e8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d116      	bne.n	80009be <fsm_automatic_run3+0x45e>
				Print_Mode(timer);
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <fsm_automatic_run3+0x4ec>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fa31 	bl	8000dfc <Print_Mode>
				Print_Time(timer2);
 800099a:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fa4a 	bl	8000e38 <Print_Time>
				Print_TimeOut(timer3);
 80009a4:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <fsm_automatic_run3+0x4f4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fa09 	bl	8000dc0 <Print_TimeOut>
				setTimer0 (OneSec) ;
 80009ae:	2064      	movs	r0, #100	; 0x64
 80009b0:	f000 ff26 	bl	8001800 <setTimer0>
				timer3--;
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <fsm_automatic_run3+0x4f4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	4a26      	ldr	r2, [pc, #152]	; (8000a54 <fsm_automatic_run3+0x4f4>)
 80009bc:	6013      	str	r3, [r2, #0]
				}
			toogleYellow();
 80009be:	f7ff fbed 	bl	800019c <toogleYellow>
			toogleYellow1();
 80009c2:	f7ff fc1f 	bl	8000204 <toogleYellow1>
			if(timer2>99)timer2=3;
 80009c6:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b63      	cmp	r3, #99	; 0x63
 80009cc:	dd02      	ble.n	80009d4 <fsm_automatic_run3+0x474>
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 80009d0:	2203      	movs	r2, #3
 80009d2:	601a      	str	r2, [r3, #0]
			if(timer2<3)timer2=3;
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	dc02      	bgt.n	80009e2 <fsm_automatic_run3+0x482>
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 80009de:	2203      	movs	r2, #3
 80009e0:	601a      	str	r2, [r3, #0]
			YELLOW_TIME=timer2*100;
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2264      	movs	r2, #100	; 0x64
 80009e8:	fb02 f303 	mul.w	r3, r2, r3
 80009ec:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <fsm_automatic_run3+0x514>)
 80009ee:	6013      	str	r3, [r2, #0]
			if(button_flag[0]==1){
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d105      	bne.n	8000a04 <fsm_automatic_run3+0x4a4>
				button_flag[0]=0;
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
				status3=INIT;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <fsm_automatic_run3+0x508>)
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <fsm_automatic_run3+0x510>)
 8000a02:	601a      	str	r2, [r3, #0]
			}
			if(button_flag[1]==1){
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d107      	bne.n	8000a1c <fsm_automatic_run3+0x4bc>
				button_flag[1]=0;
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
				timer2++;
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 8000a1a:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d107      	bne.n	8000a34 <fsm_automatic_run3+0x4d4>
				button_flag[2]=0;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <fsm_automatic_run3+0x4fc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
				timer2--;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <fsm_automatic_run3+0x4f0>)
 8000a32:	6013      	str	r3, [r2, #0]
			}
			if(timer3==STOP){
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <fsm_automatic_run3+0x4f4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	f040 80d4 	bne.w	8000be6 <fsm_automatic_run3+0x686>
				status3=INIT;
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <fsm_automatic_run3+0x508>)
 8000a40:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <fsm_automatic_run3+0x510>)
 8000a42:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a44:	e0cf      	b.n	8000be6 <fsm_automatic_run3+0x686>
 8000a46:	bf00      	nop
 8000a48:	200000d8 	.word	0x200000d8
 8000a4c:	200000c4 	.word	0x200000c4
 8000a50:	200000c8 	.word	0x200000c8
 8000a54:	200000cc 	.word	0x200000cc
 8000a58:	20000010 	.word	0x20000010
 8000a5c:	200000f8 	.word	0x200000f8
 8000a60:	20000014 	.word	0x20000014
 8000a64:	51eb851f 	.word	0x51eb851f
 8000a68:	2000000c 	.word	0x2000000c
 8000a6c:	2000001c 	.word	0x2000001c
 8000a70:	01605b22 	.word	0x01605b22
 8000a74:	20000018 	.word	0x20000018
		case HAND_RED:
			if(timer0_flag == 1) {
 8000a78:	4b5c      	ldr	r3, [pc, #368]	; (8000bec <fsm_automatic_run3+0x68c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d10f      	bne.n	8000aa0 <fsm_automatic_run3+0x540>
				timer--;
 8000a80:	4b5b      	ldr	r3, [pc, #364]	; (8000bf0 <fsm_automatic_run3+0x690>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	4a5a      	ldr	r2, [pc, #360]	; (8000bf0 <fsm_automatic_run3+0x690>)
 8000a88:	6013      	str	r3, [r2, #0]
				Print_Mode(HAND_RED);
 8000a8a:	2015      	movs	r0, #21
 8000a8c:	f000 f9b6 	bl	8000dfc <Print_Mode>
				Print_TimeOut(timer);
 8000a90:	4b57      	ldr	r3, [pc, #348]	; (8000bf0 <fsm_automatic_run3+0x690>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f993 	bl	8000dc0 <Print_TimeOut>
				setTimer0 (OneSec) ;
 8000a9a:	2064      	movs	r0, #100	; 0x64
 8000a9c:	f000 feb0 	bl	8001800 <setTimer0>
			}

			if(button_flag[1]==1){
 8000aa0:	4b54      	ldr	r3, [pc, #336]	; (8000bf4 <fsm_automatic_run3+0x694>)
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d112      	bne.n	8000ace <fsm_automatic_run3+0x56e>
				button_flag[1]=0;
 8000aa8:	4b52      	ldr	r3, [pc, #328]	; (8000bf4 <fsm_automatic_run3+0x694>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	605a      	str	r2, [r3, #4]
				status3=HAND_GREEN;
 8000aae:	4b52      	ldr	r3, [pc, #328]	; (8000bf8 <fsm_automatic_run3+0x698>)
 8000ab0:	2216      	movs	r2, #22
 8000ab2:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000ab4:	2064      	movs	r0, #100	; 0x64
 8000ab6:	f000 fea3 	bl	8001800 <setTimer0>
//				setTimerOut1(TIME_OUT);
				timer=TIME_OUT/OneSec;
 8000aba:	4b50      	ldr	r3, [pc, #320]	; (8000bfc <fsm_automatic_run3+0x69c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a50      	ldr	r2, [pc, #320]	; (8000c00 <fsm_automatic_run3+0x6a0>)
 8000ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac4:	1152      	asrs	r2, r2, #5
 8000ac6:	17db      	asrs	r3, r3, #31
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	4a49      	ldr	r2, [pc, #292]	; (8000bf0 <fsm_automatic_run3+0x690>)
 8000acc:	6013      	str	r3, [r2, #0]
			}
			if(timer==STOP){
 8000ace:	4b48      	ldr	r3, [pc, #288]	; (8000bf0 <fsm_automatic_run3+0x690>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d102      	bne.n	8000adc <fsm_automatic_run3+0x57c>
				status3=INIT;
 8000ad6:	4b48      	ldr	r3, [pc, #288]	; (8000bf8 <fsm_automatic_run3+0x698>)
 8000ad8:	4a4a      	ldr	r2, [pc, #296]	; (8000c04 <fsm_automatic_run3+0x6a4>)
 8000ada:	601a      	str	r2, [r3, #0]
			}
			 toogleGreen1();
 8000adc:	f7ff fb82 	bl	80001e4 <toogleGreen1>
			 toogleRed();
 8000ae0:	f7ff fb34 	bl	800014c <toogleRed>
			break;
 8000ae4:	e080      	b.n	8000be8 <fsm_automatic_run3+0x688>
		case HAND_GREEN:

			if(timer0_flag == 1) {
 8000ae6:	4b41      	ldr	r3, [pc, #260]	; (8000bec <fsm_automatic_run3+0x68c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d10f      	bne.n	8000b0e <fsm_automatic_run3+0x5ae>
				timer--;
 8000aee:	4b40      	ldr	r3, [pc, #256]	; (8000bf0 <fsm_automatic_run3+0x690>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	4a3e      	ldr	r2, [pc, #248]	; (8000bf0 <fsm_automatic_run3+0x690>)
 8000af6:	6013      	str	r3, [r2, #0]
				Print_Mode(HAND_GREEN);
 8000af8:	2016      	movs	r0, #22
 8000afa:	f000 f97f 	bl	8000dfc <Print_Mode>
				Print_TimeOut(timer);
 8000afe:	4b3c      	ldr	r3, [pc, #240]	; (8000bf0 <fsm_automatic_run3+0x690>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f95c 	bl	8000dc0 <Print_TimeOut>
				setTimer0 (OneSec) ;
 8000b08:	2064      	movs	r0, #100	; 0x64
 8000b0a:	f000 fe79 	bl	8001800 <setTimer0>
				}

			if(button_flag[1]==1){
 8000b0e:	4b39      	ldr	r3, [pc, #228]	; (8000bf4 <fsm_automatic_run3+0x694>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d117      	bne.n	8000b46 <fsm_automatic_run3+0x5e6>
				button_flag[1]=0;
 8000b16:	4b37      	ldr	r3, [pc, #220]	; (8000bf4 <fsm_automatic_run3+0x694>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
				status3=HAND_YELLOW;
 8000b1c:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <fsm_automatic_run3+0x698>)
 8000b1e:	2217      	movs	r2, #23
 8000b20:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000b22:	2064      	movs	r0, #100	; 0x64
 8000b24:	f000 fe6c 	bl	8001800 <setTimer0>
				setTimerOut1(TIME_OUT);
 8000b28:	4b34      	ldr	r3, [pc, #208]	; (8000bfc <fsm_automatic_run3+0x69c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 fe8f 	bl	8001850 <setTimerOut1>
				timer=TIME_OUT/OneSec;
 8000b32:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <fsm_automatic_run3+0x69c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a32      	ldr	r2, [pc, #200]	; (8000c00 <fsm_automatic_run3+0x6a0>)
 8000b38:	fb82 1203 	smull	r1, r2, r2, r3
 8000b3c:	1152      	asrs	r2, r2, #5
 8000b3e:	17db      	asrs	r3, r3, #31
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	4a2b      	ldr	r2, [pc, #172]	; (8000bf0 <fsm_automatic_run3+0x690>)
 8000b44:	6013      	str	r3, [r2, #0]
			}
			if(timer==STOP){
 8000b46:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <fsm_automatic_run3+0x690>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d102      	bne.n	8000b54 <fsm_automatic_run3+0x5f4>
				status3=INIT;
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <fsm_automatic_run3+0x698>)
 8000b50:	4a2c      	ldr	r2, [pc, #176]	; (8000c04 <fsm_automatic_run3+0x6a4>)
 8000b52:	601a      	str	r2, [r3, #0]
			}
			toogleRed1();
 8000b54:	f7ff fb36 	bl	80001c4 <toogleRed1>
			toogleGreen();
 8000b58:	f7ff fb0c 	bl	8000174 <toogleGreen>
			break;
 8000b5c:	e044      	b.n	8000be8 <fsm_automatic_run3+0x688>
		case HAND_YELLOW:
			if(timer0_flag == 1) {
 8000b5e:	4b23      	ldr	r3, [pc, #140]	; (8000bec <fsm_automatic_run3+0x68c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d10f      	bne.n	8000b86 <fsm_automatic_run3+0x626>
				timer--;
 8000b66:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <fsm_automatic_run3+0x690>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	4a20      	ldr	r2, [pc, #128]	; (8000bf0 <fsm_automatic_run3+0x690>)
 8000b6e:	6013      	str	r3, [r2, #0]
				Print_Mode(HAND_YELLOW);
 8000b70:	2017      	movs	r0, #23
 8000b72:	f000 f943 	bl	8000dfc <Print_Mode>
				Print_TimeOut(timer);
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <fsm_automatic_run3+0x690>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f920 	bl	8000dc0 <Print_TimeOut>
				setTimer0 (OneSec) ;
 8000b80:	2064      	movs	r0, #100	; 0x64
 8000b82:	f000 fe3d 	bl	8001800 <setTimer0>
				}
			if(button_flag[1]==1){
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <fsm_automatic_run3+0x694>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d117      	bne.n	8000bbe <fsm_automatic_run3+0x65e>
				button_flag[1]=0;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <fsm_automatic_run3+0x694>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
				status3=HAND_RED;
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <fsm_automatic_run3+0x698>)
 8000b96:	2215      	movs	r2, #21
 8000b98:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000b9a:	2064      	movs	r0, #100	; 0x64
 8000b9c:	f000 fe30 	bl	8001800 <setTimer0>
				setTimerOut1(TIME_OUT);
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <fsm_automatic_run3+0x69c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fe53 	bl	8001850 <setTimerOut1>
				timer=TIME_OUT/OneSec;
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <fsm_automatic_run3+0x69c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <fsm_automatic_run3+0x6a0>)
 8000bb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb4:	1152      	asrs	r2, r2, #5
 8000bb6:	17db      	asrs	r3, r3, #31
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <fsm_automatic_run3+0x690>)
 8000bbc:	6013      	str	r3, [r2, #0]
			}
			if(timer==STOP){
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <fsm_automatic_run3+0x690>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <fsm_automatic_run3+0x66c>
				status3=INIT;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <fsm_automatic_run3+0x698>)
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <fsm_automatic_run3+0x6a4>)
 8000bca:	601a      	str	r2, [r3, #0]
			}
			toogleRed1();
 8000bcc:	f7ff fafa 	bl	80001c4 <toogleRed1>
			toogleYellow();
 8000bd0:	f7ff fae4 	bl	800019c <toogleYellow>
			break;
 8000bd4:	e008      	b.n	8000be8 <fsm_automatic_run3+0x688>

		default:
			break;
 8000bd6:	bf00      	nop
 8000bd8:	e006      	b.n	8000be8 <fsm_automatic_run3+0x688>
			break;
 8000bda:	bf00      	nop
 8000bdc:	e004      	b.n	8000be8 <fsm_automatic_run3+0x688>
			break;
 8000bde:	bf00      	nop
 8000be0:	e002      	b.n	8000be8 <fsm_automatic_run3+0x688>
			break;
 8000be2:	bf00      	nop
 8000be4:	e000      	b.n	8000be8 <fsm_automatic_run3+0x688>
			break;
 8000be6:	bf00      	nop
	}
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200000d8 	.word	0x200000d8
 8000bf0:	200000c4 	.word	0x200000c4
 8000bf4:	200000f8 	.word	0x200000f8
 8000bf8:	2000000c 	.word	0x2000000c
 8000bfc:	2000001c 	.word	0x2000001c
 8000c00:	51eb851f 	.word	0x51eb851f
 8000c04:	01605b22 	.word	0x01605b22

08000c08 <subkeyProcess>:

//unsigned char is_button_pressed_1s()


void subkeyProcess(unsigned char i)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	button_flag[i] = 1;
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <subkeyProcess+0x20>)
 8000c16:	2101      	movs	r1, #1
 8000c18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200000f8 	.word	0x200000f8

08000c2c <button_reading>:
void button_reading()
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	e093      	b.n	8000d60 <button_reading+0x134>
	{
		debounceButtonBuffer0[i] = debounceButtonBuffer1[i];
 8000c38:	79fa      	ldrb	r2, [r7, #7]
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	494d      	ldr	r1, [pc, #308]	; (8000d74 <button_reading+0x148>)
 8000c3e:	5c89      	ldrb	r1, [r1, r2]
 8000c40:	4a4d      	ldr	r2, [pc, #308]	; (8000d78 <button_reading+0x14c>)
 8000c42:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 8000c44:	79fa      	ldrb	r2, [r7, #7]
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	494c      	ldr	r1, [pc, #304]	; (8000d7c <button_reading+0x150>)
 8000c4a:	5c89      	ldrb	r1, [r1, r2]
 8000c4c:	4a49      	ldr	r2, [pc, #292]	; (8000d74 <button_reading+0x148>)
 8000c4e:	54d1      	strb	r1, [r2, r3]
		switch (i)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d832      	bhi.n	8000cbc <button_reading+0x90>
 8000c56:	a201      	add	r2, pc, #4	; (adr r2, 8000c5c <button_reading+0x30>)
 8000c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5c:	08000c6d 	.word	0x08000c6d
 8000c60:	08000c81 	.word	0x08000c81
 8000c64:	08000c95 	.word	0x08000c95
 8000c68:	08000ca9 	.word	0x08000ca9
		{
			case 0:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_1_GPIO_Port, button_1_Pin);
 8000c6c:	79fc      	ldrb	r4, [r7, #7]
 8000c6e:	2102      	movs	r1, #2
 8000c70:	4843      	ldr	r0, [pc, #268]	; (8000d80 <button_reading+0x154>)
 8000c72:	f001 f9f5 	bl	8002060 <HAL_GPIO_ReadPin>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b40      	ldr	r3, [pc, #256]	; (8000d7c <button_reading+0x150>)
 8000c7c:	551a      	strb	r2, [r3, r4]
				break;
 8000c7e:	e022      	b.n	8000cc6 <button_reading+0x9a>
			case 1:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_2_GPIO_Port, button_2_Pin);
 8000c80:	79fc      	ldrb	r4, [r7, #7]
 8000c82:	2120      	movs	r1, #32
 8000c84:	483e      	ldr	r0, [pc, #248]	; (8000d80 <button_reading+0x154>)
 8000c86:	f001 f9eb 	bl	8002060 <HAL_GPIO_ReadPin>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b3b      	ldr	r3, [pc, #236]	; (8000d7c <button_reading+0x150>)
 8000c90:	551a      	strb	r2, [r3, r4]
				break;
 8000c92:	e018      	b.n	8000cc6 <button_reading+0x9a>
			case 2:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_3_GPIO_Port, button_3_Pin);
 8000c94:	79fc      	ldrb	r4, [r7, #7]
 8000c96:	2101      	movs	r1, #1
 8000c98:	483a      	ldr	r0, [pc, #232]	; (8000d84 <button_reading+0x158>)
 8000c9a:	f001 f9e1 	bl	8002060 <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <button_reading+0x150>)
 8000ca4:	551a      	strb	r2, [r3, r4]
				break;
 8000ca6:	e00e      	b.n	8000cc6 <button_reading+0x9a>
			case 3:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_p_GPIO_Port, button_p_Pin);
 8000ca8:	79fc      	ldrb	r4, [r7, #7]
 8000caa:	2102      	movs	r1, #2
 8000cac:	4835      	ldr	r0, [pc, #212]	; (8000d84 <button_reading+0x158>)
 8000cae:	f001 f9d7 	bl	8002060 <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b31      	ldr	r3, [pc, #196]	; (8000d7c <button_reading+0x150>)
 8000cb8:	551a      	strb	r2, [r3, r4]
				break;
 8000cba:	e004      	b.n	8000cc6 <button_reading+0x9a>
			default:
				debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4a2f      	ldr	r2, [pc, #188]	; (8000d7c <button_reading+0x150>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	54d1      	strb	r1, [r2, r3]
				break;
 8000cc4:	bf00      	nop
		}
		if((debounceButtonBuffer0[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]))
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4a2b      	ldr	r2, [pc, #172]	; (8000d78 <button_reading+0x14c>)
 8000cca:	5cd2      	ldrb	r2, [r2, r3]
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	4929      	ldr	r1, [pc, #164]	; (8000d74 <button_reading+0x148>)
 8000cd0:	5ccb      	ldrb	r3, [r1, r3]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d141      	bne.n	8000d5a <button_reading+0x12e>
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	4a26      	ldr	r2, [pc, #152]	; (8000d74 <button_reading+0x148>)
 8000cda:	5cd2      	ldrb	r2, [r2, r3]
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4927      	ldr	r1, [pc, #156]	; (8000d7c <button_reading+0x150>)
 8000ce0:	5ccb      	ldrb	r3, [r1, r3]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d139      	bne.n	8000d5a <button_reading+0x12e>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i])
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4a27      	ldr	r2, [pc, #156]	; (8000d88 <button_reading+0x15c>)
 8000cea:	5cd2      	ldrb	r2, [r2, r3]
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	4923      	ldr	r1, [pc, #140]	; (8000d7c <button_reading+0x150>)
 8000cf0:	5ccb      	ldrb	r3, [r1, r3]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d014      	beq.n	8000d20 <button_reading+0xf4>
			{
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	4920      	ldr	r1, [pc, #128]	; (8000d7c <button_reading+0x150>)
 8000cfc:	5c89      	ldrb	r1, [r1, r2]
 8000cfe:	4a22      	ldr	r2, [pc, #136]	; (8000d88 <button_reading+0x15c>)
 8000d00:	54d1      	strb	r1, [r2, r3]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED)
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <button_reading+0x15c>)
 8000d06:	5cd3      	ldrb	r3, [r2, r3]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d126      	bne.n	8000d5a <button_reading+0x12e>
				{
					counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	4a1f      	ldr	r2, [pc, #124]	; (8000d8c <button_reading+0x160>)
 8000d10:	2164      	movs	r1, #100	; 0x64
 8000d12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					subkeyProcess(i);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff75 	bl	8000c08 <subkeyProcess>
 8000d1e:	e01c      	b.n	8000d5a <button_reading+0x12e>
				}
			}
			else
			{
				counterForButtonPress1s[i]--;
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	4a1a      	ldr	r2, [pc, #104]	; (8000d8c <button_reading+0x160>)
 8000d24:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d28:	3a01      	subs	r2, #1
 8000d2a:	b291      	uxth	r1, r2
 8000d2c:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <button_reading+0x160>)
 8000d2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(counterForButtonPress1s[i] == 0)
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <button_reading+0x160>)
 8000d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10d      	bne.n	8000d5a <button_reading+0x12e>
				{
					if(buttonBuffer[i]== BUTTON_IS_PRESSED)
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	4a11      	ldr	r2, [pc, #68]	; (8000d88 <button_reading+0x15c>)
 8000d42:	5cd3      	ldrb	r3, [r2, r3]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d108      	bne.n	8000d5a <button_reading+0x12e>
					{
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <button_reading+0x160>)
 8000d4c:	2164      	movs	r1, #100	; 0x64
 8000d4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						subkeyProcess(i);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff57 	bl	8000c08 <subkeyProcess>
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	71fb      	strb	r3, [r7, #7]
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	f67f af68 	bls.w	8000c38 <button_reading+0xc>
					//buttonBuffer[i] = BUTTON_IS_RELEASED;
				}
			}
		}
	}
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd90      	pop	{r4, r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000b4 	.word	0x200000b4
 8000d78:	200000b0 	.word	0x200000b0
 8000d7c:	200000b8 	.word	0x200000b8
 8000d80:	40010800 	.word	0x40010800
 8000d84:	40010c00 	.word	0x40010c00
 8000d88:	200000ac 	.word	0x200000ac
 8000d8c:	200000bc 	.word	0x200000bc

08000d90 <Print_HELLO>:

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
void Print_HELLO()
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
	char str[30];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "HELLO\r"), 1000);
 8000d96:	463b      	mov	r3, r7
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <Print_HELLO+0x28>)
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fe98 	bl	8003ad0 <siprintf>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4639      	mov	r1, r7
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	4804      	ldr	r0, [pc, #16]	; (8000dbc <Print_HELLO+0x2c>)
 8000dac:	f002 f9d3 	bl	8003156 <HAL_UART_Transmit>
}
 8000db0:	bf00      	nop
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	0800435c 	.word	0x0800435c
 8000dbc:	20000164 	.word	0x20000164

08000dc0 <Print_TimeOut>:
void Toggle_led()
{
	HAL_GPIO_TogglePin(GPIOA, Led_1_Pin);
}
void Print_TimeOut(int abc){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "timeout: %d\r", temp), 1000);
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <Print_TimeOut+0x34>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 fe7b 	bl	8003ad0 <siprintf>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	f107 010c 	add.w	r1, r7, #12
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	4804      	ldr	r0, [pc, #16]	; (8000df8 <Print_TimeOut+0x38>)
 8000de8:	f002 f9b5 	bl	8003156 <HAL_UART_Transmit>
}
 8000dec:	bf00      	nop
 8000dee:	3730      	adds	r7, #48	; 0x30
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	08004364 	.word	0x08004364
 8000df8:	20000164 	.word	0x20000164

08000dfc <Print_Mode>:
	char str[30];
	int temp;
	temp=abc;
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time_P: %d\r", temp), 1000);
}
void Print_Mode(int abc){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	; 0x30
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Mode: %d\r", temp), 1000);
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <Print_Mode+0x34>)
 8000e10:	4618      	mov	r0, r3
 8000e12:	f002 fe5d 	bl	8003ad0 <siprintf>
 8000e16:	4603      	mov	r3, r0
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	f107 010c 	add.w	r1, r7, #12
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	4804      	ldr	r0, [pc, #16]	; (8000e34 <Print_Mode+0x38>)
 8000e24:	f002 f997 	bl	8003156 <HAL_UART_Transmit>
}
 8000e28:	bf00      	nop
 8000e2a:	3730      	adds	r7, #48	; 0x30
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	08004380 	.word	0x08004380
 8000e34:	20000164 	.word	0x20000164

08000e38 <Print_Time>:
void Print_Time(int abc){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time: %d\r", temp), 1000);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <Print_Time+0x34>)
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 fe3f 	bl	8003ad0 <siprintf>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	f107 010c 	add.w	r1, r7, #12
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	4804      	ldr	r0, [pc, #16]	; (8000e70 <Print_Time+0x38>)
 8000e60:	f002 f979 	bl	8003156 <HAL_UART_Transmit>
}
 8000e64:	bf00      	nop
 8000e66:	3730      	adds	r7, #48	; 0x30
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	0800438c 	.word	0x0800438c
 8000e70:	20000164 	.word	0x20000164

08000e74 <Print_Time1>:
void Print_Time1(int abc){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time_1: %d\r", temp), 1000);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <Print_Time1+0x34>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 fe21 	bl	8003ad0 <siprintf>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	f107 010c 	add.w	r1, r7, #12
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	4804      	ldr	r0, [pc, #16]	; (8000eac <Print_Time1+0x38>)
 8000e9c:	f002 f95b 	bl	8003156 <HAL_UART_Transmit>
}
 8000ea0:	bf00      	nop
 8000ea2:	3730      	adds	r7, #48	; 0x30
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	08004398 	.word	0x08004398
 8000eac:	20000164 	.word	0x20000164

08000eb0 <Print_Time2>:
void Print_Time2(int abc){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time_2: %d\r", temp), 1000);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <Print_Time2+0x34>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 fe03 	bl	8003ad0 <siprintf>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	f107 010c 	add.w	r1, r7, #12
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <Print_Time2+0x38>)
 8000ed8:	f002 f93d 	bl	8003156 <HAL_UART_Transmit>
}
 8000edc:	bf00      	nop
 8000ede:	3730      	adds	r7, #48	; 0x30
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	080043a4 	.word	0x080043a4
 8000ee8:	20000164 	.word	0x20000164

08000eec <Print_ERROR>:

void Print_ERROR(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
	char str[30];
//	int temp;
//	temp=abc;
	if(RED_TIME!=GREEN_TIME+YELLOW_TIME){
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <Print_ERROR+0x48>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <Print_ERROR+0x4c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	441a      	add	r2, r3
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <Print_ERROR+0x50>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d013      	beq.n	8000f2c <Print_ERROR+0x40>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ERROR 1 reset TIME\r"), 1000);
 8000f04:	463b      	mov	r3, r7
 8000f06:	490e      	ldr	r1, [pc, #56]	; (8000f40 <Print_ERROR+0x54>)
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 fde1 	bl	8003ad0 <siprintf>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	4639      	mov	r1, r7
 8000f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f18:	480a      	ldr	r0, [pc, #40]	; (8000f44 <Print_ERROR+0x58>)
 8000f1a:	f002 f91c 	bl	8003156 <HAL_UART_Transmit>
		RED_TIME = GREEN_TIME + YELLOW_TIME;
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <Print_ERROR+0x48>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <Print_ERROR+0x4c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <Print_ERROR+0x50>)
 8000f2a:	6013      	str	r3, [r2, #0]
	}
}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000014 	.word	0x20000014
 8000f38:	20000018 	.word	0x20000018
 8000f3c:	20000010 	.word	0x20000010
 8000f40:	080043b0 	.word	0x080043b0
 8000f44:	20000164 	.word	0x20000164

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4c:	f000 fcee 	bl	800192c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f50:	f000 f84a 	bl	8000fe8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init ();
 8000f54:	f000 f8fa 	bl	800114c <MX_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 f8f8 	bl	800114c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f5c:	f000 f880 	bl	8001060 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f60:	f000 f8ca 	bl	80010f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000f64:	4818      	ldr	r0, [pc, #96]	; (8000fc8 <main+0x80>)
 8000f66:	f001 fd15 	bl	8002994 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
//  HAL_GPIO_WritePin(GPIOB, ledpa_Pin|led1b_Pin|led2b_Pin|led2a_Pin, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(GPIOA, ledpb_Pin|led1a_Pin, GPIO_PIN_RESET);\char str[30];

//  Print_HELLO();
  SCH_Init();
 8000f6a:	f000 f97d 	bl	8001268 <SCH_Init>
//  Print_HELLO();
//  SCH_Add_Task(Toggle_led, 10, 500);
//  SCH_Add_Task(Print_HELLO, 10, 1000);
  setTimer0(100);
 8000f6e:	2064      	movs	r0, #100	; 0x64
 8000f70:	f000 fc46 	bl	8001800 <setTimer0>
//  setTimer1(2);
//  setTimer2(3);
  setTimer3(100);
 8000f74:	2064      	movs	r0, #100	; 0x64
 8000f76:	f000 fc57 	bl	8001828 <setTimer3>
//  setTimerOut1(1);
//  setTimerOut1(2);


  SCH_Add_Task(timerRun0, 20, 10);
 8000f7a:	220a      	movs	r2, #10
 8000f7c:	2114      	movs	r1, #20
 8000f7e:	4813      	ldr	r0, [pc, #76]	; (8000fcc <main+0x84>)
 8000f80:	f000 f97e 	bl	8001280 <SCH_Add_Task>
//  SCH_Add_Task(timerRun1, 20, 10);
//  SCH_Add_Task(timerRun2, 20, 10);
  SCH_Add_Task(timerRun3, 20, 10);
 8000f84:	220a      	movs	r2, #10
 8000f86:	2114      	movs	r1, #20
 8000f88:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <main+0x88>)
 8000f8a:	f000 f979 	bl	8001280 <SCH_Add_Task>
//  SCH_Add_Task(timerOut2, 20, 10);


//  SCH_Add_Task(Print_Time, 10, 990);

  SCH_Add_Task(button_reading, 10, 10);
 8000f8e:	220a      	movs	r2, #10
 8000f90:	210a      	movs	r1, #10
 8000f92:	4810      	ldr	r0, [pc, #64]	; (8000fd4 <main+0x8c>)
 8000f94:	f000 f974 	bl	8001280 <SCH_Add_Task>

  SCH_Add_Task(fsm_automatic_run1, 20, 10);
 8000f98:	220a      	movs	r2, #10
 8000f9a:	2114      	movs	r1, #20
 8000f9c:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <main+0x90>)
 8000f9e:	f000 f96f 	bl	8001280 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run2, 20, 10);
 8000fa2:	220a      	movs	r2, #10
 8000fa4:	2114      	movs	r1, #20
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <main+0x94>)
 8000fa8:	f000 f96a 	bl	8001280 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run3, 20, 10);
 8000fac:	220a      	movs	r2, #10
 8000fae:	2114      	movs	r1, #20
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <main+0x98>)
 8000fb2:	f000 f965 	bl	8001280 <SCH_Add_Task>
  SCH_Add_Task(fsm_p, 20, 10);
 8000fb6:	220a      	movs	r2, #10
 8000fb8:	2114      	movs	r1, #20
 8000fba:	480a      	ldr	r0, [pc, #40]	; (8000fe4 <main+0x9c>)
 8000fbc:	f000 f960 	bl	8001280 <SCH_Add_Task>
  while (1)
  {
//		 fsm_automatic_run1();
//		 fsm_automatic_run2();
//		 fsm_automatic_run3();
	  SCH_Dispatch_Tasks();
 8000fc0:	f000 fa24 	bl	800140c <SCH_Dispatch_Tasks>
 8000fc4:	e7fc      	b.n	8000fc0 <main+0x78>
 8000fc6:	bf00      	nop
 8000fc8:	2000011c 	.word	0x2000011c
 8000fcc:	08001879 	.word	0x08001879
 8000fd0:	080018ad 	.word	0x080018ad
 8000fd4:	08000c2d 	.word	0x08000c2d
 8000fd8:	0800029d 	.word	0x0800029d
 8000fdc:	08000385 	.word	0x08000385
 8000fe0:	08000561 	.word	0x08000561
 8000fe4:	0800046d 	.word	0x0800046d

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b090      	sub	sp, #64	; 0x40
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	2228      	movs	r2, #40	; 0x28
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 fd62 	bl	8003ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100e:	2301      	movs	r3, #1
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001012:	2310      	movs	r3, #16
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001016:	2300      	movs	r3, #0
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101a:	f107 0318 	add.w	r3, r7, #24
 800101e:	4618      	mov	r0, r3
 8001020:	f001 f84e 	bl	80020c0 <HAL_RCC_OscConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800102a:	f000 f918 	bl	800125e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	230f      	movs	r3, #15
 8001030:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f001 faba 	bl	80025c0 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001052:	f000 f904 	bl	800125e <Error_Handler>
  }
}
 8001056:	bf00      	nop
 8001058:	3740      	adds	r7, #64	; 0x40
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	463b      	mov	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_TIM2_Init+0x94>)
 800107e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001082:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_TIM2_Init+0x94>)
 8001086:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800108a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_TIM2_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_TIM2_Init+0x94>)
 8001094:	2209      	movs	r2, #9
 8001096:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_TIM2_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a4:	4813      	ldr	r0, [pc, #76]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010a6:	f001 fc25 	bl	80028f4 <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010b0:	f000 f8d5 	bl	800125e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010c2:	f001 fdbb 	bl	8002c3c <HAL_TIM_ConfigClockSource>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010cc:	f000 f8c7 	bl	800125e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010de:	f001 ff83 	bl	8002fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010e8:	f000 f8b9 	bl	800125e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000011c 	.word	0x2000011c

080010f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <MX_USART2_UART_Init+0x50>)
 8001100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001104:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001130:	f001 ffc4 	bl	80030bc <HAL_UART_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800113a:	f000 f890 	bl	800125e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000164 	.word	0x20000164
 8001148:	40004400 	.word	0x40004400

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b34      	ldr	r3, [pc, #208]	; (8001234 <MX_GPIO_Init+0xe8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a33      	ldr	r2, [pc, #204]	; (8001234 <MX_GPIO_Init+0xe8>)
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b31      	ldr	r3, [pc, #196]	; (8001234 <MX_GPIO_Init+0xe8>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <MX_GPIO_Init+0xe8>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <MX_GPIO_Init+0xe8>)
 800117e:	f043 0308 	orr.w	r3, r3, #8
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <MX_GPIO_Init+0xe8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_1_Pin|ledpb_Pin|led1a_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 8001196:	4828      	ldr	r0, [pc, #160]	; (8001238 <MX_GPIO_Init+0xec>)
 8001198:	f000 ff79 	bl	800208e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ledpa_Pin|led1b_Pin|led2b_Pin|led2a_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80011a2:	4826      	ldr	r0, [pc, #152]	; (800123c <MX_GPIO_Init+0xf0>)
 80011a4:	f000 ff73 	bl	800208e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011a8:	2301      	movs	r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	4619      	mov	r1, r3
 80011ba:	481f      	ldr	r0, [pc, #124]	; (8001238 <MX_GPIO_Init+0xec>)
 80011bc:	f000 fdd6 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : button_1_Pin button_2_Pin */
  GPIO_InitStruct.Pin = button_1_Pin|button_2_Pin;
 80011c0:	2322      	movs	r3, #34	; 0x22
 80011c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4619      	mov	r1, r3
 80011d2:	4819      	ldr	r0, [pc, #100]	; (8001238 <MX_GPIO_Init+0xec>)
 80011d4:	f000 fdca 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_1_Pin ledpb_Pin led1a_Pin */
  GPIO_InitStruct.Pin = Led_1_Pin|ledpb_Pin|led1a_Pin;
 80011d8:	f44f 63a8 	mov.w	r3, #1344	; 0x540
 80011dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2302      	movs	r3, #2
 80011e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	4619      	mov	r1, r3
 80011f0:	4811      	ldr	r0, [pc, #68]	; (8001238 <MX_GPIO_Init+0xec>)
 80011f2:	f000 fdbb 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : button_3_Pin button_p_Pin */
  GPIO_InitStruct.Pin = button_3_Pin|button_p_Pin;
 80011f6:	2303      	movs	r3, #3
 80011f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fe:	2301      	movs	r3, #1
 8001200:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	4619      	mov	r1, r3
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <MX_GPIO_Init+0xf0>)
 800120a:	f000 fdaf 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : ledpa_Pin led1b_Pin led2b_Pin led2a_Pin */
  GPIO_InitStruct.Pin = ledpa_Pin|led1b_Pin|led2b_Pin|led2a_Pin;
 800120e:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001212:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2302      	movs	r3, #2
 800121e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	4619      	mov	r1, r3
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_GPIO_Init+0xf0>)
 8001228:	f000 fda0 	bl	8001d6c <HAL_GPIO_Init>

}
 800122c:	bf00      	nop
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000
 8001238:	40010800 	.word	0x40010800
 800123c:	40010c00 	.word	0x40010c00

08001240 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	if( htim -> Instance == TIM2 ){
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001250:	d101      	bne.n	8001256 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 8001252:	f000 f867 	bl	8001324 <SCH_Update>
//		button_reading () ;
		}
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001262:	b672      	cpsid	i
}
 8001264:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001266:	e7fe      	b.n	8001266 <Error_Handler+0x8>

08001268 <SCH_Init>:
#include "main.h"
sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
		current_index_task = 0;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <SCH_Init+0x14>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	200000d0 	.word	0x200000d0

08001280 <SCH_Add_Task>:

void SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS)
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <SCH_Add_Task+0x98>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b27      	cmp	r3, #39	; 0x27
 8001292:	d83c      	bhi.n	800130e <SCH_Add_Task+0x8e>
	{

		SCH_tasks_G[current_index_task].pTask = pFunction;
 8001294:	4b20      	ldr	r3, [pc, #128]	; (8001318 <SCH_Add_Task+0x98>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	4a20      	ldr	r2, [pc, #128]	; (800131c <SCH_Add_Task+0x9c>)
 800129c:	460b      	mov	r3, r1
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY/TIMER_CYCLE;
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <SCH_Add_Task+0x98>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <SCH_Add_Task+0xa0>)
 80012b4:	fba2 2303 	umull	r2, r3, r2, r3
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	4918      	ldr	r1, [pc, #96]	; (800131c <SCH_Add_Task+0x9c>)
 80012bc:	4603      	mov	r3, r0
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4403      	add	r3, r0
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	3304      	adds	r3, #4
 80012c8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD/TIMER_CYCLE;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <SCH_Add_Task+0x98>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a13      	ldr	r2, [pc, #76]	; (8001320 <SCH_Add_Task+0xa0>)
 80012d4:	fba2 2303 	umull	r2, r3, r2, r3
 80012d8:	08da      	lsrs	r2, r3, #3
 80012da:	4910      	ldr	r1, [pc, #64]	; (800131c <SCH_Add_Task+0x9c>)
 80012dc:	4603      	mov	r3, r0
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4403      	add	r3, r0
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	3308      	adds	r3, #8
 80012e8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <SCH_Add_Task+0x98>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	4619      	mov	r1, r3
 80012f0:	4a0a      	ldr	r2, [pc, #40]	; (800131c <SCH_Add_Task+0x9c>)
 80012f2:	460b      	mov	r3, r1
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	440b      	add	r3, r1
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	330c      	adds	r3, #12
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
//		SCH_tasks_G[current_index_task].TaskID = current_index_task;
		current_index_task++;
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SCH_Add_Task+0x98>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b03      	ldr	r3, [pc, #12]	; (8001318 <SCH_Add_Task+0x98>)
 800130c:	701a      	strb	r2, [r3, #0]
//		return current_index_task-1;
	}
//	return -1;
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	200000d0 	.word	0x200000d0
 800131c:	200001ac 	.word	0x200001ac
 8001320:	cccccccd 	.word	0xcccccccd

08001324 <SCH_Update>:

void SCH_Update(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < current_index_task; i++)
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	e05d      	b.n	80013ec <SCH_Update+0xc8>
	{
		if(SCH_tasks_G[i].Delay > 0)
 8001330:	4934      	ldr	r1, [pc, #208]	; (8001404 <SCH_Update+0xe0>)
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	3304      	adds	r3, #4
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d012      	beq.n	800136c <SCH_Update+0x48>
		{
			SCH_tasks_G[i].Delay--;
 8001346:	492f      	ldr	r1, [pc, #188]	; (8001404 <SCH_Update+0xe0>)
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	440b      	add	r3, r1
 8001354:	3304      	adds	r3, #4
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	1e59      	subs	r1, r3, #1
 800135a:	482a      	ldr	r0, [pc, #168]	; (8001404 <SCH_Update+0xe0>)
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4403      	add	r3, r0
 8001368:	3304      	adds	r3, #4
 800136a:	6019      	str	r1, [r3, #0]
		}
		if(SCH_tasks_G[i].Delay == 0)
 800136c:	4925      	ldr	r1, [pc, #148]	; (8001404 <SCH_Update+0xe0>)
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	3304      	adds	r3, #4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d131      	bne.n	80013e6 <SCH_Update+0xc2>
		{
			SCH_tasks_G[i].RunMe +=1;
 8001382:	4920      	ldr	r1, [pc, #128]	; (8001404 <SCH_Update+0xe0>)
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	330c      	adds	r3, #12
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	3301      	adds	r3, #1
 8001396:	b2d8      	uxtb	r0, r3
 8001398:	491a      	ldr	r1, [pc, #104]	; (8001404 <SCH_Update+0xe0>)
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	330c      	adds	r3, #12
 80013a8:	4602      	mov	r2, r0
 80013aa:	701a      	strb	r2, [r3, #0]
			if(SCH_tasks_G[i].Period)
 80013ac:	4915      	ldr	r1, [pc, #84]	; (8001404 <SCH_Update+0xe0>)
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	3308      	adds	r3, #8
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d011      	beq.n	80013e6 <SCH_Update+0xc2>
					SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 80013c2:	4910      	ldr	r1, [pc, #64]	; (8001404 <SCH_Update+0xe0>)
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	3308      	adds	r3, #8
 80013d2:	6819      	ldr	r1, [r3, #0]
 80013d4:	480b      	ldr	r0, [pc, #44]	; (8001404 <SCH_Update+0xe0>)
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4403      	add	r3, r0
 80013e2:	3304      	adds	r3, #4
 80013e4:	6019      	str	r1, [r3, #0]
	for(int i = 0 ; i < current_index_task; i++)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3301      	adds	r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <SCH_Update+0xe4>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4293      	cmp	r3, r2
 80013f6:	db9b      	blt.n	8001330 <SCH_Update+0xc>
		}

	}
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	200001ac 	.word	0x200001ac
 8001408:	200000d0 	.word	0x200000d0

0800140c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
	for( int i = 0; i < current_index_task; i++)
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	e051      	b.n	80014bc <SCH_Dispatch_Tasks+0xb0>
	{
		if(SCH_tasks_G[i].RunMe > 0)
 8001418:	492e      	ldr	r1, [pc, #184]	; (80014d4 <SCH_Dispatch_Tasks+0xc8>)
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	330c      	adds	r3, #12
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d043      	beq.n	80014b6 <SCH_Dispatch_Tasks+0xaa>
		{
			SCH_tasks_G[i].RunMe--;
 800142e:	4929      	ldr	r1, [pc, #164]	; (80014d4 <SCH_Dispatch_Tasks+0xc8>)
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	330c      	adds	r3, #12
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	3b01      	subs	r3, #1
 8001442:	b2d8      	uxtb	r0, r3
 8001444:	4923      	ldr	r1, [pc, #140]	; (80014d4 <SCH_Dispatch_Tasks+0xc8>)
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	330c      	adds	r3, #12
 8001454:	4602      	mov	r2, r0
 8001456:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 8001458:	491e      	ldr	r1, [pc, #120]	; (80014d4 <SCH_Dispatch_Tasks+0xc8>)
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4798      	blx	r3
			if(SCH_tasks_G[i].Delay == 0 && SCH_tasks_G[i].Period == 0 && SCH_tasks_G[i].RunMe == 0)
 800146a:	491a      	ldr	r1, [pc, #104]	; (80014d4 <SCH_Dispatch_Tasks+0xc8>)
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	3304      	adds	r3, #4
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d11a      	bne.n	80014b6 <SCH_Dispatch_Tasks+0xaa>
 8001480:	4914      	ldr	r1, [pc, #80]	; (80014d4 <SCH_Dispatch_Tasks+0xc8>)
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	3308      	adds	r3, #8
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10f      	bne.n	80014b6 <SCH_Dispatch_Tasks+0xaa>
 8001496:	490f      	ldr	r1, [pc, #60]	; (80014d4 <SCH_Dispatch_Tasks+0xc8>)
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	330c      	adds	r3, #12
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d104      	bne.n	80014b6 <SCH_Dispatch_Tasks+0xaa>
			{
				SCH_Delete_Task(i);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 f813 	bl	80014dc <SCH_Delete_Task>
	for( int i = 0; i < current_index_task; i++)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3301      	adds	r3, #1
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SCH_Dispatch_Tasks+0xcc>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4293      	cmp	r3, r2
 80014c6:	dba7      	blt.n	8001418 <SCH_Dispatch_Tasks+0xc>
			}
		}

	}
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200001ac 	.word	0x200001ac
 80014d8:	200000d0 	.word	0x200000d0

080014dc <SCH_Delete_Task>:

void SCH_Delete_Task(const uint8_t TASK_INDEX)//in array index is taskid
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
   if(TASK_INDEX >= current_index_task)
 80014e6:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <SCH_Delete_Task+0xdc>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	79fa      	ldrb	r2, [r7, #7]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d25d      	bcs.n	80015ac <SCH_Delete_Task+0xd0>
   {
	   return ;
   }
   else
   {
	   for( int i = TASK_INDEX; i < current_index_task - 1; i++)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	e04d      	b.n	8001592 <SCH_Delete_Task+0xb6>
	   {
			SCH_tasks_G[i].pTask = SCH_tasks_G[i + 1].pTask;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	4930      	ldr	r1, [pc, #192]	; (80015bc <SCH_Delete_Task+0xe0>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	6819      	ldr	r1, [r3, #0]
 8001508:	482c      	ldr	r0, [pc, #176]	; (80015bc <SCH_Delete_Task+0xe0>)
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4403      	add	r3, r0
 8001516:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Delay = SCH_tasks_G[i + 1].Delay;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	4927      	ldr	r1, [pc, #156]	; (80015bc <SCH_Delete_Task+0xe0>)
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	3304      	adds	r3, #4
 800152a:	6819      	ldr	r1, [r3, #0]
 800152c:	4823      	ldr	r0, [pc, #140]	; (80015bc <SCH_Delete_Task+0xe0>)
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4403      	add	r3, r0
 800153a:	3304      	adds	r3, #4
 800153c:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Period = SCH_tasks_G[i + 1].Period;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	491e      	ldr	r1, [pc, #120]	; (80015bc <SCH_Delete_Task+0xe0>)
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	3308      	adds	r3, #8
 8001550:	6819      	ldr	r1, [r3, #0]
 8001552:	481a      	ldr	r0, [pc, #104]	; (80015bc <SCH_Delete_Task+0xe0>)
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4403      	add	r3, r0
 8001560:	3308      	adds	r3, #8
 8001562:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe = SCH_tasks_G[i + 1].RunMe;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	4914      	ldr	r1, [pc, #80]	; (80015bc <SCH_Delete_Task+0xe0>)
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	330c      	adds	r3, #12
 8001576:	7818      	ldrb	r0, [r3, #0]
 8001578:	4910      	ldr	r1, [pc, #64]	; (80015bc <SCH_Delete_Task+0xe0>)
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	330c      	adds	r3, #12
 8001588:	4602      	mov	r2, r0
 800158a:	701a      	strb	r2, [r3, #0]
	   for( int i = TASK_INDEX; i < current_index_task - 1; i++)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3301      	adds	r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <SCH_Delete_Task+0xdc>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	3b01      	subs	r3, #1
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	429a      	cmp	r2, r3
 800159c:	dbab      	blt.n	80014f6 <SCH_Delete_Task+0x1a>
	   }

	   current_index_task--;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <SCH_Delete_Task+0xdc>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SCH_Delete_Task+0xdc>)
 80015a8:	701a      	strb	r2, [r3, #0]
 80015aa:	e000      	b.n	80015ae <SCH_Delete_Task+0xd2>
	   return ;
 80015ac:	bf00      	nop
//	   return ;
   }
}
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	200000d0 	.word	0x200000d0
 80015bc:	200001ac 	.word	0x200001ac

080015c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_MspInit+0x5c>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	4a14      	ldr	r2, [pc, #80]	; (800161c <HAL_MspInit+0x5c>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6193      	str	r3, [r2, #24]
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_MspInit+0x5c>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_MspInit+0x5c>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_MspInit+0x5c>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_MspInit+0x5c>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_MspInit+0x60>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_MspInit+0x60>)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000

08001624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001634:	d113      	bne.n	800165e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_TIM_Base_MspInit+0x44>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <HAL_TIM_Base_MspInit+0x44>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	61d3      	str	r3, [r2, #28]
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_TIM_Base_MspInit+0x44>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	201c      	movs	r0, #28
 8001654:	f000 faa3 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001658:	201c      	movs	r0, #28
 800165a:	f000 fabc 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000

0800166c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <HAL_UART_MspInit+0x98>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d137      	bne.n	80016fc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <HAL_UART_MspInit+0x9c>)
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <HAL_UART_MspInit+0x9c>)
 8001692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001696:	61d3      	str	r3, [r2, #28]
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_UART_MspInit+0x9c>)
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_UART_MspInit+0x9c>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a17      	ldr	r2, [pc, #92]	; (8001708 <HAL_UART_MspInit+0x9c>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_UART_MspInit+0x9c>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016bc:	2304      	movs	r3, #4
 80016be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	4619      	mov	r1, r3
 80016ce:	480f      	ldr	r0, [pc, #60]	; (800170c <HAL_UART_MspInit+0xa0>)
 80016d0:	f000 fb4c 	bl	8001d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016d4:	2308      	movs	r3, #8
 80016d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	4619      	mov	r1, r3
 80016e6:	4809      	ldr	r0, [pc, #36]	; (800170c <HAL_UART_MspInit+0xa0>)
 80016e8:	f000 fb40 	bl	8001d6c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2100      	movs	r1, #0
 80016f0:	2026      	movs	r0, #38	; 0x26
 80016f2:	f000 fa54 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016f6:	2026      	movs	r0, #38	; 0x26
 80016f8:	f000 fa6d 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016fc:	bf00      	nop
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40004400 	.word	0x40004400
 8001708:	40021000 	.word	0x40021000
 800170c:	40010800 	.word	0x40010800

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <NMI_Handler+0x4>

08001716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <MemManage_Handler+0x4>

08001722 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <UsageFault_Handler+0x4>

0800172e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001756:	f000 f92f 	bl	80019b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <TIM2_IRQHandler+0x10>)
 8001766:	f001 f961 	bl	8002a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000011c 	.word	0x2000011c

08001774 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <USART2_IRQHandler+0x10>)
 800177a:	f001 fd7f 	bl	800327c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000164 	.word	0x20000164

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f002 f958 	bl	8003a6c <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20002800 	.word	0x20002800
 80017e8:	00000400 	.word	0x00000400
 80017ec:	200000d4 	.word	0x200000d4
 80017f0:	200004e0 	.word	0x200004e0

080017f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <setTimer0>:
int timerOut1_counter = 0;

int timerOut2_flag = 0;
int timerOut2_counter = 0;

void setTimer0(int duration){
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 8001808:	4a05      	ldr	r2, [pc, #20]	; (8001820 <setTimer0+0x20>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <setTimer0+0x24>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
};
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	200000dc 	.word	0x200000dc
 8001824:	200000d8 	.word	0x200000d8

08001828 <setTimer3>:
};
void setTimer2(int duration){
	timer2_counter = duration;
	timer2_flag = 0;
};
void setTimer3(int duration){
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001830:	4a05      	ldr	r2, [pc, #20]	; (8001848 <setTimer3+0x20>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <setTimer3+0x24>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
};
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	200000e4 	.word	0x200000e4
 800184c:	200000e0 	.word	0x200000e0

08001850 <setTimerOut1>:
void setTimerOut1(int duration){
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	timerOut1_flag = 0;
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <setTimerOut1+0x20>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
	timerOut1_counter = duration;
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <setTimerOut1+0x24>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6013      	str	r3, [r2, #0]
};
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	200000e8 	.word	0x200000e8
 8001874:	200000ec 	.word	0x200000ec

08001878 <timerRun0>:
	timerOut2_flag = 0;
	timerOut2_counter = duration;
};


void timerRun0(){
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
	if(timer0_counter > 0 )
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <timerRun0+0x2c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	dd0b      	ble.n	800189c <timerRun0+0x24>
	{
		timer0_counter --;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <timerRun0+0x2c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3b01      	subs	r3, #1
 800188a:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <timerRun0+0x2c>)
 800188c:	6013      	str	r3, [r2, #0]
		if(timer0_counter <=0){
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <timerRun0+0x2c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	dc02      	bgt.n	800189c <timerRun0+0x24>
			timer0_flag=1;
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <timerRun0+0x30>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]
		}
	}
};
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	200000dc 	.word	0x200000dc
 80018a8:	200000d8 	.word	0x200000d8

080018ac <timerRun3>:
			timer2_flag=1;
		}
	}
};

void timerRun3(){
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
	if(timer3_counter > 0 )
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <timerRun3+0x2c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	dd0b      	ble.n	80018d0 <timerRun3+0x24>
	{
		timer3_counter --;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <timerRun3+0x2c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	3b01      	subs	r3, #1
 80018be:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <timerRun3+0x2c>)
 80018c0:	6013      	str	r3, [r2, #0]
		if(timer3_counter <=0){
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <timerRun3+0x2c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	dc02      	bgt.n	80018d0 <timerRun3+0x24>
			timer3_flag=1;
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <timerRun3+0x30>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]
		}
	}
};
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	200000e4 	.word	0x200000e4
 80018dc:	200000e0 	.word	0x200000e0

080018e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018e2:	490d      	ldr	r1, [pc, #52]	; (8001918 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e8:	e002      	b.n	80018f0 <LoopCopyDataInit>

080018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ee:	3304      	adds	r3, #4

080018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f4:	d3f9      	bcc.n	80018ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018f8:	4c0a      	ldr	r4, [pc, #40]	; (8001924 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018fc:	e001      	b.n	8001902 <LoopFillZerobss>

080018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001900:	3204      	adds	r2, #4

08001902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001904:	d3fb      	bcc.n	80018fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001906:	f7ff ff75 	bl	80017f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800190a:	f002 f8b5 	bl	8003a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800190e:	f7ff fb1b 	bl	8000f48 <main>
  bx lr
 8001912:	4770      	bx	lr
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800191c:	08004428 	.word	0x08004428
  ldr r2, =_sbss
 8001920:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001924:	200004e0 	.word	0x200004e0

08001928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC1_2_IRQHandler>
	...

0800192c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <HAL_Init+0x28>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a07      	ldr	r2, [pc, #28]	; (8001954 <HAL_Init+0x28>)
 8001936:	f043 0310 	orr.w	r3, r3, #16
 800193a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193c:	2003      	movs	r0, #3
 800193e:	f000 f923 	bl	8001b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001942:	200f      	movs	r0, #15
 8001944:	f000 f808 	bl	8001958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001948:	f7ff fe3a 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40022000 	.word	0x40022000

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_InitTick+0x54>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_InitTick+0x58>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f93b 	bl	8001bf2 <HAL_SYSTICK_Config>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e00e      	b.n	80019a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b0f      	cmp	r3, #15
 800198a:	d80a      	bhi.n	80019a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800198c:	2200      	movs	r2, #0
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f000 f903 	bl	8001b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001998:	4a06      	ldr	r2, [pc, #24]	; (80019b4 <HAL_InitTick+0x5c>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e000      	b.n	80019a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000020 	.word	0x20000020
 80019b0:	20000028 	.word	0x20000028
 80019b4:	20000024 	.word	0x20000024

080019b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_IncTick+0x1c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_IncTick+0x20>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a03      	ldr	r2, [pc, #12]	; (80019d8 <HAL_IncTick+0x20>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	20000028 	.word	0x20000028
 80019d8:	200004cc 	.word	0x200004cc

080019dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;
 80019e0:	4b02      	ldr	r3, [pc, #8]	; (80019ec <HAL_GetTick+0x10>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	200004cc 	.word	0x200004cc

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db0b      	blt.n	8001a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4906      	ldr	r1, [pc, #24]	; (8001a88 <__NVIC_EnableIRQ+0x34>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	e000e100 	.word	0xe000e100

08001a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	db0a      	blt.n	8001ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	490c      	ldr	r1, [pc, #48]	; (8001ad8 <__NVIC_SetPriority+0x4c>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	0112      	lsls	r2, r2, #4
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab4:	e00a      	b.n	8001acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4908      	ldr	r1, [pc, #32]	; (8001adc <__NVIC_SetPriority+0x50>)
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	3b04      	subs	r3, #4
 8001ac4:	0112      	lsls	r2, r2, #4
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	761a      	strb	r2, [r3, #24]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f1c3 0307 	rsb	r3, r3, #7
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	bf28      	it	cs
 8001afe:	2304      	movcs	r3, #4
 8001b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3304      	adds	r3, #4
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	d902      	bls.n	8001b10 <NVIC_EncodePriority+0x30>
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3b03      	subs	r3, #3
 8001b0e:	e000      	b.n	8001b12 <NVIC_EncodePriority+0x32>
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	401a      	ands	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43d9      	mvns	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	4313      	orrs	r3, r2
         );
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3724      	adds	r7, #36	; 0x24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b54:	d301      	bcc.n	8001b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00f      	b.n	8001b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <SysTick_Config+0x40>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b62:	210f      	movs	r1, #15
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f7ff ff90 	bl	8001a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <SysTick_Config+0x40>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <SysTick_Config+0x40>)
 8001b74:	2207      	movs	r2, #7
 8001b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	e000e010 	.word	0xe000e010

08001b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff2d 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb0:	f7ff ff42 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f7ff ff90 	bl	8001ae0 <NVIC_EncodePriority>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff5f 	bl	8001a8c <__NVIC_SetPriority>
}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff35 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffa2 	bl	8001b44 <SysTick_Config>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d008      	beq.n	8001c32 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2204      	movs	r2, #4
 8001c24:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e020      	b.n	8001c74 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 020e 	bic.w	r2, r2, #14
 8001c40:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0201 	bic.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c60:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d005      	beq.n	8001ca2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2204      	movs	r2, #4
 8001c9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e051      	b.n	8001d46 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 020e 	bic.w	r2, r2, #14
 8001cb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0201 	bic.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a22      	ldr	r2, [pc, #136]	; (8001d50 <HAL_DMA_Abort_IT+0xd0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d029      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xa0>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a20      	ldr	r2, [pc, #128]	; (8001d54 <HAL_DMA_Abort_IT+0xd4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d022      	beq.n	8001d1c <HAL_DMA_Abort_IT+0x9c>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1f      	ldr	r2, [pc, #124]	; (8001d58 <HAL_DMA_Abort_IT+0xd8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d01a      	beq.n	8001d16 <HAL_DMA_Abort_IT+0x96>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <HAL_DMA_Abort_IT+0xdc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d012      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x90>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <HAL_DMA_Abort_IT+0xe0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d00a      	beq.n	8001d0a <HAL_DMA_Abort_IT+0x8a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1a      	ldr	r2, [pc, #104]	; (8001d64 <HAL_DMA_Abort_IT+0xe4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d102      	bne.n	8001d04 <HAL_DMA_Abort_IT+0x84>
 8001cfe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d02:	e00e      	b.n	8001d22 <HAL_DMA_Abort_IT+0xa2>
 8001d04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d08:	e00b      	b.n	8001d22 <HAL_DMA_Abort_IT+0xa2>
 8001d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d0e:	e008      	b.n	8001d22 <HAL_DMA_Abort_IT+0xa2>
 8001d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d14:	e005      	b.n	8001d22 <HAL_DMA_Abort_IT+0xa2>
 8001d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d1a:	e002      	b.n	8001d22 <HAL_DMA_Abort_IT+0xa2>
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	e000      	b.n	8001d22 <HAL_DMA_Abort_IT+0xa2>
 8001d20:	2301      	movs	r3, #1
 8001d22:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <HAL_DMA_Abort_IT+0xe8>)
 8001d24:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	4798      	blx	r3
    } 
  }
  return status;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40020008 	.word	0x40020008
 8001d54:	4002001c 	.word	0x4002001c
 8001d58:	40020030 	.word	0x40020030
 8001d5c:	40020044 	.word	0x40020044
 8001d60:	40020058 	.word	0x40020058
 8001d64:	4002006c 	.word	0x4002006c
 8001d68:	40020000 	.word	0x40020000

08001d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b08b      	sub	sp, #44	; 0x2c
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7e:	e148      	b.n	8002012 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d80:	2201      	movs	r2, #1
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f040 8137 	bne.w	800200c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4aa3      	ldr	r2, [pc, #652]	; (8002030 <HAL_GPIO_Init+0x2c4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d05e      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001da8:	4aa1      	ldr	r2, [pc, #644]	; (8002030 <HAL_GPIO_Init+0x2c4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d875      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dae:	4aa1      	ldr	r2, [pc, #644]	; (8002034 <HAL_GPIO_Init+0x2c8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d058      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001db4:	4a9f      	ldr	r2, [pc, #636]	; (8002034 <HAL_GPIO_Init+0x2c8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d86f      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dba:	4a9f      	ldr	r2, [pc, #636]	; (8002038 <HAL_GPIO_Init+0x2cc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d052      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001dc0:	4a9d      	ldr	r2, [pc, #628]	; (8002038 <HAL_GPIO_Init+0x2cc>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d869      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dc6:	4a9d      	ldr	r2, [pc, #628]	; (800203c <HAL_GPIO_Init+0x2d0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d04c      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001dcc:	4a9b      	ldr	r2, [pc, #620]	; (800203c <HAL_GPIO_Init+0x2d0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d863      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dd2:	4a9b      	ldr	r2, [pc, #620]	; (8002040 <HAL_GPIO_Init+0x2d4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d046      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001dd8:	4a99      	ldr	r2, [pc, #612]	; (8002040 <HAL_GPIO_Init+0x2d4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d85d      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dde:	2b12      	cmp	r3, #18
 8001de0:	d82a      	bhi.n	8001e38 <HAL_GPIO_Init+0xcc>
 8001de2:	2b12      	cmp	r3, #18
 8001de4:	d859      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <HAL_GPIO_Init+0x80>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001e67 	.word	0x08001e67
 8001df0:	08001e41 	.word	0x08001e41
 8001df4:	08001e53 	.word	0x08001e53
 8001df8:	08001e95 	.word	0x08001e95
 8001dfc:	08001e9b 	.word	0x08001e9b
 8001e00:	08001e9b 	.word	0x08001e9b
 8001e04:	08001e9b 	.word	0x08001e9b
 8001e08:	08001e9b 	.word	0x08001e9b
 8001e0c:	08001e9b 	.word	0x08001e9b
 8001e10:	08001e9b 	.word	0x08001e9b
 8001e14:	08001e9b 	.word	0x08001e9b
 8001e18:	08001e9b 	.word	0x08001e9b
 8001e1c:	08001e9b 	.word	0x08001e9b
 8001e20:	08001e9b 	.word	0x08001e9b
 8001e24:	08001e9b 	.word	0x08001e9b
 8001e28:	08001e9b 	.word	0x08001e9b
 8001e2c:	08001e9b 	.word	0x08001e9b
 8001e30:	08001e49 	.word	0x08001e49
 8001e34:	08001e5d 	.word	0x08001e5d
 8001e38:	4a82      	ldr	r2, [pc, #520]	; (8002044 <HAL_GPIO_Init+0x2d8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e3e:	e02c      	b.n	8001e9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	623b      	str	r3, [r7, #32]
          break;
 8001e46:	e029      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	623b      	str	r3, [r7, #32]
          break;
 8001e50:	e024      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	3308      	adds	r3, #8
 8001e58:	623b      	str	r3, [r7, #32]
          break;
 8001e5a:	e01f      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	330c      	adds	r3, #12
 8001e62:	623b      	str	r3, [r7, #32]
          break;
 8001e64:	e01a      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d102      	bne.n	8001e74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	623b      	str	r3, [r7, #32]
          break;
 8001e72:	e013      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d105      	bne.n	8001e88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	611a      	str	r2, [r3, #16]
          break;
 8001e86:	e009      	b.n	8001e9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	615a      	str	r2, [r3, #20]
          break;
 8001e92:	e003      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
          break;
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          break;
 8001e9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2bff      	cmp	r3, #255	; 0xff
 8001ea0:	d801      	bhi.n	8001ea6 <HAL_GPIO_Init+0x13a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	e001      	b.n	8001eaa <HAL_GPIO_Init+0x13e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2bff      	cmp	r3, #255	; 0xff
 8001eb0:	d802      	bhi.n	8001eb8 <HAL_GPIO_Init+0x14c>
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	e002      	b.n	8001ebe <HAL_GPIO_Init+0x152>
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	3b08      	subs	r3, #8
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	210f      	movs	r1, #15
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	6a39      	ldr	r1, [r7, #32]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 8090 	beq.w	800200c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eec:	4b56      	ldr	r3, [pc, #344]	; (8002048 <HAL_GPIO_Init+0x2dc>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4a55      	ldr	r2, [pc, #340]	; (8002048 <HAL_GPIO_Init+0x2dc>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6193      	str	r3, [r2, #24]
 8001ef8:	4b53      	ldr	r3, [pc, #332]	; (8002048 <HAL_GPIO_Init+0x2dc>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f04:	4a51      	ldr	r2, [pc, #324]	; (800204c <HAL_GPIO_Init+0x2e0>)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4013      	ands	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a49      	ldr	r2, [pc, #292]	; (8002050 <HAL_GPIO_Init+0x2e4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00d      	beq.n	8001f4c <HAL_GPIO_Init+0x1e0>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a48      	ldr	r2, [pc, #288]	; (8002054 <HAL_GPIO_Init+0x2e8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d007      	beq.n	8001f48 <HAL_GPIO_Init+0x1dc>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a47      	ldr	r2, [pc, #284]	; (8002058 <HAL_GPIO_Init+0x2ec>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_GPIO_Init+0x1d8>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e004      	b.n	8001f4e <HAL_GPIO_Init+0x1e2>
 8001f44:	2303      	movs	r3, #3
 8001f46:	e002      	b.n	8001f4e <HAL_GPIO_Init+0x1e2>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <HAL_GPIO_Init+0x1e2>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f50:	f002 0203 	and.w	r2, r2, #3
 8001f54:	0092      	lsls	r2, r2, #2
 8001f56:	4093      	lsls	r3, r2
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f5e:	493b      	ldr	r1, [pc, #236]	; (800204c <HAL_GPIO_Init+0x2e0>)
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	3302      	adds	r3, #2
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f78:	4b38      	ldr	r3, [pc, #224]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4937      	ldr	r1, [pc, #220]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f86:	4b35      	ldr	r3, [pc, #212]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4933      	ldr	r1, [pc, #204]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	492d      	ldr	r1, [pc, #180]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fae:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	4929      	ldr	r1, [pc, #164]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fc8:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	4923      	ldr	r1, [pc, #140]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fd6:	4b21      	ldr	r3, [pc, #132]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	491f      	ldr	r1, [pc, #124]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	4919      	ldr	r1, [pc, #100]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60cb      	str	r3, [r1, #12]
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	43db      	mvns	r3, r3
 8002006:	4915      	ldr	r1, [pc, #84]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8002008:	4013      	ands	r3, r2
 800200a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	3301      	adds	r3, #1
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	f47f aeaf 	bne.w	8001d80 <HAL_GPIO_Init+0x14>
  }
}
 8002022:	bf00      	nop
 8002024:	bf00      	nop
 8002026:	372c      	adds	r7, #44	; 0x2c
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	10320000 	.word	0x10320000
 8002034:	10310000 	.word	0x10310000
 8002038:	10220000 	.word	0x10220000
 800203c:	10210000 	.word	0x10210000
 8002040:	10120000 	.word	0x10120000
 8002044:	10110000 	.word	0x10110000
 8002048:	40021000 	.word	0x40021000
 800204c:	40010000 	.word	0x40010000
 8002050:	40010800 	.word	0x40010800
 8002054:	40010c00 	.word	0x40010c00
 8002058:	40011000 	.word	0x40011000
 800205c:	40010400 	.word	0x40010400

08002060 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	887b      	ldrh	r3, [r7, #2]
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
 800207c:	e001      	b.n	8002082 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002082:	7bfb      	ldrb	r3, [r7, #15]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	460b      	mov	r3, r1
 8002098:	807b      	strh	r3, [r7, #2]
 800209a:	4613      	mov	r3, r2
 800209c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800209e:	787b      	ldrb	r3, [r7, #1]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a4:	887a      	ldrh	r2, [r7, #2]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020aa:	e003      	b.n	80020b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020ac:	887b      	ldrh	r3, [r7, #2]
 80020ae:	041a      	lsls	r2, r3, #16
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	611a      	str	r2, [r3, #16]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
	...

080020c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e26c      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8087 	beq.w	80021ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e0:	4b92      	ldr	r3, [pc, #584]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d00c      	beq.n	8002106 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020ec:	4b8f      	ldr	r3, [pc, #572]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d112      	bne.n	800211e <HAL_RCC_OscConfig+0x5e>
 80020f8:	4b8c      	ldr	r3, [pc, #560]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002104:	d10b      	bne.n	800211e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002106:	4b89      	ldr	r3, [pc, #548]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d06c      	beq.n	80021ec <HAL_RCC_OscConfig+0x12c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d168      	bne.n	80021ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e246      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x76>
 8002128:	4b80      	ldr	r3, [pc, #512]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a7f      	ldr	r2, [pc, #508]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800212e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	e02e      	b.n	8002194 <HAL_RCC_OscConfig+0xd4>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x98>
 800213e:	4b7b      	ldr	r3, [pc, #492]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7a      	ldr	r2, [pc, #488]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b78      	ldr	r3, [pc, #480]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a77      	ldr	r2, [pc, #476]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e01d      	b.n	8002194 <HAL_RCC_OscConfig+0xd4>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0xbc>
 8002162:	4b72      	ldr	r3, [pc, #456]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a71      	ldr	r2, [pc, #452]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b6f      	ldr	r3, [pc, #444]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a6e      	ldr	r2, [pc, #440]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0xd4>
 800217c:	4b6b      	ldr	r3, [pc, #428]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a6a      	ldr	r2, [pc, #424]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b68      	ldr	r3, [pc, #416]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a67      	ldr	r2, [pc, #412]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800218e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002192:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7ff fc1e 	bl	80019dc <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7ff fc1a 	bl	80019dc <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e1fa      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b5d      	ldr	r3, [pc, #372]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0xe4>
 80021c2:	e014      	b.n	80021ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff fc0a 	bl	80019dc <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021cc:	f7ff fc06 	bl	80019dc <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1e6      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021de:	4b53      	ldr	r3, [pc, #332]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x10c>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d063      	beq.n	80022c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021fa:	4b4c      	ldr	r3, [pc, #304]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002206:	4b49      	ldr	r3, [pc, #292]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b08      	cmp	r3, #8
 8002210:	d11c      	bne.n	800224c <HAL_RCC_OscConfig+0x18c>
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d116      	bne.n	800224c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	4b43      	ldr	r3, [pc, #268]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_RCC_OscConfig+0x176>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d001      	beq.n	8002236 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e1ba      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002236:	4b3d      	ldr	r3, [pc, #244]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4939      	ldr	r1, [pc, #228]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	e03a      	b.n	80022c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d020      	beq.n	8002296 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7ff fbbf 	bl	80019dc <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002262:	f7ff fbbb 	bl	80019dc <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e19b      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002280:	4b2a      	ldr	r3, [pc, #168]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4927      	ldr	r1, [pc, #156]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002296:	4b26      	ldr	r3, [pc, #152]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7ff fb9e 	bl	80019dc <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a4:	f7ff fb9a 	bl	80019dc <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e17a      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d03a      	beq.n	8002344 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d019      	beq.n	800230a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 80022d8:	2201      	movs	r2, #1
 80022da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7ff fb7e 	bl	80019dc <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7ff fb7a 	bl	80019dc <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e15a      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002302:	2001      	movs	r0, #1
 8002304:	f000 fad8 	bl	80028b8 <RCC_Delay>
 8002308:	e01c      	b.n	8002344 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7ff fb64 	bl	80019dc <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002316:	e00f      	b.n	8002338 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002318:	f7ff fb60 	bl	80019dc <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d908      	bls.n	8002338 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e140      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	42420000 	.word	0x42420000
 8002334:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002338:	4b9e      	ldr	r3, [pc, #632]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e9      	bne.n	8002318 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80a6 	beq.w	800249e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002356:	4b97      	ldr	r3, [pc, #604]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10d      	bne.n	800237e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002362:	4b94      	ldr	r3, [pc, #592]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4a93      	ldr	r2, [pc, #588]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236c:	61d3      	str	r3, [r2, #28]
 800236e:	4b91      	ldr	r3, [pc, #580]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237a:	2301      	movs	r3, #1
 800237c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	4b8e      	ldr	r3, [pc, #568]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d118      	bne.n	80023bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238a:	4b8b      	ldr	r3, [pc, #556]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a8a      	ldr	r2, [pc, #552]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002396:	f7ff fb21 	bl	80019dc <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239e:	f7ff fb1d 	bl	80019dc <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b64      	cmp	r3, #100	; 0x64
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0fd      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	4b81      	ldr	r3, [pc, #516]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x312>
 80023c4:	4b7b      	ldr	r3, [pc, #492]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4a7a      	ldr	r2, [pc, #488]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	e02d      	b.n	800242e <HAL_RCC_OscConfig+0x36e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x334>
 80023da:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4a75      	ldr	r2, [pc, #468]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	6213      	str	r3, [r2, #32]
 80023e6:	4b73      	ldr	r3, [pc, #460]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a72      	ldr	r2, [pc, #456]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	f023 0304 	bic.w	r3, r3, #4
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	e01c      	b.n	800242e <HAL_RCC_OscConfig+0x36e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b05      	cmp	r3, #5
 80023fa:	d10c      	bne.n	8002416 <HAL_RCC_OscConfig+0x356>
 80023fc:	4b6d      	ldr	r3, [pc, #436]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a6c      	ldr	r2, [pc, #432]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	f043 0304 	orr.w	r3, r3, #4
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	4b6a      	ldr	r3, [pc, #424]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a69      	ldr	r2, [pc, #420]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	e00b      	b.n	800242e <HAL_RCC_OscConfig+0x36e>
 8002416:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a66      	ldr	r2, [pc, #408]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	6213      	str	r3, [r2, #32]
 8002422:	4b64      	ldr	r3, [pc, #400]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a63      	ldr	r2, [pc, #396]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	f023 0304 	bic.w	r3, r3, #4
 800242c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d015      	beq.n	8002462 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7ff fad1 	bl	80019dc <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7ff facd 	bl	80019dc <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e0ab      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002454:	4b57      	ldr	r3, [pc, #348]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ee      	beq.n	800243e <HAL_RCC_OscConfig+0x37e>
 8002460:	e014      	b.n	800248c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7ff fabb 	bl	80019dc <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7ff fab7 	bl	80019dc <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e095      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002480:	4b4c      	ldr	r3, [pc, #304]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ee      	bne.n	800246a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800248c:	7dfb      	ldrb	r3, [r7, #23]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d105      	bne.n	800249e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002492:	4b48      	ldr	r3, [pc, #288]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4a47      	ldr	r2, [pc, #284]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8081 	beq.w	80025aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a8:	4b42      	ldr	r3, [pc, #264]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d061      	beq.n	8002578 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d146      	bne.n	800254a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024bc:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <HAL_RCC_OscConfig+0x4fc>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7ff fa8b 	bl	80019dc <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ca:	f7ff fa87 	bl	80019dc <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e067      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024dc:	4b35      	ldr	r3, [pc, #212]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f0      	bne.n	80024ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f0:	d108      	bne.n	8002504 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024f2:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	492d      	ldr	r1, [pc, #180]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002504:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a19      	ldr	r1, [r3, #32]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	430b      	orrs	r3, r1
 8002516:	4927      	ldr	r1, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <HAL_RCC_OscConfig+0x4fc>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7ff fa5b 	bl	80019dc <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7ff fa57 	bl	80019dc <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e037      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x46a>
 8002548:	e02f      	b.n	80025aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_RCC_OscConfig+0x4fc>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7ff fa44 	bl	80019dc <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002558:	f7ff fa40 	bl	80019dc <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e020      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x498>
 8002576:	e018      	b.n	80025aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e013      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	429a      	cmp	r2, r3
 8002596:	d106      	bne.n	80025a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
 80025bc:	42420060 	.word	0x42420060

080025c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0d0      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d910      	bls.n	8002604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b67      	ldr	r3, [pc, #412]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 0207 	bic.w	r2, r3, #7
 80025ea:	4965      	ldr	r1, [pc, #404]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0b8      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800261c:	4b59      	ldr	r3, [pc, #356]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002626:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4a52      	ldr	r2, [pc, #328]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800263e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002640:	4b50      	ldr	r3, [pc, #320]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	494d      	ldr	r1, [pc, #308]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d040      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d115      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e07f      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d107      	bne.n	800268e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267e:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e073      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268e:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e06b      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269e:	4b39      	ldr	r3, [pc, #228]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f023 0203 	bic.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4936      	ldr	r1, [pc, #216]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b0:	f7ff f994 	bl	80019dc <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b8:	f7ff f990 	bl	80019dc <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e053      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 020c 	and.w	r2, r3, #12
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	429a      	cmp	r2, r3
 80026de:	d1eb      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e0:	4b27      	ldr	r3, [pc, #156]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d210      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0207 	bic.w	r2, r3, #7
 80026f6:	4922      	ldr	r1, [pc, #136]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e032      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800271c:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4916      	ldr	r1, [pc, #88]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	490e      	ldr	r1, [pc, #56]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800274e:	f000 f821 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8002752:	4602      	mov	r2, r0
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	490a      	ldr	r1, [pc, #40]	; (8002788 <HAL_RCC_ClockConfig+0x1c8>)
 8002760:	5ccb      	ldrb	r3, [r1, r3]
 8002762:	fa22 f303 	lsr.w	r3, r2, r3
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <HAL_RCC_ClockConfig+0x1cc>)
 8002768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_RCC_ClockConfig+0x1d0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff f8f2 	bl	8001958 <HAL_InitTick>

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40022000 	.word	0x40022000
 8002784:	40021000 	.word	0x40021000
 8002788:	080043d4 	.word	0x080043d4
 800278c:	20000020 	.word	0x20000020
 8002790:	20000024 	.word	0x20000024

08002794 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002794:	b490      	push	{r4, r7}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800279a:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <HAL_RCC_GetSysClockFreq+0xb0>)
 800279c:	1d3c      	adds	r4, r7, #4
 800279e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027a4:	f240 2301 	movw	r3, #513	; 0x201
 80027a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d002      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x40>
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d003      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x46>
 80027d2:	e02d      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d6:	623b      	str	r3, [r7, #32]
      break;
 80027d8:	e02d      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	0c9b      	lsrs	r3, r3, #18
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027e6:	4413      	add	r3, r2
 80027e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f8:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	0c5b      	lsrs	r3, r3, #17
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002806:	4413      	add	r3, r2
 8002808:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800280c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	4a0e      	ldr	r2, [pc, #56]	; (800284c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002812:	fb02 f203 	mul.w	r2, r2, r3
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
 800281e:	e004      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002824:	fb02 f303 	mul.w	r3, r2, r3
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	623b      	str	r3, [r7, #32]
      break;
 800282e:	e002      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002832:	623b      	str	r3, [r7, #32]
      break;
 8002834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002836:	6a3b      	ldr	r3, [r7, #32]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3728      	adds	r7, #40	; 0x28
 800283c:	46bd      	mov	sp, r7
 800283e:	bc90      	pop	{r4, r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	080043c4 	.word	0x080043c4
 8002848:	40021000 	.word	0x40021000
 800284c:	007a1200 	.word	0x007a1200
 8002850:	003d0900 	.word	0x003d0900

08002854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002858:	4b02      	ldr	r3, [pc, #8]	; (8002864 <HAL_RCC_GetHCLKFreq+0x10>)
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	20000020 	.word	0x20000020

08002868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800286c:	f7ff fff2 	bl	8002854 <HAL_RCC_GetHCLKFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	0a1b      	lsrs	r3, r3, #8
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	4903      	ldr	r1, [pc, #12]	; (800288c <HAL_RCC_GetPCLK1Freq+0x24>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000
 800288c:	080043e4 	.word	0x080043e4

08002890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002894:	f7ff ffde 	bl	8002854 <HAL_RCC_GetHCLKFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	0adb      	lsrs	r3, r3, #11
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	4903      	ldr	r1, [pc, #12]	; (80028b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a6:	5ccb      	ldrb	r3, [r1, r3]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	080043e4 	.word	0x080043e4

080028b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028c0:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <RCC_Delay+0x34>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <RCC_Delay+0x38>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0a5b      	lsrs	r3, r3, #9
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028d4:	bf00      	nop
  }
  while (Delay --);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1e5a      	subs	r2, r3, #1
 80028da:	60fa      	str	r2, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f9      	bne.n	80028d4 <RCC_Delay+0x1c>
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	20000020 	.word	0x20000020
 80028f0:	10624dd3 	.word	0x10624dd3

080028f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e041      	b.n	800298a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe fe82 	bl	8001624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f000 fa6a 	bl	8002e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d001      	beq.n	80029ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e035      	b.n	8002a18 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a16      	ldr	r2, [pc, #88]	; (8002a24 <HAL_TIM_Base_Start_IT+0x90>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d009      	beq.n	80029e2 <HAL_TIM_Base_Start_IT+0x4e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d6:	d004      	beq.n	80029e2 <HAL_TIM_Base_Start_IT+0x4e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <HAL_TIM_Base_Start_IT+0x94>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d111      	bne.n	8002a06 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b06      	cmp	r3, #6
 80029f2:	d010      	beq.n	8002a16 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a04:	e007      	b.n	8002a16 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40012c00 	.word	0x40012c00
 8002a28:	40000400 	.word	0x40000400

08002a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d122      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d11b      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0202 	mvn.w	r2, #2
 8002a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f9b1 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 8002a74:	e005      	b.n	8002a82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f9a4 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f9b3 	bl	8002de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d122      	bne.n	8002adc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d11b      	bne.n	8002adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0204 	mvn.w	r2, #4
 8002aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f987 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 8002ac8:	e005      	b.n	8002ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f97a 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f989 	bl	8002de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d122      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d11b      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0208 	mvn.w	r2, #8
 8002b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2204      	movs	r2, #4
 8002b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f95d 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 8002b1c:	e005      	b.n	8002b2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f950 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f95f 	bl	8002de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d122      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d11b      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0210 	mvn.w	r2, #16
 8002b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f933 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 8002b70:	e005      	b.n	8002b7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f926 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f935 	bl	8002de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d10e      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0201 	mvn.w	r2, #1
 8002ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe fb48 	bl	8001240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bba:	2b80      	cmp	r3, #128	; 0x80
 8002bbc:	d10e      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc8:	2b80      	cmp	r3, #128	; 0x80
 8002bca:	d107      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fa67 	bl	80030aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	d10e      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf4:	2b40      	cmp	r3, #64	; 0x40
 8002bf6:	d107      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f8f9 	bl	8002dfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d10e      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d107      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0220 	mvn.w	r2, #32
 8002c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fa32 	bl	8003098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_TIM_ConfigClockSource+0x18>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e0b3      	b.n	8002dbc <HAL_TIM_ConfigClockSource+0x180>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8c:	d03e      	beq.n	8002d0c <HAL_TIM_ConfigClockSource+0xd0>
 8002c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c92:	f200 8087 	bhi.w	8002da4 <HAL_TIM_ConfigClockSource+0x168>
 8002c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9a:	f000 8085 	beq.w	8002da8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca2:	d87f      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x168>
 8002ca4:	2b70      	cmp	r3, #112	; 0x70
 8002ca6:	d01a      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0xa2>
 8002ca8:	2b70      	cmp	r3, #112	; 0x70
 8002caa:	d87b      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x168>
 8002cac:	2b60      	cmp	r3, #96	; 0x60
 8002cae:	d050      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x116>
 8002cb0:	2b60      	cmp	r3, #96	; 0x60
 8002cb2:	d877      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x168>
 8002cb4:	2b50      	cmp	r3, #80	; 0x50
 8002cb6:	d03c      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0xf6>
 8002cb8:	2b50      	cmp	r3, #80	; 0x50
 8002cba:	d873      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x168>
 8002cbc:	2b40      	cmp	r3, #64	; 0x40
 8002cbe:	d058      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x136>
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d86f      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x168>
 8002cc4:	2b30      	cmp	r3, #48	; 0x30
 8002cc6:	d064      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x156>
 8002cc8:	2b30      	cmp	r3, #48	; 0x30
 8002cca:	d86b      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x168>
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d060      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x156>
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d867      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x168>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d05c      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x156>
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d05a      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002cdc:	e062      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6899      	ldr	r1, [r3, #8]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f000 f95c 	bl	8002faa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d00:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	609a      	str	r2, [r3, #8]
      break;
 8002d0a:	e04e      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6899      	ldr	r1, [r3, #8]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f000 f945 	bl	8002faa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d2e:	609a      	str	r2, [r3, #8]
      break;
 8002d30:	e03b      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6859      	ldr	r1, [r3, #4]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f000 f8bc 	bl	8002ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2150      	movs	r1, #80	; 0x50
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f913 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002d50:	e02b      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f000 f8da 	bl	8002f18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2160      	movs	r1, #96	; 0x60
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f903 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002d70:	e01b      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f000 f89c 	bl	8002ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2140      	movs	r1, #64	; 0x40
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f8f3 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002d90:	e00b      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	f000 f8ea 	bl	8002f76 <TIM_ITRx_SetConfig>
        break;
 8002da2:	e002      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002da4:	bf00      	nop
 8002da6:	e000      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002da8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a25      	ldr	r2, [pc, #148]	; (8002eb4 <TIM_Base_SetConfig+0xa8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d007      	beq.n	8002e34 <TIM_Base_SetConfig+0x28>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2a:	d003      	beq.n	8002e34 <TIM_Base_SetConfig+0x28>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a22      	ldr	r2, [pc, #136]	; (8002eb8 <TIM_Base_SetConfig+0xac>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d108      	bne.n	8002e46 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <TIM_Base_SetConfig+0xa8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d007      	beq.n	8002e5e <TIM_Base_SetConfig+0x52>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e54:	d003      	beq.n	8002e5e <TIM_Base_SetConfig+0x52>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <TIM_Base_SetConfig+0xac>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d108      	bne.n	8002e70 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a07      	ldr	r2, [pc, #28]	; (8002eb4 <TIM_Base_SetConfig+0xa8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d103      	bne.n	8002ea4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	615a      	str	r2, [r3, #20]
}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	40012c00 	.word	0x40012c00
 8002eb8:	40000400 	.word	0x40000400

08002ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f023 0201 	bic.w	r2, r3, #1
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f023 030a 	bic.w	r3, r3, #10
 8002ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	621a      	str	r2, [r3, #32]
}
 8002f0e:	bf00      	nop
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	f023 0210 	bic.w	r2, r3, #16
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	031b      	lsls	r3, r3, #12
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	621a      	str	r2, [r3, #32]
}
 8002f6c:	bf00      	nop
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr

08002f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f043 0307 	orr.w	r3, r3, #7
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	609a      	str	r2, [r3, #8]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b087      	sub	sp, #28
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	021a      	lsls	r2, r3, #8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	609a      	str	r2, [r3, #8]
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e041      	b.n	8003084 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a14      	ldr	r2, [pc, #80]	; (8003090 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304c:	d004      	beq.n	8003058 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a10      	ldr	r2, [pc, #64]	; (8003094 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d10c      	bne.n	8003072 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800305e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	4313      	orrs	r3, r2
 8003068:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40012c00 	.word	0x40012c00
 8003094:	40000400 	.word	0x40000400

08003098 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e03f      	b.n	800314e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe fac2 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2224      	movs	r2, #36	; 0x24
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fc25 	bl	8003950 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003114:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003124:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003134:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b08a      	sub	sp, #40	; 0x28
 800315a:	af02      	add	r7, sp, #8
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	4613      	mov	r3, r2
 8003164:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b20      	cmp	r3, #32
 8003174:	d17c      	bne.n	8003270 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_UART_Transmit+0x2c>
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e075      	b.n	8003272 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_UART_Transmit+0x3e>
 8003190:	2302      	movs	r3, #2
 8003192:	e06e      	b.n	8003272 <HAL_UART_Transmit+0x11c>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2221      	movs	r2, #33	; 0x21
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031aa:	f7fe fc17 	bl	80019dc <HAL_GetTick>
 80031ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	88fa      	ldrh	r2, [r7, #6]
 80031b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	88fa      	ldrh	r2, [r7, #6]
 80031ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c4:	d108      	bne.n	80031d8 <HAL_UART_Transmit+0x82>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	e003      	b.n	80031e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031e8:	e02a      	b.n	8003240 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2200      	movs	r2, #0
 80031f2:	2180      	movs	r1, #128	; 0x80
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 fa11 	bl	800361c <UART_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e036      	b.n	8003272 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10b      	bne.n	8003222 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003218:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	3302      	adds	r3, #2
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	e007      	b.n	8003232 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	781a      	ldrb	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	3301      	adds	r3, #1
 8003230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1cf      	bne.n	80031ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2200      	movs	r2, #0
 8003252:	2140      	movs	r1, #64	; 0x40
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f9e1 	bl	800361c <UART_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e006      	b.n	8003272 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e000      	b.n	8003272 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003270:	2302      	movs	r3, #2
  }
}
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800329c:	2300      	movs	r3, #0
 800329e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10d      	bne.n	80032ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_UART_IRQHandler+0x52>
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fa99 	bl	80037fe <UART_Receive_IT>
      return;
 80032cc:	e17b      	b.n	80035c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80b1 	beq.w	8003438 <HAL_UART_IRQHandler+0x1bc>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <HAL_UART_IRQHandler+0x70>
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80a6 	beq.w	8003438 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_UART_IRQHandler+0x90>
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f043 0201 	orr.w	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_UART_IRQHandler+0xb0>
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f043 0202 	orr.w	r2, r3, #2
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_UART_IRQHandler+0xd0>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	f043 0204 	orr.w	r2, r3, #4
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00f      	beq.n	8003376 <HAL_UART_IRQHandler+0xfa>
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d104      	bne.n	800336a <HAL_UART_IRQHandler+0xee>
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f043 0208 	orr.w	r2, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 811e 	beq.w	80035bc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <HAL_UART_IRQHandler+0x11e>
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fa32 	bl	80037fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <HAL_UART_IRQHandler+0x146>
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d031      	beq.n	8003426 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f974 	bl	80036b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d023      	beq.n	800341e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d013      	beq.n	8003416 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	4a76      	ldr	r2, [pc, #472]	; (80035cc <HAL_UART_IRQHandler+0x350>)
 80033f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fc40 	bl	8001c80 <HAL_DMA_Abort_IT>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003410:	4610      	mov	r0, r2
 8003412:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003414:	e00e      	b.n	8003434 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f8ec 	bl	80035f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341c:	e00a      	b.n	8003434 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f8e8 	bl	80035f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003424:	e006      	b.n	8003434 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8e4 	bl	80035f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003432:	e0c3      	b.n	80035bc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003434:	bf00      	nop
    return;
 8003436:	e0c1      	b.n	80035bc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	2b01      	cmp	r3, #1
 800343e:	f040 80a1 	bne.w	8003584 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 809b 	beq.w	8003584 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8095 	beq.w	8003584 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d04e      	beq.n	800351c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003488:	8a3b      	ldrh	r3, [r7, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8098 	beq.w	80035c0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003494:	8a3a      	ldrh	r2, [r7, #16]
 8003496:	429a      	cmp	r2, r3
 8003498:	f080 8092 	bcs.w	80035c0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8a3a      	ldrh	r2, [r7, #16]
 80034a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d02b      	beq.n	8003504 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0210 	bic.w	r2, r2, #16
 80034f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe fb83 	bl	8001c0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800350c:	b29b      	uxth	r3, r3
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	b29b      	uxth	r3, r3
 8003512:	4619      	mov	r1, r3
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f876 	bl	8003606 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800351a:	e051      	b.n	80035c0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003524:	b29b      	uxth	r3, r3
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d047      	beq.n	80035c4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003534:	8a7b      	ldrh	r3, [r7, #18]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d044      	beq.n	80035c4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003548:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695a      	ldr	r2, [r3, #20]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0210 	bic.w	r2, r2, #16
 8003576:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003578:	8a7b      	ldrh	r3, [r7, #18]
 800357a:	4619      	mov	r1, r3
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f842 	bl	8003606 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003582:	e01f      	b.n	80035c4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d008      	beq.n	80035a0 <HAL_UART_IRQHandler+0x324>
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f8c9 	bl	8003730 <UART_Transmit_IT>
    return;
 800359e:	e012      	b.n	80035c6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00d      	beq.n	80035c6 <HAL_UART_IRQHandler+0x34a>
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f90a 	bl	80037ce <UART_EndTransmit_IT>
    return;
 80035ba:	e004      	b.n	80035c6 <HAL_UART_IRQHandler+0x34a>
    return;
 80035bc:	bf00      	nop
 80035be:	e002      	b.n	80035c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80035c0:	bf00      	nop
 80035c2:	e000      	b.n	80035c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80035c4:	bf00      	nop
  }
}
 80035c6:	3728      	adds	r7, #40	; 0x28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	08003709 	.word	0x08003709

080035d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr

080035e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362c:	e02c      	b.n	8003688 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003634:	d028      	beq.n	8003688 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <UART_WaitOnFlagUntilTimeout+0x30>
 800363c:	f7fe f9ce 	bl	80019dc <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	429a      	cmp	r2, r3
 800364a:	d21d      	bcs.n	8003688 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800365a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e00f      	b.n	80036a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4013      	ands	r3, r2
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	bf0c      	ite	eq
 8003698:	2301      	moveq	r3, #1
 800369a:	2300      	movne	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d0c3      	beq.n	800362e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d107      	bne.n	80036f0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0210 	bic.w	r2, r2, #16
 80036ee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7ff ff66 	bl	80035f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b21      	cmp	r3, #33	; 0x21
 8003742:	d13e      	bne.n	80037c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374c:	d114      	bne.n	8003778 <UART_Transmit_IT+0x48>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d110      	bne.n	8003778 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800376a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	1c9a      	adds	r2, r3, #2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	621a      	str	r2, [r3, #32]
 8003776:	e008      	b.n	800378a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	1c59      	adds	r1, r3, #1
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6211      	str	r1, [r2, #32]
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29b      	uxth	r3, r3
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	4619      	mov	r1, r3
 8003798:	84d1      	strh	r1, [r2, #38]	; 0x26
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10f      	bne.n	80037be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
  }
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr

080037ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff feee 	bl	80035d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b086      	sub	sp, #24
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b22      	cmp	r3, #34	; 0x22
 8003810:	f040 8099 	bne.w	8003946 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381c:	d117      	bne.n	800384e <UART_Receive_IT+0x50>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d113      	bne.n	800384e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	b29b      	uxth	r3, r3
 8003838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383c:	b29a      	uxth	r2, r3
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	1c9a      	adds	r2, r3, #2
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
 800384c:	e026      	b.n	800389c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003860:	d007      	beq.n	8003872 <UART_Receive_IT+0x74>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <UART_Receive_IT+0x82>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	b2da      	uxtb	r2, r3
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	e008      	b.n	8003892 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	b2db      	uxtb	r3, r3
 8003888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800388c:	b2da      	uxtb	r2, r3
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	4619      	mov	r1, r3
 80038aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d148      	bne.n	8003942 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0220 	bic.w	r2, r2, #32
 80038be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0201 	bic.w	r2, r2, #1
 80038de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d123      	bne.n	8003938 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0210 	bic.w	r2, r2, #16
 8003904:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b10      	cmp	r3, #16
 8003912:	d10a      	bne.n	800392a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800392e:	4619      	mov	r1, r3
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff fe68 	bl	8003606 <HAL_UARTEx_RxEventCallback>
 8003936:	e002      	b.n	800393e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff fe52 	bl	80035e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	e002      	b.n	8003948 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e000      	b.n	8003948 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003946:	2302      	movs	r3, #2
  }
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800398a:	f023 030c 	bic.w	r3, r3, #12
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	430b      	orrs	r3, r1
 8003996:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a2c      	ldr	r2, [pc, #176]	; (8003a64 <UART_SetConfig+0x114>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d103      	bne.n	80039c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039b8:	f7fe ff6a 	bl	8002890 <HAL_RCC_GetPCLK2Freq>
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	e002      	b.n	80039c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039c0:	f7fe ff52 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 80039c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009a      	lsls	r2, r3, #2
 80039d0:	441a      	add	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	4a22      	ldr	r2, [pc, #136]	; (8003a68 <UART_SetConfig+0x118>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	0119      	lsls	r1, r3, #4
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009a      	lsls	r2, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039fc:	4b1a      	ldr	r3, [pc, #104]	; (8003a68 <UART_SetConfig+0x118>)
 80039fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	2064      	movs	r0, #100	; 0x64
 8003a06:	fb00 f303 	mul.w	r3, r0, r3
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	3332      	adds	r3, #50	; 0x32
 8003a10:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <UART_SetConfig+0x118>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a1c:	4419      	add	r1, r3
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	009a      	lsls	r2, r3, #2
 8003a28:	441a      	add	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a34:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <UART_SetConfig+0x118>)
 8003a36:	fba3 0302 	umull	r0, r3, r3, r2
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	2064      	movs	r0, #100	; 0x64
 8003a3e:	fb00 f303 	mul.w	r3, r0, r3
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	3332      	adds	r3, #50	; 0x32
 8003a48:	4a07      	ldr	r2, [pc, #28]	; (8003a68 <UART_SetConfig+0x118>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	f003 020f 	and.w	r2, r3, #15
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	440a      	add	r2, r1
 8003a5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40013800 	.word	0x40013800
 8003a68:	51eb851f 	.word	0x51eb851f

08003a6c <__errno>:
 8003a6c:	4b01      	ldr	r3, [pc, #4]	; (8003a74 <__errno+0x8>)
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	2000002c 	.word	0x2000002c

08003a78 <__libc_init_array>:
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	2600      	movs	r6, #0
 8003a7c:	4d0c      	ldr	r5, [pc, #48]	; (8003ab0 <__libc_init_array+0x38>)
 8003a7e:	4c0d      	ldr	r4, [pc, #52]	; (8003ab4 <__libc_init_array+0x3c>)
 8003a80:	1b64      	subs	r4, r4, r5
 8003a82:	10a4      	asrs	r4, r4, #2
 8003a84:	42a6      	cmp	r6, r4
 8003a86:	d109      	bne.n	8003a9c <__libc_init_array+0x24>
 8003a88:	f000 fc5c 	bl	8004344 <_init>
 8003a8c:	2600      	movs	r6, #0
 8003a8e:	4d0a      	ldr	r5, [pc, #40]	; (8003ab8 <__libc_init_array+0x40>)
 8003a90:	4c0a      	ldr	r4, [pc, #40]	; (8003abc <__libc_init_array+0x44>)
 8003a92:	1b64      	subs	r4, r4, r5
 8003a94:	10a4      	asrs	r4, r4, #2
 8003a96:	42a6      	cmp	r6, r4
 8003a98:	d105      	bne.n	8003aa6 <__libc_init_array+0x2e>
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}
 8003a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa0:	4798      	blx	r3
 8003aa2:	3601      	adds	r6, #1
 8003aa4:	e7ee      	b.n	8003a84 <__libc_init_array+0xc>
 8003aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aaa:	4798      	blx	r3
 8003aac:	3601      	adds	r6, #1
 8003aae:	e7f2      	b.n	8003a96 <__libc_init_array+0x1e>
 8003ab0:	08004420 	.word	0x08004420
 8003ab4:	08004420 	.word	0x08004420
 8003ab8:	08004420 	.word	0x08004420
 8003abc:	08004424 	.word	0x08004424

08003ac0 <memset>:
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4402      	add	r2, r0
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d100      	bne.n	8003aca <memset+0xa>
 8003ac8:	4770      	bx	lr
 8003aca:	f803 1b01 	strb.w	r1, [r3], #1
 8003ace:	e7f9      	b.n	8003ac4 <memset+0x4>

08003ad0 <siprintf>:
 8003ad0:	b40e      	push	{r1, r2, r3}
 8003ad2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ad6:	b500      	push	{lr}
 8003ad8:	b09c      	sub	sp, #112	; 0x70
 8003ada:	ab1d      	add	r3, sp, #116	; 0x74
 8003adc:	9002      	str	r0, [sp, #8]
 8003ade:	9006      	str	r0, [sp, #24]
 8003ae0:	9107      	str	r1, [sp, #28]
 8003ae2:	9104      	str	r1, [sp, #16]
 8003ae4:	4808      	ldr	r0, [pc, #32]	; (8003b08 <siprintf+0x38>)
 8003ae6:	4909      	ldr	r1, [pc, #36]	; (8003b0c <siprintf+0x3c>)
 8003ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003aec:	9105      	str	r1, [sp, #20]
 8003aee:	6800      	ldr	r0, [r0, #0]
 8003af0:	a902      	add	r1, sp, #8
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	f000 f868 	bl	8003bc8 <_svfiprintf_r>
 8003af8:	2200      	movs	r2, #0
 8003afa:	9b02      	ldr	r3, [sp, #8]
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	b01c      	add	sp, #112	; 0x70
 8003b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b04:	b003      	add	sp, #12
 8003b06:	4770      	bx	lr
 8003b08:	2000002c 	.word	0x2000002c
 8003b0c:	ffff0208 	.word	0xffff0208

08003b10 <__ssputs_r>:
 8003b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b14:	688e      	ldr	r6, [r1, #8]
 8003b16:	4682      	mov	sl, r0
 8003b18:	429e      	cmp	r6, r3
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	4690      	mov	r8, r2
 8003b1e:	461f      	mov	r7, r3
 8003b20:	d838      	bhi.n	8003b94 <__ssputs_r+0x84>
 8003b22:	898a      	ldrh	r2, [r1, #12]
 8003b24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b28:	d032      	beq.n	8003b90 <__ssputs_r+0x80>
 8003b2a:	6825      	ldr	r5, [r4, #0]
 8003b2c:	6909      	ldr	r1, [r1, #16]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	eba5 0901 	sub.w	r9, r5, r1
 8003b34:	6965      	ldr	r5, [r4, #20]
 8003b36:	444b      	add	r3, r9
 8003b38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b40:	106d      	asrs	r5, r5, #1
 8003b42:	429d      	cmp	r5, r3
 8003b44:	bf38      	it	cc
 8003b46:	461d      	movcc	r5, r3
 8003b48:	0553      	lsls	r3, r2, #21
 8003b4a:	d531      	bpl.n	8003bb0 <__ssputs_r+0xa0>
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	f000 fb53 	bl	80041f8 <_malloc_r>
 8003b52:	4606      	mov	r6, r0
 8003b54:	b950      	cbnz	r0, 8003b6c <__ssputs_r+0x5c>
 8003b56:	230c      	movs	r3, #12
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	f8ca 3000 	str.w	r3, [sl]
 8003b60:	89a3      	ldrh	r3, [r4, #12]
 8003b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b66:	81a3      	strh	r3, [r4, #12]
 8003b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b6c:	464a      	mov	r2, r9
 8003b6e:	6921      	ldr	r1, [r4, #16]
 8003b70:	f000 face 	bl	8004110 <memcpy>
 8003b74:	89a3      	ldrh	r3, [r4, #12]
 8003b76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b7e:	81a3      	strh	r3, [r4, #12]
 8003b80:	6126      	str	r6, [r4, #16]
 8003b82:	444e      	add	r6, r9
 8003b84:	6026      	str	r6, [r4, #0]
 8003b86:	463e      	mov	r6, r7
 8003b88:	6165      	str	r5, [r4, #20]
 8003b8a:	eba5 0509 	sub.w	r5, r5, r9
 8003b8e:	60a5      	str	r5, [r4, #8]
 8003b90:	42be      	cmp	r6, r7
 8003b92:	d900      	bls.n	8003b96 <__ssputs_r+0x86>
 8003b94:	463e      	mov	r6, r7
 8003b96:	4632      	mov	r2, r6
 8003b98:	4641      	mov	r1, r8
 8003b9a:	6820      	ldr	r0, [r4, #0]
 8003b9c:	f000 fac6 	bl	800412c <memmove>
 8003ba0:	68a3      	ldr	r3, [r4, #8]
 8003ba2:	6822      	ldr	r2, [r4, #0]
 8003ba4:	1b9b      	subs	r3, r3, r6
 8003ba6:	4432      	add	r2, r6
 8003ba8:	2000      	movs	r0, #0
 8003baa:	60a3      	str	r3, [r4, #8]
 8003bac:	6022      	str	r2, [r4, #0]
 8003bae:	e7db      	b.n	8003b68 <__ssputs_r+0x58>
 8003bb0:	462a      	mov	r2, r5
 8003bb2:	f000 fb7b 	bl	80042ac <_realloc_r>
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	d1e1      	bne.n	8003b80 <__ssputs_r+0x70>
 8003bbc:	4650      	mov	r0, sl
 8003bbe:	6921      	ldr	r1, [r4, #16]
 8003bc0:	f000 face 	bl	8004160 <_free_r>
 8003bc4:	e7c7      	b.n	8003b56 <__ssputs_r+0x46>
	...

08003bc8 <_svfiprintf_r>:
 8003bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bcc:	4698      	mov	r8, r3
 8003bce:	898b      	ldrh	r3, [r1, #12]
 8003bd0:	4607      	mov	r7, r0
 8003bd2:	061b      	lsls	r3, r3, #24
 8003bd4:	460d      	mov	r5, r1
 8003bd6:	4614      	mov	r4, r2
 8003bd8:	b09d      	sub	sp, #116	; 0x74
 8003bda:	d50e      	bpl.n	8003bfa <_svfiprintf_r+0x32>
 8003bdc:	690b      	ldr	r3, [r1, #16]
 8003bde:	b963      	cbnz	r3, 8003bfa <_svfiprintf_r+0x32>
 8003be0:	2140      	movs	r1, #64	; 0x40
 8003be2:	f000 fb09 	bl	80041f8 <_malloc_r>
 8003be6:	6028      	str	r0, [r5, #0]
 8003be8:	6128      	str	r0, [r5, #16]
 8003bea:	b920      	cbnz	r0, 8003bf6 <_svfiprintf_r+0x2e>
 8003bec:	230c      	movs	r3, #12
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf4:	e0d1      	b.n	8003d9a <_svfiprintf_r+0x1d2>
 8003bf6:	2340      	movs	r3, #64	; 0x40
 8003bf8:	616b      	str	r3, [r5, #20]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8003bfe:	2320      	movs	r3, #32
 8003c00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c04:	2330      	movs	r3, #48	; 0x30
 8003c06:	f04f 0901 	mov.w	r9, #1
 8003c0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003db4 <_svfiprintf_r+0x1ec>
 8003c12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c16:	4623      	mov	r3, r4
 8003c18:	469a      	mov	sl, r3
 8003c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c1e:	b10a      	cbz	r2, 8003c24 <_svfiprintf_r+0x5c>
 8003c20:	2a25      	cmp	r2, #37	; 0x25
 8003c22:	d1f9      	bne.n	8003c18 <_svfiprintf_r+0x50>
 8003c24:	ebba 0b04 	subs.w	fp, sl, r4
 8003c28:	d00b      	beq.n	8003c42 <_svfiprintf_r+0x7a>
 8003c2a:	465b      	mov	r3, fp
 8003c2c:	4622      	mov	r2, r4
 8003c2e:	4629      	mov	r1, r5
 8003c30:	4638      	mov	r0, r7
 8003c32:	f7ff ff6d 	bl	8003b10 <__ssputs_r>
 8003c36:	3001      	adds	r0, #1
 8003c38:	f000 80aa 	beq.w	8003d90 <_svfiprintf_r+0x1c8>
 8003c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c3e:	445a      	add	r2, fp
 8003c40:	9209      	str	r2, [sp, #36]	; 0x24
 8003c42:	f89a 3000 	ldrb.w	r3, [sl]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 80a2 	beq.w	8003d90 <_svfiprintf_r+0x1c8>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c56:	f10a 0a01 	add.w	sl, sl, #1
 8003c5a:	9304      	str	r3, [sp, #16]
 8003c5c:	9307      	str	r3, [sp, #28]
 8003c5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c62:	931a      	str	r3, [sp, #104]	; 0x68
 8003c64:	4654      	mov	r4, sl
 8003c66:	2205      	movs	r2, #5
 8003c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c6c:	4851      	ldr	r0, [pc, #324]	; (8003db4 <_svfiprintf_r+0x1ec>)
 8003c6e:	f000 fa41 	bl	80040f4 <memchr>
 8003c72:	9a04      	ldr	r2, [sp, #16]
 8003c74:	b9d8      	cbnz	r0, 8003cae <_svfiprintf_r+0xe6>
 8003c76:	06d0      	lsls	r0, r2, #27
 8003c78:	bf44      	itt	mi
 8003c7a:	2320      	movmi	r3, #32
 8003c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c80:	0711      	lsls	r1, r2, #28
 8003c82:	bf44      	itt	mi
 8003c84:	232b      	movmi	r3, #43	; 0x2b
 8003c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c90:	d015      	beq.n	8003cbe <_svfiprintf_r+0xf6>
 8003c92:	4654      	mov	r4, sl
 8003c94:	2000      	movs	r0, #0
 8003c96:	f04f 0c0a 	mov.w	ip, #10
 8003c9a:	9a07      	ldr	r2, [sp, #28]
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ca2:	3b30      	subs	r3, #48	; 0x30
 8003ca4:	2b09      	cmp	r3, #9
 8003ca6:	d94e      	bls.n	8003d46 <_svfiprintf_r+0x17e>
 8003ca8:	b1b0      	cbz	r0, 8003cd8 <_svfiprintf_r+0x110>
 8003caa:	9207      	str	r2, [sp, #28]
 8003cac:	e014      	b.n	8003cd8 <_svfiprintf_r+0x110>
 8003cae:	eba0 0308 	sub.w	r3, r0, r8
 8003cb2:	fa09 f303 	lsl.w	r3, r9, r3
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	46a2      	mov	sl, r4
 8003cba:	9304      	str	r3, [sp, #16]
 8003cbc:	e7d2      	b.n	8003c64 <_svfiprintf_r+0x9c>
 8003cbe:	9b03      	ldr	r3, [sp, #12]
 8003cc0:	1d19      	adds	r1, r3, #4
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	9103      	str	r1, [sp, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	bfbb      	ittet	lt
 8003cca:	425b      	neglt	r3, r3
 8003ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8003cd0:	9307      	strge	r3, [sp, #28]
 8003cd2:	9307      	strlt	r3, [sp, #28]
 8003cd4:	bfb8      	it	lt
 8003cd6:	9204      	strlt	r2, [sp, #16]
 8003cd8:	7823      	ldrb	r3, [r4, #0]
 8003cda:	2b2e      	cmp	r3, #46	; 0x2e
 8003cdc:	d10c      	bne.n	8003cf8 <_svfiprintf_r+0x130>
 8003cde:	7863      	ldrb	r3, [r4, #1]
 8003ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ce2:	d135      	bne.n	8003d50 <_svfiprintf_r+0x188>
 8003ce4:	9b03      	ldr	r3, [sp, #12]
 8003ce6:	3402      	adds	r4, #2
 8003ce8:	1d1a      	adds	r2, r3, #4
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	9203      	str	r2, [sp, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	bfb8      	it	lt
 8003cf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cf6:	9305      	str	r3, [sp, #20]
 8003cf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003dc4 <_svfiprintf_r+0x1fc>
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	4650      	mov	r0, sl
 8003d00:	7821      	ldrb	r1, [r4, #0]
 8003d02:	f000 f9f7 	bl	80040f4 <memchr>
 8003d06:	b140      	cbz	r0, 8003d1a <_svfiprintf_r+0x152>
 8003d08:	2340      	movs	r3, #64	; 0x40
 8003d0a:	eba0 000a 	sub.w	r0, r0, sl
 8003d0e:	fa03 f000 	lsl.w	r0, r3, r0
 8003d12:	9b04      	ldr	r3, [sp, #16]
 8003d14:	3401      	adds	r4, #1
 8003d16:	4303      	orrs	r3, r0
 8003d18:	9304      	str	r3, [sp, #16]
 8003d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d1e:	2206      	movs	r2, #6
 8003d20:	4825      	ldr	r0, [pc, #148]	; (8003db8 <_svfiprintf_r+0x1f0>)
 8003d22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d26:	f000 f9e5 	bl	80040f4 <memchr>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	d038      	beq.n	8003da0 <_svfiprintf_r+0x1d8>
 8003d2e:	4b23      	ldr	r3, [pc, #140]	; (8003dbc <_svfiprintf_r+0x1f4>)
 8003d30:	bb1b      	cbnz	r3, 8003d7a <_svfiprintf_r+0x1b2>
 8003d32:	9b03      	ldr	r3, [sp, #12]
 8003d34:	3307      	adds	r3, #7
 8003d36:	f023 0307 	bic.w	r3, r3, #7
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	9303      	str	r3, [sp, #12]
 8003d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d40:	4433      	add	r3, r6
 8003d42:	9309      	str	r3, [sp, #36]	; 0x24
 8003d44:	e767      	b.n	8003c16 <_svfiprintf_r+0x4e>
 8003d46:	460c      	mov	r4, r1
 8003d48:	2001      	movs	r0, #1
 8003d4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d4e:	e7a5      	b.n	8003c9c <_svfiprintf_r+0xd4>
 8003d50:	2300      	movs	r3, #0
 8003d52:	f04f 0c0a 	mov.w	ip, #10
 8003d56:	4619      	mov	r1, r3
 8003d58:	3401      	adds	r4, #1
 8003d5a:	9305      	str	r3, [sp, #20]
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d62:	3a30      	subs	r2, #48	; 0x30
 8003d64:	2a09      	cmp	r2, #9
 8003d66:	d903      	bls.n	8003d70 <_svfiprintf_r+0x1a8>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0c5      	beq.n	8003cf8 <_svfiprintf_r+0x130>
 8003d6c:	9105      	str	r1, [sp, #20]
 8003d6e:	e7c3      	b.n	8003cf8 <_svfiprintf_r+0x130>
 8003d70:	4604      	mov	r4, r0
 8003d72:	2301      	movs	r3, #1
 8003d74:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d78:	e7f0      	b.n	8003d5c <_svfiprintf_r+0x194>
 8003d7a:	ab03      	add	r3, sp, #12
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	462a      	mov	r2, r5
 8003d80:	4638      	mov	r0, r7
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <_svfiprintf_r+0x1f8>)
 8003d84:	a904      	add	r1, sp, #16
 8003d86:	f3af 8000 	nop.w
 8003d8a:	1c42      	adds	r2, r0, #1
 8003d8c:	4606      	mov	r6, r0
 8003d8e:	d1d6      	bne.n	8003d3e <_svfiprintf_r+0x176>
 8003d90:	89ab      	ldrh	r3, [r5, #12]
 8003d92:	065b      	lsls	r3, r3, #25
 8003d94:	f53f af2c 	bmi.w	8003bf0 <_svfiprintf_r+0x28>
 8003d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d9a:	b01d      	add	sp, #116	; 0x74
 8003d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da0:	ab03      	add	r3, sp, #12
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	462a      	mov	r2, r5
 8003da6:	4638      	mov	r0, r7
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <_svfiprintf_r+0x1f8>)
 8003daa:	a904      	add	r1, sp, #16
 8003dac:	f000 f87c 	bl	8003ea8 <_printf_i>
 8003db0:	e7eb      	b.n	8003d8a <_svfiprintf_r+0x1c2>
 8003db2:	bf00      	nop
 8003db4:	080043ec 	.word	0x080043ec
 8003db8:	080043f6 	.word	0x080043f6
 8003dbc:	00000000 	.word	0x00000000
 8003dc0:	08003b11 	.word	0x08003b11
 8003dc4:	080043f2 	.word	0x080043f2

08003dc8 <_printf_common>:
 8003dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dcc:	4616      	mov	r6, r2
 8003dce:	4699      	mov	r9, r3
 8003dd0:	688a      	ldr	r2, [r1, #8]
 8003dd2:	690b      	ldr	r3, [r1, #16]
 8003dd4:	4607      	mov	r7, r0
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	bfb8      	it	lt
 8003dda:	4613      	movlt	r3, r2
 8003ddc:	6033      	str	r3, [r6, #0]
 8003dde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003de2:	460c      	mov	r4, r1
 8003de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003de8:	b10a      	cbz	r2, 8003dee <_printf_common+0x26>
 8003dea:	3301      	adds	r3, #1
 8003dec:	6033      	str	r3, [r6, #0]
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	0699      	lsls	r1, r3, #26
 8003df2:	bf42      	ittt	mi
 8003df4:	6833      	ldrmi	r3, [r6, #0]
 8003df6:	3302      	addmi	r3, #2
 8003df8:	6033      	strmi	r3, [r6, #0]
 8003dfa:	6825      	ldr	r5, [r4, #0]
 8003dfc:	f015 0506 	ands.w	r5, r5, #6
 8003e00:	d106      	bne.n	8003e10 <_printf_common+0x48>
 8003e02:	f104 0a19 	add.w	sl, r4, #25
 8003e06:	68e3      	ldr	r3, [r4, #12]
 8003e08:	6832      	ldr	r2, [r6, #0]
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	42ab      	cmp	r3, r5
 8003e0e:	dc28      	bgt.n	8003e62 <_printf_common+0x9a>
 8003e10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e14:	1e13      	subs	r3, r2, #0
 8003e16:	6822      	ldr	r2, [r4, #0]
 8003e18:	bf18      	it	ne
 8003e1a:	2301      	movne	r3, #1
 8003e1c:	0692      	lsls	r2, r2, #26
 8003e1e:	d42d      	bmi.n	8003e7c <_printf_common+0xb4>
 8003e20:	4649      	mov	r1, r9
 8003e22:	4638      	mov	r0, r7
 8003e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e28:	47c0      	blx	r8
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	d020      	beq.n	8003e70 <_printf_common+0xa8>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	68e5      	ldr	r5, [r4, #12]
 8003e32:	f003 0306 	and.w	r3, r3, #6
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	bf18      	it	ne
 8003e3a:	2500      	movne	r5, #0
 8003e3c:	6832      	ldr	r2, [r6, #0]
 8003e3e:	f04f 0600 	mov.w	r6, #0
 8003e42:	68a3      	ldr	r3, [r4, #8]
 8003e44:	bf08      	it	eq
 8003e46:	1aad      	subeq	r5, r5, r2
 8003e48:	6922      	ldr	r2, [r4, #16]
 8003e4a:	bf08      	it	eq
 8003e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e50:	4293      	cmp	r3, r2
 8003e52:	bfc4      	itt	gt
 8003e54:	1a9b      	subgt	r3, r3, r2
 8003e56:	18ed      	addgt	r5, r5, r3
 8003e58:	341a      	adds	r4, #26
 8003e5a:	42b5      	cmp	r5, r6
 8003e5c:	d11a      	bne.n	8003e94 <_printf_common+0xcc>
 8003e5e:	2000      	movs	r0, #0
 8003e60:	e008      	b.n	8003e74 <_printf_common+0xac>
 8003e62:	2301      	movs	r3, #1
 8003e64:	4652      	mov	r2, sl
 8003e66:	4649      	mov	r1, r9
 8003e68:	4638      	mov	r0, r7
 8003e6a:	47c0      	blx	r8
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	d103      	bne.n	8003e78 <_printf_common+0xb0>
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e78:	3501      	adds	r5, #1
 8003e7a:	e7c4      	b.n	8003e06 <_printf_common+0x3e>
 8003e7c:	2030      	movs	r0, #48	; 0x30
 8003e7e:	18e1      	adds	r1, r4, r3
 8003e80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e8a:	4422      	add	r2, r4
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e92:	e7c5      	b.n	8003e20 <_printf_common+0x58>
 8003e94:	2301      	movs	r3, #1
 8003e96:	4622      	mov	r2, r4
 8003e98:	4649      	mov	r1, r9
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	47c0      	blx	r8
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	d0e6      	beq.n	8003e70 <_printf_common+0xa8>
 8003ea2:	3601      	adds	r6, #1
 8003ea4:	e7d9      	b.n	8003e5a <_printf_common+0x92>
	...

08003ea8 <_printf_i>:
 8003ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003eac:	460c      	mov	r4, r1
 8003eae:	7e27      	ldrb	r7, [r4, #24]
 8003eb0:	4691      	mov	r9, r2
 8003eb2:	2f78      	cmp	r7, #120	; 0x78
 8003eb4:	4680      	mov	r8, r0
 8003eb6:	469a      	mov	sl, r3
 8003eb8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003eba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ebe:	d807      	bhi.n	8003ed0 <_printf_i+0x28>
 8003ec0:	2f62      	cmp	r7, #98	; 0x62
 8003ec2:	d80a      	bhi.n	8003eda <_printf_i+0x32>
 8003ec4:	2f00      	cmp	r7, #0
 8003ec6:	f000 80d9 	beq.w	800407c <_printf_i+0x1d4>
 8003eca:	2f58      	cmp	r7, #88	; 0x58
 8003ecc:	f000 80a4 	beq.w	8004018 <_printf_i+0x170>
 8003ed0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ed8:	e03a      	b.n	8003f50 <_printf_i+0xa8>
 8003eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ede:	2b15      	cmp	r3, #21
 8003ee0:	d8f6      	bhi.n	8003ed0 <_printf_i+0x28>
 8003ee2:	a001      	add	r0, pc, #4	; (adr r0, 8003ee8 <_printf_i+0x40>)
 8003ee4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ee8:	08003f41 	.word	0x08003f41
 8003eec:	08003f55 	.word	0x08003f55
 8003ef0:	08003ed1 	.word	0x08003ed1
 8003ef4:	08003ed1 	.word	0x08003ed1
 8003ef8:	08003ed1 	.word	0x08003ed1
 8003efc:	08003ed1 	.word	0x08003ed1
 8003f00:	08003f55 	.word	0x08003f55
 8003f04:	08003ed1 	.word	0x08003ed1
 8003f08:	08003ed1 	.word	0x08003ed1
 8003f0c:	08003ed1 	.word	0x08003ed1
 8003f10:	08003ed1 	.word	0x08003ed1
 8003f14:	08004063 	.word	0x08004063
 8003f18:	08003f85 	.word	0x08003f85
 8003f1c:	08004045 	.word	0x08004045
 8003f20:	08003ed1 	.word	0x08003ed1
 8003f24:	08003ed1 	.word	0x08003ed1
 8003f28:	08004085 	.word	0x08004085
 8003f2c:	08003ed1 	.word	0x08003ed1
 8003f30:	08003f85 	.word	0x08003f85
 8003f34:	08003ed1 	.word	0x08003ed1
 8003f38:	08003ed1 	.word	0x08003ed1
 8003f3c:	0800404d 	.word	0x0800404d
 8003f40:	680b      	ldr	r3, [r1, #0]
 8003f42:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f46:	1d1a      	adds	r2, r3, #4
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	600a      	str	r2, [r1, #0]
 8003f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0a4      	b.n	800409e <_printf_i+0x1f6>
 8003f54:	6825      	ldr	r5, [r4, #0]
 8003f56:	6808      	ldr	r0, [r1, #0]
 8003f58:	062e      	lsls	r6, r5, #24
 8003f5a:	f100 0304 	add.w	r3, r0, #4
 8003f5e:	d50a      	bpl.n	8003f76 <_printf_i+0xce>
 8003f60:	6805      	ldr	r5, [r0, #0]
 8003f62:	600b      	str	r3, [r1, #0]
 8003f64:	2d00      	cmp	r5, #0
 8003f66:	da03      	bge.n	8003f70 <_printf_i+0xc8>
 8003f68:	232d      	movs	r3, #45	; 0x2d
 8003f6a:	426d      	negs	r5, r5
 8003f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f70:	230a      	movs	r3, #10
 8003f72:	485e      	ldr	r0, [pc, #376]	; (80040ec <_printf_i+0x244>)
 8003f74:	e019      	b.n	8003faa <_printf_i+0x102>
 8003f76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f7a:	6805      	ldr	r5, [r0, #0]
 8003f7c:	600b      	str	r3, [r1, #0]
 8003f7e:	bf18      	it	ne
 8003f80:	b22d      	sxthne	r5, r5
 8003f82:	e7ef      	b.n	8003f64 <_printf_i+0xbc>
 8003f84:	680b      	ldr	r3, [r1, #0]
 8003f86:	6825      	ldr	r5, [r4, #0]
 8003f88:	1d18      	adds	r0, r3, #4
 8003f8a:	6008      	str	r0, [r1, #0]
 8003f8c:	0628      	lsls	r0, r5, #24
 8003f8e:	d501      	bpl.n	8003f94 <_printf_i+0xec>
 8003f90:	681d      	ldr	r5, [r3, #0]
 8003f92:	e002      	b.n	8003f9a <_printf_i+0xf2>
 8003f94:	0669      	lsls	r1, r5, #25
 8003f96:	d5fb      	bpl.n	8003f90 <_printf_i+0xe8>
 8003f98:	881d      	ldrh	r5, [r3, #0]
 8003f9a:	2f6f      	cmp	r7, #111	; 0x6f
 8003f9c:	bf0c      	ite	eq
 8003f9e:	2308      	moveq	r3, #8
 8003fa0:	230a      	movne	r3, #10
 8003fa2:	4852      	ldr	r0, [pc, #328]	; (80040ec <_printf_i+0x244>)
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003faa:	6866      	ldr	r6, [r4, #4]
 8003fac:	2e00      	cmp	r6, #0
 8003fae:	bfa8      	it	ge
 8003fb0:	6821      	ldrge	r1, [r4, #0]
 8003fb2:	60a6      	str	r6, [r4, #8]
 8003fb4:	bfa4      	itt	ge
 8003fb6:	f021 0104 	bicge.w	r1, r1, #4
 8003fba:	6021      	strge	r1, [r4, #0]
 8003fbc:	b90d      	cbnz	r5, 8003fc2 <_printf_i+0x11a>
 8003fbe:	2e00      	cmp	r6, #0
 8003fc0:	d04d      	beq.n	800405e <_printf_i+0x1b6>
 8003fc2:	4616      	mov	r6, r2
 8003fc4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fc8:	fb03 5711 	mls	r7, r3, r1, r5
 8003fcc:	5dc7      	ldrb	r7, [r0, r7]
 8003fce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fd2:	462f      	mov	r7, r5
 8003fd4:	42bb      	cmp	r3, r7
 8003fd6:	460d      	mov	r5, r1
 8003fd8:	d9f4      	bls.n	8003fc4 <_printf_i+0x11c>
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d10b      	bne.n	8003ff6 <_printf_i+0x14e>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	07df      	lsls	r7, r3, #31
 8003fe2:	d508      	bpl.n	8003ff6 <_printf_i+0x14e>
 8003fe4:	6923      	ldr	r3, [r4, #16]
 8003fe6:	6861      	ldr	r1, [r4, #4]
 8003fe8:	4299      	cmp	r1, r3
 8003fea:	bfde      	ittt	le
 8003fec:	2330      	movle	r3, #48	; 0x30
 8003fee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ff2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ff6:	1b92      	subs	r2, r2, r6
 8003ff8:	6122      	str	r2, [r4, #16]
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	4640      	mov	r0, r8
 8004000:	f8cd a000 	str.w	sl, [sp]
 8004004:	aa03      	add	r2, sp, #12
 8004006:	f7ff fedf 	bl	8003dc8 <_printf_common>
 800400a:	3001      	adds	r0, #1
 800400c:	d14c      	bne.n	80040a8 <_printf_i+0x200>
 800400e:	f04f 30ff 	mov.w	r0, #4294967295
 8004012:	b004      	add	sp, #16
 8004014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004018:	4834      	ldr	r0, [pc, #208]	; (80040ec <_printf_i+0x244>)
 800401a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800401e:	680e      	ldr	r6, [r1, #0]
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	f856 5b04 	ldr.w	r5, [r6], #4
 8004026:	061f      	lsls	r7, r3, #24
 8004028:	600e      	str	r6, [r1, #0]
 800402a:	d514      	bpl.n	8004056 <_printf_i+0x1ae>
 800402c:	07d9      	lsls	r1, r3, #31
 800402e:	bf44      	itt	mi
 8004030:	f043 0320 	orrmi.w	r3, r3, #32
 8004034:	6023      	strmi	r3, [r4, #0]
 8004036:	b91d      	cbnz	r5, 8004040 <_printf_i+0x198>
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	f023 0320 	bic.w	r3, r3, #32
 800403e:	6023      	str	r3, [r4, #0]
 8004040:	2310      	movs	r3, #16
 8004042:	e7af      	b.n	8003fa4 <_printf_i+0xfc>
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	f043 0320 	orr.w	r3, r3, #32
 800404a:	6023      	str	r3, [r4, #0]
 800404c:	2378      	movs	r3, #120	; 0x78
 800404e:	4828      	ldr	r0, [pc, #160]	; (80040f0 <_printf_i+0x248>)
 8004050:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004054:	e7e3      	b.n	800401e <_printf_i+0x176>
 8004056:	065e      	lsls	r6, r3, #25
 8004058:	bf48      	it	mi
 800405a:	b2ad      	uxthmi	r5, r5
 800405c:	e7e6      	b.n	800402c <_printf_i+0x184>
 800405e:	4616      	mov	r6, r2
 8004060:	e7bb      	b.n	8003fda <_printf_i+0x132>
 8004062:	680b      	ldr	r3, [r1, #0]
 8004064:	6826      	ldr	r6, [r4, #0]
 8004066:	1d1d      	adds	r5, r3, #4
 8004068:	6960      	ldr	r0, [r4, #20]
 800406a:	600d      	str	r5, [r1, #0]
 800406c:	0635      	lsls	r5, r6, #24
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	d501      	bpl.n	8004076 <_printf_i+0x1ce>
 8004072:	6018      	str	r0, [r3, #0]
 8004074:	e002      	b.n	800407c <_printf_i+0x1d4>
 8004076:	0671      	lsls	r1, r6, #25
 8004078:	d5fb      	bpl.n	8004072 <_printf_i+0x1ca>
 800407a:	8018      	strh	r0, [r3, #0]
 800407c:	2300      	movs	r3, #0
 800407e:	4616      	mov	r6, r2
 8004080:	6123      	str	r3, [r4, #16]
 8004082:	e7ba      	b.n	8003ffa <_printf_i+0x152>
 8004084:	680b      	ldr	r3, [r1, #0]
 8004086:	1d1a      	adds	r2, r3, #4
 8004088:	600a      	str	r2, [r1, #0]
 800408a:	681e      	ldr	r6, [r3, #0]
 800408c:	2100      	movs	r1, #0
 800408e:	4630      	mov	r0, r6
 8004090:	6862      	ldr	r2, [r4, #4]
 8004092:	f000 f82f 	bl	80040f4 <memchr>
 8004096:	b108      	cbz	r0, 800409c <_printf_i+0x1f4>
 8004098:	1b80      	subs	r0, r0, r6
 800409a:	6060      	str	r0, [r4, #4]
 800409c:	6863      	ldr	r3, [r4, #4]
 800409e:	6123      	str	r3, [r4, #16]
 80040a0:	2300      	movs	r3, #0
 80040a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040a6:	e7a8      	b.n	8003ffa <_printf_i+0x152>
 80040a8:	4632      	mov	r2, r6
 80040aa:	4649      	mov	r1, r9
 80040ac:	4640      	mov	r0, r8
 80040ae:	6923      	ldr	r3, [r4, #16]
 80040b0:	47d0      	blx	sl
 80040b2:	3001      	adds	r0, #1
 80040b4:	d0ab      	beq.n	800400e <_printf_i+0x166>
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	079b      	lsls	r3, r3, #30
 80040ba:	d413      	bmi.n	80040e4 <_printf_i+0x23c>
 80040bc:	68e0      	ldr	r0, [r4, #12]
 80040be:	9b03      	ldr	r3, [sp, #12]
 80040c0:	4298      	cmp	r0, r3
 80040c2:	bfb8      	it	lt
 80040c4:	4618      	movlt	r0, r3
 80040c6:	e7a4      	b.n	8004012 <_printf_i+0x16a>
 80040c8:	2301      	movs	r3, #1
 80040ca:	4632      	mov	r2, r6
 80040cc:	4649      	mov	r1, r9
 80040ce:	4640      	mov	r0, r8
 80040d0:	47d0      	blx	sl
 80040d2:	3001      	adds	r0, #1
 80040d4:	d09b      	beq.n	800400e <_printf_i+0x166>
 80040d6:	3501      	adds	r5, #1
 80040d8:	68e3      	ldr	r3, [r4, #12]
 80040da:	9903      	ldr	r1, [sp, #12]
 80040dc:	1a5b      	subs	r3, r3, r1
 80040de:	42ab      	cmp	r3, r5
 80040e0:	dcf2      	bgt.n	80040c8 <_printf_i+0x220>
 80040e2:	e7eb      	b.n	80040bc <_printf_i+0x214>
 80040e4:	2500      	movs	r5, #0
 80040e6:	f104 0619 	add.w	r6, r4, #25
 80040ea:	e7f5      	b.n	80040d8 <_printf_i+0x230>
 80040ec:	080043fd 	.word	0x080043fd
 80040f0:	0800440e 	.word	0x0800440e

080040f4 <memchr>:
 80040f4:	4603      	mov	r3, r0
 80040f6:	b510      	push	{r4, lr}
 80040f8:	b2c9      	uxtb	r1, r1
 80040fa:	4402      	add	r2, r0
 80040fc:	4293      	cmp	r3, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	d101      	bne.n	8004106 <memchr+0x12>
 8004102:	2000      	movs	r0, #0
 8004104:	e003      	b.n	800410e <memchr+0x1a>
 8004106:	7804      	ldrb	r4, [r0, #0]
 8004108:	3301      	adds	r3, #1
 800410a:	428c      	cmp	r4, r1
 800410c:	d1f6      	bne.n	80040fc <memchr+0x8>
 800410e:	bd10      	pop	{r4, pc}

08004110 <memcpy>:
 8004110:	440a      	add	r2, r1
 8004112:	4291      	cmp	r1, r2
 8004114:	f100 33ff 	add.w	r3, r0, #4294967295
 8004118:	d100      	bne.n	800411c <memcpy+0xc>
 800411a:	4770      	bx	lr
 800411c:	b510      	push	{r4, lr}
 800411e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004122:	4291      	cmp	r1, r2
 8004124:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004128:	d1f9      	bne.n	800411e <memcpy+0xe>
 800412a:	bd10      	pop	{r4, pc}

0800412c <memmove>:
 800412c:	4288      	cmp	r0, r1
 800412e:	b510      	push	{r4, lr}
 8004130:	eb01 0402 	add.w	r4, r1, r2
 8004134:	d902      	bls.n	800413c <memmove+0x10>
 8004136:	4284      	cmp	r4, r0
 8004138:	4623      	mov	r3, r4
 800413a:	d807      	bhi.n	800414c <memmove+0x20>
 800413c:	1e43      	subs	r3, r0, #1
 800413e:	42a1      	cmp	r1, r4
 8004140:	d008      	beq.n	8004154 <memmove+0x28>
 8004142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800414a:	e7f8      	b.n	800413e <memmove+0x12>
 800414c:	4601      	mov	r1, r0
 800414e:	4402      	add	r2, r0
 8004150:	428a      	cmp	r2, r1
 8004152:	d100      	bne.n	8004156 <memmove+0x2a>
 8004154:	bd10      	pop	{r4, pc}
 8004156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800415a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800415e:	e7f7      	b.n	8004150 <memmove+0x24>

08004160 <_free_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4605      	mov	r5, r0
 8004164:	2900      	cmp	r1, #0
 8004166:	d043      	beq.n	80041f0 <_free_r+0x90>
 8004168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800416c:	1f0c      	subs	r4, r1, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	bfb8      	it	lt
 8004172:	18e4      	addlt	r4, r4, r3
 8004174:	f000 f8d0 	bl	8004318 <__malloc_lock>
 8004178:	4a1e      	ldr	r2, [pc, #120]	; (80041f4 <_free_r+0x94>)
 800417a:	6813      	ldr	r3, [r2, #0]
 800417c:	4610      	mov	r0, r2
 800417e:	b933      	cbnz	r3, 800418e <_free_r+0x2e>
 8004180:	6063      	str	r3, [r4, #4]
 8004182:	6014      	str	r4, [r2, #0]
 8004184:	4628      	mov	r0, r5
 8004186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800418a:	f000 b8cb 	b.w	8004324 <__malloc_unlock>
 800418e:	42a3      	cmp	r3, r4
 8004190:	d90a      	bls.n	80041a8 <_free_r+0x48>
 8004192:	6821      	ldr	r1, [r4, #0]
 8004194:	1862      	adds	r2, r4, r1
 8004196:	4293      	cmp	r3, r2
 8004198:	bf01      	itttt	eq
 800419a:	681a      	ldreq	r2, [r3, #0]
 800419c:	685b      	ldreq	r3, [r3, #4]
 800419e:	1852      	addeq	r2, r2, r1
 80041a0:	6022      	streq	r2, [r4, #0]
 80041a2:	6063      	str	r3, [r4, #4]
 80041a4:	6004      	str	r4, [r0, #0]
 80041a6:	e7ed      	b.n	8004184 <_free_r+0x24>
 80041a8:	461a      	mov	r2, r3
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	b10b      	cbz	r3, 80041b2 <_free_r+0x52>
 80041ae:	42a3      	cmp	r3, r4
 80041b0:	d9fa      	bls.n	80041a8 <_free_r+0x48>
 80041b2:	6811      	ldr	r1, [r2, #0]
 80041b4:	1850      	adds	r0, r2, r1
 80041b6:	42a0      	cmp	r0, r4
 80041b8:	d10b      	bne.n	80041d2 <_free_r+0x72>
 80041ba:	6820      	ldr	r0, [r4, #0]
 80041bc:	4401      	add	r1, r0
 80041be:	1850      	adds	r0, r2, r1
 80041c0:	4283      	cmp	r3, r0
 80041c2:	6011      	str	r1, [r2, #0]
 80041c4:	d1de      	bne.n	8004184 <_free_r+0x24>
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4401      	add	r1, r0
 80041cc:	6011      	str	r1, [r2, #0]
 80041ce:	6053      	str	r3, [r2, #4]
 80041d0:	e7d8      	b.n	8004184 <_free_r+0x24>
 80041d2:	d902      	bls.n	80041da <_free_r+0x7a>
 80041d4:	230c      	movs	r3, #12
 80041d6:	602b      	str	r3, [r5, #0]
 80041d8:	e7d4      	b.n	8004184 <_free_r+0x24>
 80041da:	6820      	ldr	r0, [r4, #0]
 80041dc:	1821      	adds	r1, r4, r0
 80041de:	428b      	cmp	r3, r1
 80041e0:	bf01      	itttt	eq
 80041e2:	6819      	ldreq	r1, [r3, #0]
 80041e4:	685b      	ldreq	r3, [r3, #4]
 80041e6:	1809      	addeq	r1, r1, r0
 80041e8:	6021      	streq	r1, [r4, #0]
 80041ea:	6063      	str	r3, [r4, #4]
 80041ec:	6054      	str	r4, [r2, #4]
 80041ee:	e7c9      	b.n	8004184 <_free_r+0x24>
 80041f0:	bd38      	pop	{r3, r4, r5, pc}
 80041f2:	bf00      	nop
 80041f4:	200000f0 	.word	0x200000f0

080041f8 <_malloc_r>:
 80041f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fa:	1ccd      	adds	r5, r1, #3
 80041fc:	f025 0503 	bic.w	r5, r5, #3
 8004200:	3508      	adds	r5, #8
 8004202:	2d0c      	cmp	r5, #12
 8004204:	bf38      	it	cc
 8004206:	250c      	movcc	r5, #12
 8004208:	2d00      	cmp	r5, #0
 800420a:	4606      	mov	r6, r0
 800420c:	db01      	blt.n	8004212 <_malloc_r+0x1a>
 800420e:	42a9      	cmp	r1, r5
 8004210:	d903      	bls.n	800421a <_malloc_r+0x22>
 8004212:	230c      	movs	r3, #12
 8004214:	6033      	str	r3, [r6, #0]
 8004216:	2000      	movs	r0, #0
 8004218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800421a:	f000 f87d 	bl	8004318 <__malloc_lock>
 800421e:	4921      	ldr	r1, [pc, #132]	; (80042a4 <_malloc_r+0xac>)
 8004220:	680a      	ldr	r2, [r1, #0]
 8004222:	4614      	mov	r4, r2
 8004224:	b99c      	cbnz	r4, 800424e <_malloc_r+0x56>
 8004226:	4f20      	ldr	r7, [pc, #128]	; (80042a8 <_malloc_r+0xb0>)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	b923      	cbnz	r3, 8004236 <_malloc_r+0x3e>
 800422c:	4621      	mov	r1, r4
 800422e:	4630      	mov	r0, r6
 8004230:	f000 f862 	bl	80042f8 <_sbrk_r>
 8004234:	6038      	str	r0, [r7, #0]
 8004236:	4629      	mov	r1, r5
 8004238:	4630      	mov	r0, r6
 800423a:	f000 f85d 	bl	80042f8 <_sbrk_r>
 800423e:	1c43      	adds	r3, r0, #1
 8004240:	d123      	bne.n	800428a <_malloc_r+0x92>
 8004242:	230c      	movs	r3, #12
 8004244:	4630      	mov	r0, r6
 8004246:	6033      	str	r3, [r6, #0]
 8004248:	f000 f86c 	bl	8004324 <__malloc_unlock>
 800424c:	e7e3      	b.n	8004216 <_malloc_r+0x1e>
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	1b5b      	subs	r3, r3, r5
 8004252:	d417      	bmi.n	8004284 <_malloc_r+0x8c>
 8004254:	2b0b      	cmp	r3, #11
 8004256:	d903      	bls.n	8004260 <_malloc_r+0x68>
 8004258:	6023      	str	r3, [r4, #0]
 800425a:	441c      	add	r4, r3
 800425c:	6025      	str	r5, [r4, #0]
 800425e:	e004      	b.n	800426a <_malloc_r+0x72>
 8004260:	6863      	ldr	r3, [r4, #4]
 8004262:	42a2      	cmp	r2, r4
 8004264:	bf0c      	ite	eq
 8004266:	600b      	streq	r3, [r1, #0]
 8004268:	6053      	strne	r3, [r2, #4]
 800426a:	4630      	mov	r0, r6
 800426c:	f000 f85a 	bl	8004324 <__malloc_unlock>
 8004270:	f104 000b 	add.w	r0, r4, #11
 8004274:	1d23      	adds	r3, r4, #4
 8004276:	f020 0007 	bic.w	r0, r0, #7
 800427a:	1ac2      	subs	r2, r0, r3
 800427c:	d0cc      	beq.n	8004218 <_malloc_r+0x20>
 800427e:	1a1b      	subs	r3, r3, r0
 8004280:	50a3      	str	r3, [r4, r2]
 8004282:	e7c9      	b.n	8004218 <_malloc_r+0x20>
 8004284:	4622      	mov	r2, r4
 8004286:	6864      	ldr	r4, [r4, #4]
 8004288:	e7cc      	b.n	8004224 <_malloc_r+0x2c>
 800428a:	1cc4      	adds	r4, r0, #3
 800428c:	f024 0403 	bic.w	r4, r4, #3
 8004290:	42a0      	cmp	r0, r4
 8004292:	d0e3      	beq.n	800425c <_malloc_r+0x64>
 8004294:	1a21      	subs	r1, r4, r0
 8004296:	4630      	mov	r0, r6
 8004298:	f000 f82e 	bl	80042f8 <_sbrk_r>
 800429c:	3001      	adds	r0, #1
 800429e:	d1dd      	bne.n	800425c <_malloc_r+0x64>
 80042a0:	e7cf      	b.n	8004242 <_malloc_r+0x4a>
 80042a2:	bf00      	nop
 80042a4:	200000f0 	.word	0x200000f0
 80042a8:	200000f4 	.word	0x200000f4

080042ac <_realloc_r>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	4607      	mov	r7, r0
 80042b0:	4614      	mov	r4, r2
 80042b2:	460e      	mov	r6, r1
 80042b4:	b921      	cbnz	r1, 80042c0 <_realloc_r+0x14>
 80042b6:	4611      	mov	r1, r2
 80042b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80042bc:	f7ff bf9c 	b.w	80041f8 <_malloc_r>
 80042c0:	b922      	cbnz	r2, 80042cc <_realloc_r+0x20>
 80042c2:	f7ff ff4d 	bl	8004160 <_free_r>
 80042c6:	4625      	mov	r5, r4
 80042c8:	4628      	mov	r0, r5
 80042ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042cc:	f000 f830 	bl	8004330 <_malloc_usable_size_r>
 80042d0:	42a0      	cmp	r0, r4
 80042d2:	d20f      	bcs.n	80042f4 <_realloc_r+0x48>
 80042d4:	4621      	mov	r1, r4
 80042d6:	4638      	mov	r0, r7
 80042d8:	f7ff ff8e 	bl	80041f8 <_malloc_r>
 80042dc:	4605      	mov	r5, r0
 80042de:	2800      	cmp	r0, #0
 80042e0:	d0f2      	beq.n	80042c8 <_realloc_r+0x1c>
 80042e2:	4631      	mov	r1, r6
 80042e4:	4622      	mov	r2, r4
 80042e6:	f7ff ff13 	bl	8004110 <memcpy>
 80042ea:	4631      	mov	r1, r6
 80042ec:	4638      	mov	r0, r7
 80042ee:	f7ff ff37 	bl	8004160 <_free_r>
 80042f2:	e7e9      	b.n	80042c8 <_realloc_r+0x1c>
 80042f4:	4635      	mov	r5, r6
 80042f6:	e7e7      	b.n	80042c8 <_realloc_r+0x1c>

080042f8 <_sbrk_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	2300      	movs	r3, #0
 80042fc:	4d05      	ldr	r5, [pc, #20]	; (8004314 <_sbrk_r+0x1c>)
 80042fe:	4604      	mov	r4, r0
 8004300:	4608      	mov	r0, r1
 8004302:	602b      	str	r3, [r5, #0]
 8004304:	f7fd fa40 	bl	8001788 <_sbrk>
 8004308:	1c43      	adds	r3, r0, #1
 800430a:	d102      	bne.n	8004312 <_sbrk_r+0x1a>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	b103      	cbz	r3, 8004312 <_sbrk_r+0x1a>
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	bd38      	pop	{r3, r4, r5, pc}
 8004314:	200004d0 	.word	0x200004d0

08004318 <__malloc_lock>:
 8004318:	4801      	ldr	r0, [pc, #4]	; (8004320 <__malloc_lock+0x8>)
 800431a:	f000 b811 	b.w	8004340 <__retarget_lock_acquire_recursive>
 800431e:	bf00      	nop
 8004320:	200004d8 	.word	0x200004d8

08004324 <__malloc_unlock>:
 8004324:	4801      	ldr	r0, [pc, #4]	; (800432c <__malloc_unlock+0x8>)
 8004326:	f000 b80c 	b.w	8004342 <__retarget_lock_release_recursive>
 800432a:	bf00      	nop
 800432c:	200004d8 	.word	0x200004d8

08004330 <_malloc_usable_size_r>:
 8004330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004334:	1f18      	subs	r0, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	bfbc      	itt	lt
 800433a:	580b      	ldrlt	r3, [r1, r0]
 800433c:	18c0      	addlt	r0, r0, r3
 800433e:	4770      	bx	lr

08004340 <__retarget_lock_acquire_recursive>:
 8004340:	4770      	bx	lr

08004342 <__retarget_lock_release_recursive>:
 8004342:	4770      	bx	lr

08004344 <_init>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	bf00      	nop
 8004348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434a:	bc08      	pop	{r3}
 800434c:	469e      	mov	lr, r3
 800434e:	4770      	bx	lr

08004350 <_fini>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	bf00      	nop
 8004354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004356:	bc08      	pop	{r3}
 8004358:	469e      	mov	lr, r3
 800435a:	4770      	bx	lr
