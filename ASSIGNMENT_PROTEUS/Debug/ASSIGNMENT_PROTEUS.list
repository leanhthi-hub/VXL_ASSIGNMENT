
ASSIGNMENT_PROTEUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003edc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003fe8  08003fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800407c  0800407c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800407c  0800407c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800407c  0800407c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800407c  0800407c  0001407c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004080  08004080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000088  0800410c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  0800410c  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2da  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002255  00000000  00000000  0002d38b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0002f5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00030318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b43  00000000  00000000  00030f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ded1  00000000  00000000  00033aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088cb5  00000000  00000000  0004197c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ca631  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d4  00000000  00000000  000ca684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fd0 	.word	0x08003fd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08003fd0 	.word	0x08003fd0

0800014c <toogleRed>:

#include "fsm.h"
#include "main.h"
//HAL_GPIO_WritePin(GPIOB, ledpa_Pin|led1b_Pin|led2b_Pin|led2a_Pin, GPIO_PIN_RESET);
//HAL_GPIO_WritePin(GPIOA, ledpb_Pin|led1a_Pin, GPIO_PIN_RESET);
void toogleRed(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,led1a_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000156:	4805      	ldr	r0, [pc, #20]	; (800016c <toogleRed+0x20>)
 8000158:	f001 fddf 	bl	8001d1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led1b_Pin, GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	2108      	movs	r1, #8
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <toogleRed+0x24>)
 8000162:	f001 fdda 	bl	8001d1a <HAL_GPIO_WritePin>
}
 8000166:	bf00      	nop
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	40010800 	.word	0x40010800
 8000170:	40010c00 	.word	0x40010c00

08000174 <toogleGreen>:
void toogleGreen(){
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,led1a_Pin, GPIO_PIN_SET);
 8000178:	2201      	movs	r2, #1
 800017a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800017e:	4805      	ldr	r0, [pc, #20]	; (8000194 <toogleGreen+0x20>)
 8000180:	f001 fdcb 	bl	8001d1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led1b_Pin, GPIO_PIN_RESET);
 8000184:	2200      	movs	r2, #0
 8000186:	2108      	movs	r1, #8
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <toogleGreen+0x24>)
 800018a:	f001 fdc6 	bl	8001d1a <HAL_GPIO_WritePin>
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40010800 	.word	0x40010800
 8000198:	40010c00 	.word	0x40010c00

0800019c <toogleYellow>:
void toogleYellow(){
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,led1a_Pin, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001a6:	4805      	ldr	r0, [pc, #20]	; (80001bc <toogleYellow+0x20>)
 80001a8:	f001 fdb7 	bl	8001d1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led1b_Pin, GPIO_PIN_RESET);
 80001ac:	2200      	movs	r2, #0
 80001ae:	2108      	movs	r1, #8
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <toogleYellow+0x24>)
 80001b2:	f001 fdb2 	bl	8001d1a <HAL_GPIO_WritePin>
}
 80001b6:	bf00      	nop
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	40010800 	.word	0x40010800
 80001c0:	40010c00 	.word	0x40010c00

080001c4 <toogleRed1>:
void toogleRed1(){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,led2a_Pin, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2120      	movs	r1, #32
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <toogleRed1+0x1c>)
 80001ce:	f001 fda4 	bl	8001d1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led2b_Pin, GPIO_PIN_SET);
 80001d2:	2201      	movs	r2, #1
 80001d4:	2110      	movs	r1, #16
 80001d6:	4802      	ldr	r0, [pc, #8]	; (80001e0 <toogleRed1+0x1c>)
 80001d8:	f001 fd9f 	bl	8001d1a <HAL_GPIO_WritePin>
}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	40010c00 	.word	0x40010c00

080001e4 <toogleGreen1>:
void toogleGreen1(){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,led2a_Pin, GPIO_PIN_SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2120      	movs	r1, #32
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <toogleGreen1+0x1c>)
 80001ee:	f001 fd94 	bl	8001d1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led2b_Pin, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2110      	movs	r1, #16
 80001f6:	4802      	ldr	r0, [pc, #8]	; (8000200 <toogleGreen1+0x1c>)
 80001f8:	f001 fd8f 	bl	8001d1a <HAL_GPIO_WritePin>
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	40010c00 	.word	0x40010c00

08000204 <toogleYellow1>:
void toogleYellow1(){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,led2a_Pin, GPIO_PIN_RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	2120      	movs	r1, #32
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <toogleYellow1+0x1c>)
 800020e:	f001 fd84 	bl	8001d1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led2b_Pin, GPIO_PIN_RESET);
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	4802      	ldr	r0, [pc, #8]	; (8000220 <toogleYellow1+0x1c>)
 8000218:	f001 fd7f 	bl	8001d1a <HAL_GPIO_WritePin>
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	40010c00 	.word	0x40010c00

08000224 <fsm_automatic_run1>:
void fsm_automatic_run1(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	switch (status1	) {
 8000228:	4b3b      	ldr	r3, [pc, #236]	; (8000318 <fsm_automatic_run1+0xf4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a3b      	ldr	r2, [pc, #236]	; (800031c <fsm_automatic_run1+0xf8>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d00b      	beq.n	800024a <fsm_automatic_run1+0x26>
 8000232:	4a3a      	ldr	r2, [pc, #232]	; (800031c <fsm_automatic_run1+0xf8>)
 8000234:	4293      	cmp	r3, r2
 8000236:	dc66      	bgt.n	8000306 <fsm_automatic_run1+0xe2>
 8000238:	2b03      	cmp	r3, #3
 800023a:	d04b      	beq.n	80002d4 <fsm_automatic_run1+0xb0>
 800023c:	2b03      	cmp	r3, #3
 800023e:	dc62      	bgt.n	8000306 <fsm_automatic_run1+0xe2>
 8000240:	2b01      	cmp	r3, #1
 8000242:	d015      	beq.n	8000270 <fsm_automatic_run1+0x4c>
 8000244:	2b02      	cmp	r3, #2
 8000246:	d02c      	beq.n	80002a2 <fsm_automatic_run1+0x7e>
				setTimer1(RED_TIME);
				timer=RED_TIME/100;
			}
			break;
		default:
			break;
 8000248:	e05d      	b.n	8000306 <fsm_automatic_run1+0xe2>
			status1 = AUTO_RED;
 800024a:	4b33      	ldr	r3, [pc, #204]	; (8000318 <fsm_automatic_run1+0xf4>)
 800024c:	2201      	movs	r2, #1
 800024e:	601a      	str	r2, [r3, #0]
			timer = RED_TIME/100;
 8000250:	4b33      	ldr	r3, [pc, #204]	; (8000320 <fsm_automatic_run1+0xfc>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a33      	ldr	r2, [pc, #204]	; (8000324 <fsm_automatic_run1+0x100>)
 8000256:	fb82 1203 	smull	r1, r2, r2, r3
 800025a:	1152      	asrs	r2, r2, #5
 800025c:	17db      	asrs	r3, r3, #31
 800025e:	1ad3      	subs	r3, r2, r3
 8000260:	4a31      	ldr	r2, [pc, #196]	; (8000328 <fsm_automatic_run1+0x104>)
 8000262:	6013      	str	r3, [r2, #0]
			setTimer1(RED_TIME);
 8000264:	4b2e      	ldr	r3, [pc, #184]	; (8000320 <fsm_automatic_run1+0xfc>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4618      	mov	r0, r3
 800026a:	f001 f8db 	bl	8001424 <setTimer1>
			break;
 800026e:	e051      	b.n	8000314 <fsm_automatic_run1+0xf0>
			toogleRed();
 8000270:	f7ff ff6c 	bl	800014c <toogleRed>
			if(timer1_flag==1){
 8000274:	4b2d      	ldr	r3, [pc, #180]	; (800032c <fsm_automatic_run1+0x108>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b01      	cmp	r3, #1
 800027a:	d146      	bne.n	800030a <fsm_automatic_run1+0xe6>
				status1 = AUTO_GREEN;
 800027c:	4b26      	ldr	r3, [pc, #152]	; (8000318 <fsm_automatic_run1+0xf4>)
 800027e:	2202      	movs	r2, #2
 8000280:	601a      	str	r2, [r3, #0]
				setTimer1(GREEN_TIME);
 8000282:	4b2b      	ldr	r3, [pc, #172]	; (8000330 <fsm_automatic_run1+0x10c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4618      	mov	r0, r3
 8000288:	f001 f8cc 	bl	8001424 <setTimer1>
				timer=GREEN_TIME/100;
 800028c:	4b28      	ldr	r3, [pc, #160]	; (8000330 <fsm_automatic_run1+0x10c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a24      	ldr	r2, [pc, #144]	; (8000324 <fsm_automatic_run1+0x100>)
 8000292:	fb82 1203 	smull	r1, r2, r2, r3
 8000296:	1152      	asrs	r2, r2, #5
 8000298:	17db      	asrs	r3, r3, #31
 800029a:	1ad3      	subs	r3, r2, r3
 800029c:	4a22      	ldr	r2, [pc, #136]	; (8000328 <fsm_automatic_run1+0x104>)
 800029e:	6013      	str	r3, [r2, #0]
			break;
 80002a0:	e033      	b.n	800030a <fsm_automatic_run1+0xe6>
			toogleGreen();
 80002a2:	f7ff ff67 	bl	8000174 <toogleGreen>
			if(timer1_flag==1){
 80002a6:	4b21      	ldr	r3, [pc, #132]	; (800032c <fsm_automatic_run1+0x108>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d12f      	bne.n	800030e <fsm_automatic_run1+0xea>
				status1 = AUTO_YELLOW;
 80002ae:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <fsm_automatic_run1+0xf4>)
 80002b0:	2203      	movs	r2, #3
 80002b2:	601a      	str	r2, [r3, #0]
				setTimer1(YELLOW_TIME);
 80002b4:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <fsm_automatic_run1+0x110>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 f8b3 	bl	8001424 <setTimer1>
				timer=YELLOW_TIME/100;
 80002be:	4b1d      	ldr	r3, [pc, #116]	; (8000334 <fsm_automatic_run1+0x110>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a18      	ldr	r2, [pc, #96]	; (8000324 <fsm_automatic_run1+0x100>)
 80002c4:	fb82 1203 	smull	r1, r2, r2, r3
 80002c8:	1152      	asrs	r2, r2, #5
 80002ca:	17db      	asrs	r3, r3, #31
 80002cc:	1ad3      	subs	r3, r2, r3
 80002ce:	4a16      	ldr	r2, [pc, #88]	; (8000328 <fsm_automatic_run1+0x104>)
 80002d0:	6013      	str	r3, [r2, #0]
			break;
 80002d2:	e01c      	b.n	800030e <fsm_automatic_run1+0xea>
			toogleYellow();
 80002d4:	f7ff ff62 	bl	800019c <toogleYellow>
			if(timer1_flag==1){
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <fsm_automatic_run1+0x108>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d118      	bne.n	8000312 <fsm_automatic_run1+0xee>
				status1 = AUTO_RED;
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <fsm_automatic_run1+0xf4>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	601a      	str	r2, [r3, #0]
				setTimer1(RED_TIME);
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <fsm_automatic_run1+0xfc>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 f89a 	bl	8001424 <setTimer1>
				timer=RED_TIME/100;
 80002f0:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <fsm_automatic_run1+0xfc>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a0b      	ldr	r2, [pc, #44]	; (8000324 <fsm_automatic_run1+0x100>)
 80002f6:	fb82 1203 	smull	r1, r2, r2, r3
 80002fa:	1152      	asrs	r2, r2, #5
 80002fc:	17db      	asrs	r3, r3, #31
 80002fe:	1ad3      	subs	r3, r2, r3
 8000300:	4a09      	ldr	r2, [pc, #36]	; (8000328 <fsm_automatic_run1+0x104>)
 8000302:	6013      	str	r3, [r2, #0]
			break;
 8000304:	e005      	b.n	8000312 <fsm_automatic_run1+0xee>
			break;
 8000306:	bf00      	nop
 8000308:	e004      	b.n	8000314 <fsm_automatic_run1+0xf0>
			break;
 800030a:	bf00      	nop
 800030c:	e002      	b.n	8000314 <fsm_automatic_run1+0xf0>
			break;
 800030e:	bf00      	nop
 8000310:	e000      	b.n	8000314 <fsm_automatic_run1+0xf0>
			break;
 8000312:	bf00      	nop
	}
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000000 	.word	0x20000000
 800031c:	01605b22 	.word	0x01605b22
 8000320:	2000000c 	.word	0x2000000c
 8000324:	51eb851f 	.word	0x51eb851f
 8000328:	200000bc 	.word	0x200000bc
 800032c:	200000d4 	.word	0x200000d4
 8000330:	20000010 	.word	0x20000010
 8000334:	20000014 	.word	0x20000014

08000338 <fsm_automatic_run2>:


void fsm_automatic_run2(){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	switch (status2	) {
 800033c:	4b3b      	ldr	r3, [pc, #236]	; (800042c <fsm_automatic_run2+0xf4>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a3b      	ldr	r2, [pc, #236]	; (8000430 <fsm_automatic_run2+0xf8>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d00b      	beq.n	800035e <fsm_automatic_run2+0x26>
 8000346:	4a3a      	ldr	r2, [pc, #232]	; (8000430 <fsm_automatic_run2+0xf8>)
 8000348:	4293      	cmp	r3, r2
 800034a:	dc66      	bgt.n	800041a <fsm_automatic_run2+0xe2>
 800034c:	2b03      	cmp	r3, #3
 800034e:	d04b      	beq.n	80003e8 <fsm_automatic_run2+0xb0>
 8000350:	2b03      	cmp	r3, #3
 8000352:	dc62      	bgt.n	800041a <fsm_automatic_run2+0xe2>
 8000354:	2b01      	cmp	r3, #1
 8000356:	d015      	beq.n	8000384 <fsm_automatic_run2+0x4c>
 8000358:	2b02      	cmp	r3, #2
 800035a:	d02c      	beq.n	80003b6 <fsm_automatic_run2+0x7e>



			break;
		default:
			break;
 800035c:	e05d      	b.n	800041a <fsm_automatic_run2+0xe2>
			status2 = AUTO_GREEN;
 800035e:	4b33      	ldr	r3, [pc, #204]	; (800042c <fsm_automatic_run2+0xf4>)
 8000360:	2202      	movs	r2, #2
 8000362:	601a      	str	r2, [r3, #0]
			timer2=GREEN_TIME/100;
 8000364:	4b33      	ldr	r3, [pc, #204]	; (8000434 <fsm_automatic_run2+0xfc>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a33      	ldr	r2, [pc, #204]	; (8000438 <fsm_automatic_run2+0x100>)
 800036a:	fb82 1203 	smull	r1, r2, r2, r3
 800036e:	1152      	asrs	r2, r2, #5
 8000370:	17db      	asrs	r3, r3, #31
 8000372:	1ad3      	subs	r3, r2, r3
 8000374:	4a31      	ldr	r2, [pc, #196]	; (800043c <fsm_automatic_run2+0x104>)
 8000376:	6013      	str	r3, [r2, #0]
			setTimer2(GREEN_TIME);
 8000378:	4b2e      	ldr	r3, [pc, #184]	; (8000434 <fsm_automatic_run2+0xfc>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f001 f865 	bl	800144c <setTimer2>
			break;
 8000382:	e051      	b.n	8000428 <fsm_automatic_run2+0xf0>
			toogleRed1();
 8000384:	f7ff ff1e 	bl	80001c4 <toogleRed1>
			if(timer2_flag==1){
 8000388:	4b2d      	ldr	r3, [pc, #180]	; (8000440 <fsm_automatic_run2+0x108>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d146      	bne.n	800041e <fsm_automatic_run2+0xe6>
				status2 = AUTO_GREEN;
 8000390:	4b26      	ldr	r3, [pc, #152]	; (800042c <fsm_automatic_run2+0xf4>)
 8000392:	2202      	movs	r2, #2
 8000394:	601a      	str	r2, [r3, #0]
				setTimer2(GREEN_TIME);
 8000396:	4b27      	ldr	r3, [pc, #156]	; (8000434 <fsm_automatic_run2+0xfc>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4618      	mov	r0, r3
 800039c:	f001 f856 	bl	800144c <setTimer2>
				timer2=GREEN_TIME/100;
 80003a0:	4b24      	ldr	r3, [pc, #144]	; (8000434 <fsm_automatic_run2+0xfc>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a24      	ldr	r2, [pc, #144]	; (8000438 <fsm_automatic_run2+0x100>)
 80003a6:	fb82 1203 	smull	r1, r2, r2, r3
 80003aa:	1152      	asrs	r2, r2, #5
 80003ac:	17db      	asrs	r3, r3, #31
 80003ae:	1ad3      	subs	r3, r2, r3
 80003b0:	4a22      	ldr	r2, [pc, #136]	; (800043c <fsm_automatic_run2+0x104>)
 80003b2:	6013      	str	r3, [r2, #0]
			break;
 80003b4:	e033      	b.n	800041e <fsm_automatic_run2+0xe6>
			toogleGreen1();
 80003b6:	f7ff ff15 	bl	80001e4 <toogleGreen1>
			if(timer2_flag==1){
 80003ba:	4b21      	ldr	r3, [pc, #132]	; (8000440 <fsm_automatic_run2+0x108>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d12f      	bne.n	8000422 <fsm_automatic_run2+0xea>
				status2 = AUTO_YELLOW;
 80003c2:	4b1a      	ldr	r3, [pc, #104]	; (800042c <fsm_automatic_run2+0xf4>)
 80003c4:	2203      	movs	r2, #3
 80003c6:	601a      	str	r2, [r3, #0]
				setTimer2(YELLOW_TIME);
 80003c8:	4b1e      	ldr	r3, [pc, #120]	; (8000444 <fsm_automatic_run2+0x10c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f001 f83d 	bl	800144c <setTimer2>
				timer2=YELLOW_TIME/100;
 80003d2:	4b1c      	ldr	r3, [pc, #112]	; (8000444 <fsm_automatic_run2+0x10c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a18      	ldr	r2, [pc, #96]	; (8000438 <fsm_automatic_run2+0x100>)
 80003d8:	fb82 1203 	smull	r1, r2, r2, r3
 80003dc:	1152      	asrs	r2, r2, #5
 80003de:	17db      	asrs	r3, r3, #31
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	4a16      	ldr	r2, [pc, #88]	; (800043c <fsm_automatic_run2+0x104>)
 80003e4:	6013      	str	r3, [r2, #0]
			break;
 80003e6:	e01c      	b.n	8000422 <fsm_automatic_run2+0xea>
			toogleYellow1();
 80003e8:	f7ff ff0c 	bl	8000204 <toogleYellow1>
			if(timer2_flag==1){
 80003ec:	4b14      	ldr	r3, [pc, #80]	; (8000440 <fsm_automatic_run2+0x108>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d118      	bne.n	8000426 <fsm_automatic_run2+0xee>
				status2 = AUTO_RED;
 80003f4:	4b0d      	ldr	r3, [pc, #52]	; (800042c <fsm_automatic_run2+0xf4>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	601a      	str	r2, [r3, #0]
				setTimer2(RED_TIME);
 80003fa:	4b13      	ldr	r3, [pc, #76]	; (8000448 <fsm_automatic_run2+0x110>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4618      	mov	r0, r3
 8000400:	f001 f824 	bl	800144c <setTimer2>
				timer2=RED_TIME/100;
 8000404:	4b10      	ldr	r3, [pc, #64]	; (8000448 <fsm_automatic_run2+0x110>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a0b      	ldr	r2, [pc, #44]	; (8000438 <fsm_automatic_run2+0x100>)
 800040a:	fb82 1203 	smull	r1, r2, r2, r3
 800040e:	1152      	asrs	r2, r2, #5
 8000410:	17db      	asrs	r3, r3, #31
 8000412:	1ad3      	subs	r3, r2, r3
 8000414:	4a09      	ldr	r2, [pc, #36]	; (800043c <fsm_automatic_run2+0x104>)
 8000416:	6013      	str	r3, [r2, #0]
			break;
 8000418:	e005      	b.n	8000426 <fsm_automatic_run2+0xee>
			break;
 800041a:	bf00      	nop
 800041c:	e004      	b.n	8000428 <fsm_automatic_run2+0xf0>
			break;
 800041e:	bf00      	nop
 8000420:	e002      	b.n	8000428 <fsm_automatic_run2+0xf0>
			break;
 8000422:	bf00      	nop
 8000424:	e000      	b.n	8000428 <fsm_automatic_run2+0xf0>
			break;
 8000426:	bf00      	nop
	}
}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000004 	.word	0x20000004
 8000430:	01605b22 	.word	0x01605b22
 8000434:	20000010 	.word	0x20000010
 8000438:	51eb851f 	.word	0x51eb851f
 800043c:	200000c0 	.word	0x200000c0
 8000440:	200000dc 	.word	0x200000dc
 8000444:	20000014 	.word	0x20000014
 8000448:	2000000c 	.word	0x2000000c

0800044c <fsm_automatic_run3>:

void fsm_automatic_run3(){
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	switch (status3	) {
 8000450:	4b94      	ldr	r3, [pc, #592]	; (80006a4 <fsm_automatic_run3+0x258>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a94      	ldr	r2, [pc, #592]	; (80006a8 <fsm_automatic_run3+0x25c>)
 8000456:	4293      	cmp	r3, r2
 8000458:	f000 8094 	beq.w	8000584 <fsm_automatic_run3+0x138>
 800045c:	4a92      	ldr	r2, [pc, #584]	; (80006a8 <fsm_automatic_run3+0x25c>)
 800045e:	4293      	cmp	r3, r2
 8000460:	f300 8205 	bgt.w	800086e <fsm_automatic_run3+0x422>
 8000464:	2b17      	cmp	r3, #23
 8000466:	dc23      	bgt.n	80004b0 <fsm_automatic_run3+0x64>
 8000468:	2b0b      	cmp	r3, #11
 800046a:	f2c0 8200 	blt.w	800086e <fsm_automatic_run3+0x422>
 800046e:	3b0b      	subs	r3, #11
 8000470:	2b0c      	cmp	r3, #12
 8000472:	f200 81fc 	bhi.w	800086e <fsm_automatic_run3+0x422>
 8000476:	a201      	add	r2, pc, #4	; (adr r2, 800047c <fsm_automatic_run3+0x30>)
 8000478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047c:	08000599 	.word	0x08000599
 8000480:	0800061f 	.word	0x0800061f
 8000484:	080006d5 	.word	0x080006d5
 8000488:	0800086f 	.word	0x0800086f
 800048c:	0800086f 	.word	0x0800086f
 8000490:	0800086f 	.word	0x0800086f
 8000494:	0800086f 	.word	0x0800086f
 8000498:	0800086f 	.word	0x0800086f
 800049c:	0800086f 	.word	0x0800086f
 80004a0:	0800086f 	.word	0x0800086f
 80004a4:	08000755 	.word	0x08000755
 80004a8:	080007b3 	.word	0x080007b3
 80004ac:	08000811 	.word	0x08000811
 80004b0:	2b64      	cmp	r3, #100	; 0x64
 80004b2:	f040 81dc 	bne.w	800086e <fsm_automatic_run3+0x422>
		case RUNNING:
			if( timer0_flag == 1) {
 80004b6:	4b7d      	ldr	r3, [pc, #500]	; (80006ac <fsm_automatic_run3+0x260>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d10c      	bne.n	80004d8 <fsm_automatic_run3+0x8c>
				timer--;
 80004be:	4b7c      	ldr	r3, [pc, #496]	; (80006b0 <fsm_automatic_run3+0x264>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	3b01      	subs	r3, #1
 80004c4:	4a7a      	ldr	r2, [pc, #488]	; (80006b0 <fsm_automatic_run3+0x264>)
 80004c6:	6013      	str	r3, [r2, #0]
				timer2--;
 80004c8:	4b7a      	ldr	r3, [pc, #488]	; (80006b4 <fsm_automatic_run3+0x268>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	4a79      	ldr	r2, [pc, #484]	; (80006b4 <fsm_automatic_run3+0x268>)
 80004d0:	6013      	str	r3, [r2, #0]
				setTimer0 (100) ;
 80004d2:	2064      	movs	r0, #100	; 0x64
 80004d4:	f000 ff92 	bl	80013fc <setTimer0>
//					Print_HELLO();
				}
			if(button_flag[0]==1){
 80004d8:	4b77      	ldr	r3, [pc, #476]	; (80006b8 <fsm_automatic_run3+0x26c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d115      	bne.n	800050c <fsm_automatic_run3+0xc0>
				button_flag[0]=0;
 80004e0:	4b75      	ldr	r3, [pc, #468]	; (80006b8 <fsm_automatic_run3+0x26c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
				status1=Waiting;
 80004e6:	4b75      	ldr	r3, [pc, #468]	; (80006bc <fsm_automatic_run3+0x270>)
 80004e8:	2263      	movs	r2, #99	; 0x63
 80004ea:	601a      	str	r2, [r3, #0]
				status2=Waiting;
 80004ec:	4b74      	ldr	r3, [pc, #464]	; (80006c0 <fsm_automatic_run3+0x274>)
 80004ee:	2263      	movs	r2, #99	; 0x63
 80004f0:	601a      	str	r2, [r3, #0]
				status3=MAN_RED;
 80004f2:	4b6c      	ldr	r3, [pc, #432]	; (80006a4 <fsm_automatic_run3+0x258>)
 80004f4:	220b      	movs	r2, #11
 80004f6:	601a      	str	r2, [r3, #0]
				timer2=RED_TIME/100;
 80004f8:	4b72      	ldr	r3, [pc, #456]	; (80006c4 <fsm_automatic_run3+0x278>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a72      	ldr	r2, [pc, #456]	; (80006c8 <fsm_automatic_run3+0x27c>)
 80004fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000502:	1152      	asrs	r2, r2, #5
 8000504:	17db      	asrs	r3, r3, #31
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	4a6a      	ldr	r2, [pc, #424]	; (80006b4 <fsm_automatic_run3+0x268>)
 800050a:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[1]==1)
 800050c:	4b6a      	ldr	r3, [pc, #424]	; (80006b8 <fsm_automatic_run3+0x26c>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d12c      	bne.n	800056e <fsm_automatic_run3+0x122>
			{
				button_flag[1] = 0;
 8000514:	4b68      	ldr	r3, [pc, #416]	; (80006b8 <fsm_automatic_run3+0x26c>)
 8000516:	2200      	movs	r2, #0
 8000518:	605a      	str	r2, [r3, #4]
				Print_HELLO();
 800051a:	f000 fa87 	bl	8000a2c <Print_HELLO>
				switch (status1) {
 800051e:	4b67      	ldr	r3, [pc, #412]	; (80006bc <fsm_automatic_run3+0x270>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b03      	cmp	r3, #3
 8000524:	d00a      	beq.n	800053c <fsm_automatic_run3+0xf0>
 8000526:	2b03      	cmp	r3, #3
 8000528:	dc10      	bgt.n	800054c <fsm_automatic_run3+0x100>
 800052a:	2b01      	cmp	r3, #1
 800052c:	d002      	beq.n	8000534 <fsm_automatic_run3+0xe8>
 800052e:	2b02      	cmp	r3, #2
 8000530:	d008      	beq.n	8000544 <fsm_automatic_run3+0xf8>
						break;
					case AUTO_GREEN:
						status3 = HAND_YELLOW;
						break;
					default:
						break;
 8000532:	e00b      	b.n	800054c <fsm_automatic_run3+0x100>
						status3 = HAND_GREEN;
 8000534:	4b5b      	ldr	r3, [pc, #364]	; (80006a4 <fsm_automatic_run3+0x258>)
 8000536:	2216      	movs	r2, #22
 8000538:	601a      	str	r2, [r3, #0]
						break;
 800053a:	e008      	b.n	800054e <fsm_automatic_run3+0x102>
						status3 = HAND_RED;
 800053c:	4b59      	ldr	r3, [pc, #356]	; (80006a4 <fsm_automatic_run3+0x258>)
 800053e:	2215      	movs	r2, #21
 8000540:	601a      	str	r2, [r3, #0]
						break;
 8000542:	e004      	b.n	800054e <fsm_automatic_run3+0x102>
						status3 = HAND_YELLOW;
 8000544:	4b57      	ldr	r3, [pc, #348]	; (80006a4 <fsm_automatic_run3+0x258>)
 8000546:	2217      	movs	r2, #23
 8000548:	601a      	str	r2, [r3, #0]
						break;
 800054a:	e000      	b.n	800054e <fsm_automatic_run3+0x102>
						break;
 800054c:	bf00      	nop
				}
				setTimer0 (100);
 800054e:	2064      	movs	r0, #100	; 0x64
 8000550:	f000 ff54 	bl	80013fc <setTimer0>
				setTimer1(1000);
 8000554:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000558:	f000 ff64 	bl	8001424 <setTimer1>
				timer=10;
 800055c:	4b54      	ldr	r3, [pc, #336]	; (80006b0 <fsm_automatic_run3+0x264>)
 800055e:	220a      	movs	r2, #10
 8000560:	601a      	str	r2, [r3, #0]
				status1 = Waiting;
 8000562:	4b56      	ldr	r3, [pc, #344]	; (80006bc <fsm_automatic_run3+0x270>)
 8000564:	2263      	movs	r2, #99	; 0x63
 8000566:	601a      	str	r2, [r3, #0]
				status2 = Waiting;
 8000568:	4b55      	ldr	r3, [pc, #340]	; (80006c0 <fsm_automatic_run3+0x274>)
 800056a:	2263      	movs	r2, #99	; 0x63
 800056c:	601a      	str	r2, [r3, #0]

			}
			if(button_flag[3]==1){
 800056e:	4b52      	ldr	r3, [pc, #328]	; (80006b8 <fsm_automatic_run3+0x26c>)
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	2b01      	cmp	r3, #1
 8000574:	f040 817d 	bne.w	8000872 <fsm_automatic_run3+0x426>
				button_flag[3]=0;
 8000578:	4b4f      	ldr	r3, [pc, #316]	; (80006b8 <fsm_automatic_run3+0x26c>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]

				Print_HELLO();
 800057e:	f000 fa55 	bl	8000a2c <Print_HELLO>
			}
			break;
 8000582:	e176      	b.n	8000872 <fsm_automatic_run3+0x426>

		case INIT:
			status1=INIT;
 8000584:	4b4d      	ldr	r3, [pc, #308]	; (80006bc <fsm_automatic_run3+0x270>)
 8000586:	4a48      	ldr	r2, [pc, #288]	; (80006a8 <fsm_automatic_run3+0x25c>)
 8000588:	601a      	str	r2, [r3, #0]
			status2=INIT;
 800058a:	4b4d      	ldr	r3, [pc, #308]	; (80006c0 <fsm_automatic_run3+0x274>)
 800058c:	4a46      	ldr	r2, [pc, #280]	; (80006a8 <fsm_automatic_run3+0x25c>)
 800058e:	601a      	str	r2, [r3, #0]
			status3=RUNNING;
 8000590:	4b44      	ldr	r3, [pc, #272]	; (80006a4 <fsm_automatic_run3+0x258>)
 8000592:	2264      	movs	r2, #100	; 0x64
 8000594:	601a      	str	r2, [r3, #0]



			break;
 8000596:	e173      	b.n	8000880 <fsm_automatic_run3+0x434>
		case MAN_RED:
//			Print_Time(timer);
//			Print_Time(timer2);
			toogleRed();
 8000598:	f7ff fdd8 	bl	800014c <toogleRed>
			toogleRed1();
 800059c:	f7ff fe12 	bl	80001c4 <toogleRed1>

			if(timer2>99)timer2=0;
 80005a0:	4b44      	ldr	r3, [pc, #272]	; (80006b4 <fsm_automatic_run3+0x268>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b63      	cmp	r3, #99	; 0x63
 80005a6:	dd02      	ble.n	80005ae <fsm_automatic_run3+0x162>
 80005a8:	4b42      	ldr	r3, [pc, #264]	; (80006b4 <fsm_automatic_run3+0x268>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
			RED_TIME=timer2*100;
 80005ae:	4b41      	ldr	r3, [pc, #260]	; (80006b4 <fsm_automatic_run3+0x268>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2264      	movs	r2, #100	; 0x64
 80005b4:	fb02 f303 	mul.w	r3, r2, r3
 80005b8:	4a42      	ldr	r2, [pc, #264]	; (80006c4 <fsm_automatic_run3+0x278>)
 80005ba:	6013      	str	r3, [r2, #0]
			timer=01;
 80005bc:	4b3c      	ldr	r3, [pc, #240]	; (80006b0 <fsm_automatic_run3+0x264>)
 80005be:	2201      	movs	r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
			if(button_flag[0]==1){
 80005c2:	4b3d      	ldr	r3, [pc, #244]	; (80006b8 <fsm_automatic_run3+0x26c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d10f      	bne.n	80005ea <fsm_automatic_run3+0x19e>
				button_flag[0]=0;
 80005ca:	4b3b      	ldr	r3, [pc, #236]	; (80006b8 <fsm_automatic_run3+0x26c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
				timer2=GREEN_TIME/100;
 80005d0:	4b3e      	ldr	r3, [pc, #248]	; (80006cc <fsm_automatic_run3+0x280>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a3c      	ldr	r2, [pc, #240]	; (80006c8 <fsm_automatic_run3+0x27c>)
 80005d6:	fb82 1203 	smull	r1, r2, r2, r3
 80005da:	1152      	asrs	r2, r2, #5
 80005dc:	17db      	asrs	r3, r3, #31
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	4a34      	ldr	r2, [pc, #208]	; (80006b4 <fsm_automatic_run3+0x268>)
 80005e2:	6013      	str	r3, [r2, #0]
				status3=MAN_GREEN;
 80005e4:	4b2f      	ldr	r3, [pc, #188]	; (80006a4 <fsm_automatic_run3+0x258>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	601a      	str	r2, [r3, #0]
			}
			if(button_flag[1]==1){
 80005ea:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <fsm_automatic_run3+0x26c>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d107      	bne.n	8000602 <fsm_automatic_run3+0x1b6>
//				Print_HELLO();
				button_flag[1]=0;
 80005f2:	4b31      	ldr	r3, [pc, #196]	; (80006b8 <fsm_automatic_run3+0x26c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
				timer2++;
 80005f8:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <fsm_automatic_run3+0x268>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a2d      	ldr	r2, [pc, #180]	; (80006b4 <fsm_automatic_run3+0x268>)
 8000600:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000602:	4b2d      	ldr	r3, [pc, #180]	; (80006b8 <fsm_automatic_run3+0x26c>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	2b01      	cmp	r3, #1
 8000608:	f040 8135 	bne.w	8000876 <fsm_automatic_run3+0x42a>
				button_flag[2]=0;
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <fsm_automatic_run3+0x26c>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
				timer2--;
 8000612:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <fsm_automatic_run3+0x268>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3b01      	subs	r3, #1
 8000618:	4a26      	ldr	r2, [pc, #152]	; (80006b4 <fsm_automatic_run3+0x268>)
 800061a:	6013      	str	r3, [r2, #0]
//			if(button_flag[3]==1){
//				button_flag[3]=0;
//				RED_TIME=timer2*100;
//			}

			break;
 800061c:	e12b      	b.n	8000876 <fsm_automatic_run3+0x42a>
		case MAN_GREEN:
//			Print_Time(timer);
//			Print_Time(timer2);
			toogleGreen();
 800061e:	f7ff fda9 	bl	8000174 <toogleGreen>
			toogleGreen1();
 8000622:	f7ff fddf 	bl	80001e4 <toogleGreen1>
			if(timer2>99)timer2=0;
 8000626:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <fsm_automatic_run3+0x268>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b63      	cmp	r3, #99	; 0x63
 800062c:	dd02      	ble.n	8000634 <fsm_automatic_run3+0x1e8>
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <fsm_automatic_run3+0x268>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]

			timer=02;
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <fsm_automatic_run3+0x264>)
 8000636:	2202      	movs	r2, #2
 8000638:	601a      	str	r2, [r3, #0]
			GREEN_TIME=timer2*100;
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <fsm_automatic_run3+0x268>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2264      	movs	r2, #100	; 0x64
 8000640:	fb02 f303 	mul.w	r3, r2, r3
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <fsm_automatic_run3+0x280>)
 8000646:	6013      	str	r3, [r2, #0]
			if(button_flag[0]==1){
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <fsm_automatic_run3+0x26c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d10f      	bne.n	8000670 <fsm_automatic_run3+0x224>
				button_flag[0]=0;
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <fsm_automatic_run3+0x26c>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
				timer2=YELLOW_TIME/100;
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <fsm_automatic_run3+0x284>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a1b      	ldr	r2, [pc, #108]	; (80006c8 <fsm_automatic_run3+0x27c>)
 800065c:	fb82 1203 	smull	r1, r2, r2, r3
 8000660:	1152      	asrs	r2, r2, #5
 8000662:	17db      	asrs	r3, r3, #31
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <fsm_automatic_run3+0x268>)
 8000668:	6013      	str	r3, [r2, #0]
				status3=MAN_YELLOW;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <fsm_automatic_run3+0x258>)
 800066c:	220d      	movs	r2, #13
 800066e:	601a      	str	r2, [r3, #0]
			}
			if(button_flag[1]==1){
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <fsm_automatic_run3+0x26c>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d107      	bne.n	8000688 <fsm_automatic_run3+0x23c>
				button_flag[1]=0;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <fsm_automatic_run3+0x26c>)
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
				timer2++;
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <fsm_automatic_run3+0x268>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <fsm_automatic_run3+0x268>)
 8000686:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <fsm_automatic_run3+0x26c>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	2b01      	cmp	r3, #1
 800068e:	f040 80f4 	bne.w	800087a <fsm_automatic_run3+0x42e>
				button_flag[2]=0;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <fsm_automatic_run3+0x26c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
				timer2--;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <fsm_automatic_run3+0x268>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3b01      	subs	r3, #1
 800069e:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <fsm_automatic_run3+0x268>)
 80006a0:	6013      	str	r3, [r2, #0]
//				YELLOW_TIME=timer2*100;
//			}



			break;
 80006a2:	e0ea      	b.n	800087a <fsm_automatic_run3+0x42e>
 80006a4:	20000008 	.word	0x20000008
 80006a8:	01605b22 	.word	0x01605b22
 80006ac:	200000cc 	.word	0x200000cc
 80006b0:	200000bc 	.word	0x200000bc
 80006b4:	200000c0 	.word	0x200000c0
 80006b8:	200000f4 	.word	0x200000f4
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000004 	.word	0x20000004
 80006c4:	2000000c 	.word	0x2000000c
 80006c8:	51eb851f 	.word	0x51eb851f
 80006cc:	20000010 	.word	0x20000010
 80006d0:	20000014 	.word	0x20000014
		case MAN_YELLOW:
//			Print_Time(timer);
//			Print_Time(timer2);
			toogleYellow();
 80006d4:	f7ff fd62 	bl	800019c <toogleYellow>
			toogleYellow1();
 80006d8:	f7ff fd94 	bl	8000204 <toogleYellow1>
			if(timer2>99)timer2=0;
 80006dc:	4b69      	ldr	r3, [pc, #420]	; (8000884 <fsm_automatic_run3+0x438>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b63      	cmp	r3, #99	; 0x63
 80006e2:	dd02      	ble.n	80006ea <fsm_automatic_run3+0x29e>
 80006e4:	4b67      	ldr	r3, [pc, #412]	; (8000884 <fsm_automatic_run3+0x438>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
			if(timer2<3)timer2=3;
 80006ea:	4b66      	ldr	r3, [pc, #408]	; (8000884 <fsm_automatic_run3+0x438>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	dc02      	bgt.n	80006f8 <fsm_automatic_run3+0x2ac>
 80006f2:	4b64      	ldr	r3, [pc, #400]	; (8000884 <fsm_automatic_run3+0x438>)
 80006f4:	2203      	movs	r2, #3
 80006f6:	601a      	str	r2, [r3, #0]
			YELLOW_TIME=timer2*100;
 80006f8:	4b62      	ldr	r3, [pc, #392]	; (8000884 <fsm_automatic_run3+0x438>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2264      	movs	r2, #100	; 0x64
 80006fe:	fb02 f303 	mul.w	r3, r2, r3
 8000702:	4a61      	ldr	r2, [pc, #388]	; (8000888 <fsm_automatic_run3+0x43c>)
 8000704:	6013      	str	r3, [r2, #0]

			timer=03;
 8000706:	4b61      	ldr	r3, [pc, #388]	; (800088c <fsm_automatic_run3+0x440>)
 8000708:	2203      	movs	r2, #3
 800070a:	601a      	str	r2, [r3, #0]
			if(button_flag[0]==1){
 800070c:	4b60      	ldr	r3, [pc, #384]	; (8000890 <fsm_automatic_run3+0x444>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d105      	bne.n	8000720 <fsm_automatic_run3+0x2d4>
				button_flag[0]=0;
 8000714:	4b5e      	ldr	r3, [pc, #376]	; (8000890 <fsm_automatic_run3+0x444>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]

				status3=INIT;
 800071a:	4b5e      	ldr	r3, [pc, #376]	; (8000894 <fsm_automatic_run3+0x448>)
 800071c:	4a5e      	ldr	r2, [pc, #376]	; (8000898 <fsm_automatic_run3+0x44c>)
 800071e:	601a      	str	r2, [r3, #0]
			}
			if(button_flag[1]==1){
 8000720:	4b5b      	ldr	r3, [pc, #364]	; (8000890 <fsm_automatic_run3+0x444>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d107      	bne.n	8000738 <fsm_automatic_run3+0x2ec>
				button_flag[1]=0;
 8000728:	4b59      	ldr	r3, [pc, #356]	; (8000890 <fsm_automatic_run3+0x444>)
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
				timer2++;
 800072e:	4b55      	ldr	r3, [pc, #340]	; (8000884 <fsm_automatic_run3+0x438>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3301      	adds	r3, #1
 8000734:	4a53      	ldr	r2, [pc, #332]	; (8000884 <fsm_automatic_run3+0x438>)
 8000736:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000738:	4b55      	ldr	r3, [pc, #340]	; (8000890 <fsm_automatic_run3+0x444>)
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	2b01      	cmp	r3, #1
 800073e:	f040 809e 	bne.w	800087e <fsm_automatic_run3+0x432>
				button_flag[2]=0;
 8000742:	4b53      	ldr	r3, [pc, #332]	; (8000890 <fsm_automatic_run3+0x444>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
				timer2--;
 8000748:	4b4e      	ldr	r3, [pc, #312]	; (8000884 <fsm_automatic_run3+0x438>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3b01      	subs	r3, #1
 800074e:	4a4d      	ldr	r2, [pc, #308]	; (8000884 <fsm_automatic_run3+0x438>)
 8000750:	6013      	str	r3, [r2, #0]
//				button_flag[3]=0;
//				YELLOW_TIME=timer2*100;
//			}


			break;
 8000752:	e094      	b.n	800087e <fsm_automatic_run3+0x432>
		case HAND_RED:
			if(timer0_flag == 1) {
 8000754:	4b51      	ldr	r3, [pc, #324]	; (800089c <fsm_automatic_run3+0x450>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d10c      	bne.n	8000776 <fsm_automatic_run3+0x32a>
				timer--;
 800075c:	4b4b      	ldr	r3, [pc, #300]	; (800088c <fsm_automatic_run3+0x440>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3b01      	subs	r3, #1
 8000762:	4a4a      	ldr	r2, [pc, #296]	; (800088c <fsm_automatic_run3+0x440>)
 8000764:	6013      	str	r3, [r2, #0]
//				timer2--;
				Print_TimeOut(timer);
 8000766:	4b49      	ldr	r3, [pc, #292]	; (800088c <fsm_automatic_run3+0x440>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f976 	bl	8000a5c <Print_TimeOut>
				setTimer0 (100) ;
 8000770:	2064      	movs	r0, #100	; 0x64
 8000772:	f000 fe43 	bl	80013fc <setTimer0>
			//					Print_HELLO();
			}
			if(timer1_flag == 1){
 8000776:	4b4a      	ldr	r3, [pc, #296]	; (80008a0 <fsm_automatic_run3+0x454>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d102      	bne.n	8000784 <fsm_automatic_run3+0x338>
				status3=INIT;
 800077e:	4b45      	ldr	r3, [pc, #276]	; (8000894 <fsm_automatic_run3+0x448>)
 8000780:	4a45      	ldr	r2, [pc, #276]	; (8000898 <fsm_automatic_run3+0x44c>)
 8000782:	601a      	str	r2, [r3, #0]
			}
			if(button_flag[1]==1){
 8000784:	4b42      	ldr	r3, [pc, #264]	; (8000890 <fsm_automatic_run3+0x444>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d10f      	bne.n	80007ac <fsm_automatic_run3+0x360>
				button_flag[1]=0;
 800078c:	4b40      	ldr	r3, [pc, #256]	; (8000890 <fsm_automatic_run3+0x444>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
				timer=10;
 8000792:	4b3e      	ldr	r3, [pc, #248]	; (800088c <fsm_automatic_run3+0x440>)
 8000794:	220a      	movs	r2, #10
 8000796:	601a      	str	r2, [r3, #0]
				status3=HAND_GREEN;
 8000798:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <fsm_automatic_run3+0x448>)
 800079a:	2216      	movs	r2, #22
 800079c:	601a      	str	r2, [r3, #0]
				setTimer0 (100);
 800079e:	2064      	movs	r0, #100	; 0x64
 80007a0:	f000 fe2c 	bl	80013fc <setTimer0>
				setTimer1(1000);
 80007a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a8:	f000 fe3c 	bl	8001424 <setTimer1>
			}

			 toogleRed();
 80007ac:	f7ff fcce 	bl	800014c <toogleRed>
			break;
 80007b0:	e066      	b.n	8000880 <fsm_automatic_run3+0x434>
		case HAND_GREEN:

			if(timer0_flag == 1) {
 80007b2:	4b3a      	ldr	r3, [pc, #232]	; (800089c <fsm_automatic_run3+0x450>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d10c      	bne.n	80007d4 <fsm_automatic_run3+0x388>
				timer--;
 80007ba:	4b34      	ldr	r3, [pc, #208]	; (800088c <fsm_automatic_run3+0x440>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3b01      	subs	r3, #1
 80007c0:	4a32      	ldr	r2, [pc, #200]	; (800088c <fsm_automatic_run3+0x440>)
 80007c2:	6013      	str	r3, [r2, #0]
//				timer2--;
				Print_TimeOut(timer);
 80007c4:	4b31      	ldr	r3, [pc, #196]	; (800088c <fsm_automatic_run3+0x440>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 f947 	bl	8000a5c <Print_TimeOut>
				setTimer0 (100) ;
 80007ce:	2064      	movs	r0, #100	; 0x64
 80007d0:	f000 fe14 	bl	80013fc <setTimer0>
			//					Print_HELLO();
				}
			if(timer1_flag == 1){
 80007d4:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <fsm_automatic_run3+0x454>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d102      	bne.n	80007e2 <fsm_automatic_run3+0x396>
				status3=INIT;
 80007dc:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <fsm_automatic_run3+0x448>)
 80007de:	4a2e      	ldr	r2, [pc, #184]	; (8000898 <fsm_automatic_run3+0x44c>)
 80007e0:	601a      	str	r2, [r3, #0]

			}
			if(button_flag[1]==1){
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <fsm_automatic_run3+0x444>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d10f      	bne.n	800080a <fsm_automatic_run3+0x3be>
				button_flag[1]=0;
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <fsm_automatic_run3+0x444>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
				status3=HAND_YELLOW;
 80007f0:	4b28      	ldr	r3, [pc, #160]	; (8000894 <fsm_automatic_run3+0x448>)
 80007f2:	2217      	movs	r2, #23
 80007f4:	601a      	str	r2, [r3, #0]
				timer=10;
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <fsm_automatic_run3+0x440>)
 80007f8:	220a      	movs	r2, #10
 80007fa:	601a      	str	r2, [r3, #0]
				setTimer0 (100);
 80007fc:	2064      	movs	r0, #100	; 0x64
 80007fe:	f000 fdfd 	bl	80013fc <setTimer0>
				setTimer1(1000);
 8000802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000806:	f000 fe0d 	bl	8001424 <setTimer1>
			}
//			toogleRed();
			toogleGreen();
 800080a:	f7ff fcb3 	bl	8000174 <toogleGreen>
			break;
 800080e:	e037      	b.n	8000880 <fsm_automatic_run3+0x434>
		case HAND_YELLOW:
			if(timer0_flag == 1) {
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <fsm_automatic_run3+0x450>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d10c      	bne.n	8000832 <fsm_automatic_run3+0x3e6>
				timer--;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <fsm_automatic_run3+0x440>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3b01      	subs	r3, #1
 800081e:	4a1b      	ldr	r2, [pc, #108]	; (800088c <fsm_automatic_run3+0x440>)
 8000820:	6013      	str	r3, [r2, #0]
//				timer2--;
				Print_TimeOut(timer);
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <fsm_automatic_run3+0x440>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f918 	bl	8000a5c <Print_TimeOut>
				setTimer0 (100) ;
 800082c:	2064      	movs	r0, #100	; 0x64
 800082e:	f000 fde5 	bl	80013fc <setTimer0>
			//					Print_HELLO();
				}
			if(timer1_flag == 1){
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <fsm_automatic_run3+0x454>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d102      	bne.n	8000840 <fsm_automatic_run3+0x3f4>
				status3=INIT;
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <fsm_automatic_run3+0x448>)
 800083c:	4a16      	ldr	r2, [pc, #88]	; (8000898 <fsm_automatic_run3+0x44c>)
 800083e:	601a      	str	r2, [r3, #0]
			}
//			 toogleRed();
			if(button_flag[1]==1){
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <fsm_automatic_run3+0x444>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d10f      	bne.n	8000868 <fsm_automatic_run3+0x41c>
				button_flag[1]=0;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <fsm_automatic_run3+0x444>)
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
				status3=HAND_RED;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <fsm_automatic_run3+0x448>)
 8000850:	2215      	movs	r2, #21
 8000852:	601a      	str	r2, [r3, #0]
				timer=10;
 8000854:	4b0d      	ldr	r3, [pc, #52]	; (800088c <fsm_automatic_run3+0x440>)
 8000856:	220a      	movs	r2, #10
 8000858:	601a      	str	r2, [r3, #0]
				setTimer0 (100);
 800085a:	2064      	movs	r0, #100	; 0x64
 800085c:	f000 fdce 	bl	80013fc <setTimer0>
				setTimer1(1000);
 8000860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000864:	f000 fdde 	bl	8001424 <setTimer1>
			}
			toogleYellow();
 8000868:	f7ff fc98 	bl	800019c <toogleYellow>
			break;
 800086c:	e008      	b.n	8000880 <fsm_automatic_run3+0x434>

		default:
			break;
 800086e:	bf00      	nop
 8000870:	e006      	b.n	8000880 <fsm_automatic_run3+0x434>
			break;
 8000872:	bf00      	nop
 8000874:	e004      	b.n	8000880 <fsm_automatic_run3+0x434>
			break;
 8000876:	bf00      	nop
 8000878:	e002      	b.n	8000880 <fsm_automatic_run3+0x434>
			break;
 800087a:	bf00      	nop
 800087c:	e000      	b.n	8000880 <fsm_automatic_run3+0x434>
			break;
 800087e:	bf00      	nop
	}
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200000c0 	.word	0x200000c0
 8000888:	20000014 	.word	0x20000014
 800088c:	200000bc 	.word	0x200000bc
 8000890:	200000f4 	.word	0x200000f4
 8000894:	20000008 	.word	0x20000008
 8000898:	01605b22 	.word	0x01605b22
 800089c:	200000cc 	.word	0x200000cc
 80008a0:	200000d4 	.word	0x200000d4

080008a4 <subkeyProcess>:

//unsigned char is_button_pressed_1s()


void subkeyProcess(unsigned char i)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	button_flag[i] = 1;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <subkeyProcess+0x20>)
 80008b2:	2101      	movs	r1, #1
 80008b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	200000f4 	.word	0x200000f4

080008c8 <button_reading>:
void button_reading()
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 80008ce:	2300      	movs	r3, #0
 80008d0:	71fb      	strb	r3, [r7, #7]
 80008d2:	e093      	b.n	80009fc <button_reading+0x134>
	{
		debounceButtonBuffer0[i] = debounceButtonBuffer1[i];
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	494d      	ldr	r1, [pc, #308]	; (8000a10 <button_reading+0x148>)
 80008da:	5c89      	ldrb	r1, [r1, r2]
 80008dc:	4a4d      	ldr	r2, [pc, #308]	; (8000a14 <button_reading+0x14c>)
 80008de:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 80008e0:	79fa      	ldrb	r2, [r7, #7]
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	494c      	ldr	r1, [pc, #304]	; (8000a18 <button_reading+0x150>)
 80008e6:	5c89      	ldrb	r1, [r1, r2]
 80008e8:	4a49      	ldr	r2, [pc, #292]	; (8000a10 <button_reading+0x148>)
 80008ea:	54d1      	strb	r1, [r2, r3]
		switch (i)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d832      	bhi.n	8000958 <button_reading+0x90>
 80008f2:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <button_reading+0x30>)
 80008f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f8:	08000909 	.word	0x08000909
 80008fc:	0800091d 	.word	0x0800091d
 8000900:	08000931 	.word	0x08000931
 8000904:	08000945 	.word	0x08000945
		{
			case 0:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_1_GPIO_Port, button_1_Pin);
 8000908:	79fc      	ldrb	r4, [r7, #7]
 800090a:	2102      	movs	r1, #2
 800090c:	4843      	ldr	r0, [pc, #268]	; (8000a1c <button_reading+0x154>)
 800090e:	f001 f9ed 	bl	8001cec <HAL_GPIO_ReadPin>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	4b40      	ldr	r3, [pc, #256]	; (8000a18 <button_reading+0x150>)
 8000918:	551a      	strb	r2, [r3, r4]
				break;
 800091a:	e022      	b.n	8000962 <button_reading+0x9a>
			case 1:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_2_GPIO_Port, button_2_Pin);
 800091c:	79fc      	ldrb	r4, [r7, #7]
 800091e:	2120      	movs	r1, #32
 8000920:	483e      	ldr	r0, [pc, #248]	; (8000a1c <button_reading+0x154>)
 8000922:	f001 f9e3 	bl	8001cec <HAL_GPIO_ReadPin>
 8000926:	4603      	mov	r3, r0
 8000928:	461a      	mov	r2, r3
 800092a:	4b3b      	ldr	r3, [pc, #236]	; (8000a18 <button_reading+0x150>)
 800092c:	551a      	strb	r2, [r3, r4]
				break;
 800092e:	e018      	b.n	8000962 <button_reading+0x9a>
			case 2:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_3_GPIO_Port, button_3_Pin);
 8000930:	79fc      	ldrb	r4, [r7, #7]
 8000932:	2101      	movs	r1, #1
 8000934:	483a      	ldr	r0, [pc, #232]	; (8000a20 <button_reading+0x158>)
 8000936:	f001 f9d9 	bl	8001cec <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	4b36      	ldr	r3, [pc, #216]	; (8000a18 <button_reading+0x150>)
 8000940:	551a      	strb	r2, [r3, r4]
				break;
 8000942:	e00e      	b.n	8000962 <button_reading+0x9a>
			case 3:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_p_GPIO_Port, button_p_Pin);
 8000944:	79fc      	ldrb	r4, [r7, #7]
 8000946:	2102      	movs	r1, #2
 8000948:	4835      	ldr	r0, [pc, #212]	; (8000a20 <button_reading+0x158>)
 800094a:	f001 f9cf 	bl	8001cec <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <button_reading+0x150>)
 8000954:	551a      	strb	r2, [r3, r4]
				break;
 8000956:	e004      	b.n	8000962 <button_reading+0x9a>
			default:
				debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4a2f      	ldr	r2, [pc, #188]	; (8000a18 <button_reading+0x150>)
 800095c:	2101      	movs	r1, #1
 800095e:	54d1      	strb	r1, [r2, r3]
				break;
 8000960:	bf00      	nop
		}
		if((debounceButtonBuffer0[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]))
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	4a2b      	ldr	r2, [pc, #172]	; (8000a14 <button_reading+0x14c>)
 8000966:	5cd2      	ldrb	r2, [r2, r3]
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	4929      	ldr	r1, [pc, #164]	; (8000a10 <button_reading+0x148>)
 800096c:	5ccb      	ldrb	r3, [r1, r3]
 800096e:	429a      	cmp	r2, r3
 8000970:	d141      	bne.n	80009f6 <button_reading+0x12e>
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	4a26      	ldr	r2, [pc, #152]	; (8000a10 <button_reading+0x148>)
 8000976:	5cd2      	ldrb	r2, [r2, r3]
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4927      	ldr	r1, [pc, #156]	; (8000a18 <button_reading+0x150>)
 800097c:	5ccb      	ldrb	r3, [r1, r3]
 800097e:	429a      	cmp	r2, r3
 8000980:	d139      	bne.n	80009f6 <button_reading+0x12e>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i])
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	4a27      	ldr	r2, [pc, #156]	; (8000a24 <button_reading+0x15c>)
 8000986:	5cd2      	ldrb	r2, [r2, r3]
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4923      	ldr	r1, [pc, #140]	; (8000a18 <button_reading+0x150>)
 800098c:	5ccb      	ldrb	r3, [r1, r3]
 800098e:	429a      	cmp	r2, r3
 8000990:	d014      	beq.n	80009bc <button_reading+0xf4>
			{
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000992:	79fa      	ldrb	r2, [r7, #7]
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	4920      	ldr	r1, [pc, #128]	; (8000a18 <button_reading+0x150>)
 8000998:	5c89      	ldrb	r1, [r1, r2]
 800099a:	4a22      	ldr	r2, [pc, #136]	; (8000a24 <button_reading+0x15c>)
 800099c:	54d1      	strb	r1, [r2, r3]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED)
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	4a20      	ldr	r2, [pc, #128]	; (8000a24 <button_reading+0x15c>)
 80009a2:	5cd3      	ldrb	r3, [r2, r3]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d126      	bne.n	80009f6 <button_reading+0x12e>
				{
					counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4a1f      	ldr	r2, [pc, #124]	; (8000a28 <button_reading+0x160>)
 80009ac:	2164      	movs	r1, #100	; 0x64
 80009ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					subkeyProcess(i);
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff75 	bl	80008a4 <subkeyProcess>
 80009ba:	e01c      	b.n	80009f6 <button_reading+0x12e>
				}
			}
			else
			{
				counterForButtonPress1s[i]--;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	4a1a      	ldr	r2, [pc, #104]	; (8000a28 <button_reading+0x160>)
 80009c0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009c4:	3a01      	subs	r2, #1
 80009c6:	b291      	uxth	r1, r2
 80009c8:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <button_reading+0x160>)
 80009ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(counterForButtonPress1s[i] == 0)
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <button_reading+0x160>)
 80009d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10d      	bne.n	80009f6 <button_reading+0x12e>
				{
					if(buttonBuffer[i]== BUTTON_IS_PRESSED)
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <button_reading+0x15c>)
 80009de:	5cd3      	ldrb	r3, [r2, r3]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d108      	bne.n	80009f6 <button_reading+0x12e>
					{
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <button_reading+0x160>)
 80009e8:	2164      	movs	r1, #100	; 0x64
 80009ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						subkeyProcess(i);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff57 	bl	80008a4 <subkeyProcess>
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	3301      	adds	r3, #1
 80009fa:	71fb      	strb	r3, [r7, #7]
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	f67f af68 	bls.w	80008d4 <button_reading+0xc>
					//buttonBuffer[i] = BUTTON_IS_RELEASED;
				}
			}
		}
	}
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd90      	pop	{r4, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000ac 	.word	0x200000ac
 8000a14:	200000a8 	.word	0x200000a8
 8000a18:	200000b0 	.word	0x200000b0
 8000a1c:	40010800 	.word	0x40010800
 8000a20:	40010c00 	.word	0x40010c00
 8000a24:	200000a4 	.word	0x200000a4
 8000a28:	200000b4 	.word	0x200000b4

08000a2c <Print_HELLO>:

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
void Print_HELLO()
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
	char str[30];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "HELLO\r"), 1000);
 8000a32:	463b      	mov	r3, r7
 8000a34:	4907      	ldr	r1, [pc, #28]	; (8000a54 <Print_HELLO+0x28>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 fe90 	bl	800375c <siprintf>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4639      	mov	r1, r7
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	4804      	ldr	r0, [pc, #16]	; (8000a58 <Print_HELLO+0x2c>)
 8000a48:	f002 f9cb 	bl	8002de2 <HAL_UART_Transmit>
}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	08003fe8 	.word	0x08003fe8
 8000a58:	20000160 	.word	0x20000160

08000a5c <Print_TimeOut>:
void Toggle_led()
{
	HAL_GPIO_TogglePin(GPIOA, Led_1_Pin);
}
void Print_TimeOut(int abc){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "timeout: %d\r", temp), 1000);
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a6e:	4908      	ldr	r1, [pc, #32]	; (8000a90 <Print_TimeOut+0x34>)
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 fe73 	bl	800375c <siprintf>
 8000a76:	4603      	mov	r3, r0
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	f107 010c 	add.w	r1, r7, #12
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	4804      	ldr	r0, [pc, #16]	; (8000a94 <Print_TimeOut+0x38>)
 8000a84:	f002 f9ad 	bl	8002de2 <HAL_UART_Transmit>
}
 8000a88:	bf00      	nop
 8000a8a:	3730      	adds	r7, #48	; 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	08003ff0 	.word	0x08003ff0
 8000a94:	20000160 	.word	0x20000160

08000a98 <Print_Time>:
void Print_Time()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
	char str[30];
	int temp;
	temp=timer;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <Print_Time+0x6c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time1: %d\r", temp), 1000);
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aa8:	4917      	ldr	r1, [pc, #92]	; (8000b08 <Print_Time+0x70>)
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fe56 	bl	800375c <siprintf>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	1d39      	adds	r1, r7, #4
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	4814      	ldr	r0, [pc, #80]	; (8000b0c <Print_Time+0x74>)
 8000abc:	f002 f991 	bl	8002de2 <HAL_UART_Transmit>
	temp = timer2;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <Print_Time+0x78>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time2: %d\r", temp), 1000);
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aca:	4912      	ldr	r1, [pc, #72]	; (8000b14 <Print_Time+0x7c>)
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 fe45 	bl	800375c <siprintf>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	1d39      	adds	r1, r7, #4
 8000ad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <Print_Time+0x74>)
 8000ade:	f002 f980 	bl	8002de2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "-----\r"), 1000);
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	490c      	ldr	r1, [pc, #48]	; (8000b18 <Print_Time+0x80>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 fe38 	bl	800375c <siprintf>
 8000aec:	4603      	mov	r3, r0
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	1d39      	adds	r1, r7, #4
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <Print_Time+0x74>)
 8000af8:	f002 f973 	bl	8002de2 <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, (void*)str, sprintf("%c%c%c%c",0x1B,0x5B,0x32,0x4A), 1000);

}
 8000afc:	bf00      	nop
 8000afe:	3728      	adds	r7, #40	; 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000bc 	.word	0x200000bc
 8000b08:	08004000 	.word	0x08004000
 8000b0c:	20000160 	.word	0x20000160
 8000b10:	200000c0 	.word	0x200000c0
 8000b14:	0800400c 	.word	0x0800400c
 8000b18:	08004018 	.word	0x08004018

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b20:	f000 fd4a 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b24:	f000 f85e 	bl	8000be4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init ();
 8000b28:	f000 f90e 	bl	8000d48 <MX_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2c:	f000 f90c 	bl	8000d48 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b30:	f000 f894 	bl	8000c5c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000b34:	f000 f8de 	bl	8000cf4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000b38:	4820      	ldr	r0, [pc, #128]	; (8000bbc <main+0xa0>)
 8000b3a:	f001 fd71 	bl	8002620 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
//  HAL_GPIO_WritePin(GPIOB, ledpa_Pin|led1b_Pin|led2b_Pin|led2a_Pin, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(GPIOA, ledpb_Pin|led1a_Pin, GPIO_PIN_RESET);\char str[30];

//  Print_HELLO();
  SCH_Init();
 8000b3e:	f000 f991 	bl	8000e64 <SCH_Init>
//  Print_HELLO();
//  SCH_Add_Task(Toggle_led, 10, 500);
//  SCH_Add_Task(Print_HELLO, 10, 1000);
  setTimer0(1);
 8000b42:	2001      	movs	r0, #1
 8000b44:	f000 fc5a 	bl	80013fc <setTimer0>
  setTimer1(2);
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f000 fc6b 	bl	8001424 <setTimer1>
  setTimer2(3);
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f000 fc7c 	bl	800144c <setTimer2>
  setTimer3(4);
 8000b54:	2004      	movs	r0, #4
 8000b56:	f000 fc8d 	bl	8001474 <setTimer3>

  SCH_Add_Task(timerRun0, 20, 10);
 8000b5a:	220a      	movs	r2, #10
 8000b5c:	2114      	movs	r1, #20
 8000b5e:	4818      	ldr	r0, [pc, #96]	; (8000bc0 <main+0xa4>)
 8000b60:	f000 f98c 	bl	8000e7c <SCH_Add_Task>
  SCH_Add_Task(timerRun1, 20, 10);
 8000b64:	220a      	movs	r2, #10
 8000b66:	2114      	movs	r1, #20
 8000b68:	4816      	ldr	r0, [pc, #88]	; (8000bc4 <main+0xa8>)
 8000b6a:	f000 f987 	bl	8000e7c <SCH_Add_Task>
  SCH_Add_Task(timerRun2, 20, 10);
 8000b6e:	220a      	movs	r2, #10
 8000b70:	2114      	movs	r1, #20
 8000b72:	4815      	ldr	r0, [pc, #84]	; (8000bc8 <main+0xac>)
 8000b74:	f000 f982 	bl	8000e7c <SCH_Add_Task>
  SCH_Add_Task(timerRun3, 20, 10);
 8000b78:	220a      	movs	r2, #10
 8000b7a:	2114      	movs	r1, #20
 8000b7c:	4813      	ldr	r0, [pc, #76]	; (8000bcc <main+0xb0>)
 8000b7e:	f000 f97d 	bl	8000e7c <SCH_Add_Task>

  SCH_Add_Task(Print_Time, 10, 990);
 8000b82:	f240 32de 	movw	r2, #990	; 0x3de
 8000b86:	210a      	movs	r1, #10
 8000b88:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <main+0xb4>)
 8000b8a:	f000 f977 	bl	8000e7c <SCH_Add_Task>

  SCH_Add_Task(button_reading, 10, 10);
 8000b8e:	220a      	movs	r2, #10
 8000b90:	210a      	movs	r1, #10
 8000b92:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <main+0xb8>)
 8000b94:	f000 f972 	bl	8000e7c <SCH_Add_Task>

  SCH_Add_Task(fsm_automatic_run1, 20, 10);
 8000b98:	220a      	movs	r2, #10
 8000b9a:	2114      	movs	r1, #20
 8000b9c:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <main+0xbc>)
 8000b9e:	f000 f96d 	bl	8000e7c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run2, 20, 10);
 8000ba2:	220a      	movs	r2, #10
 8000ba4:	2114      	movs	r1, #20
 8000ba6:	480d      	ldr	r0, [pc, #52]	; (8000bdc <main+0xc0>)
 8000ba8:	f000 f968 	bl	8000e7c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run3, 20, 10);
 8000bac:	220a      	movs	r2, #10
 8000bae:	2114      	movs	r1, #20
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <main+0xc4>)
 8000bb2:	f000 f963 	bl	8000e7c <SCH_Add_Task>
  while (1)
  {
//		 fsm_automatic_run1();
//		 fsm_automatic_run2();
//		 fsm_automatic_run3();
	  SCH_Dispatch_Tasks();
 8000bb6:	f000 fa27 	bl	8001008 <SCH_Dispatch_Tasks>
 8000bba:	e7fc      	b.n	8000bb6 <main+0x9a>
 8000bbc:	20000118 	.word	0x20000118
 8000bc0:	0800149d 	.word	0x0800149d
 8000bc4:	080014d1 	.word	0x080014d1
 8000bc8:	08001505 	.word	0x08001505
 8000bcc:	08001539 	.word	0x08001539
 8000bd0:	08000a99 	.word	0x08000a99
 8000bd4:	080008c9 	.word	0x080008c9
 8000bd8:	08000225 	.word	0x08000225
 8000bdc:	08000339 	.word	0x08000339
 8000be0:	0800044d 	.word	0x0800044d

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b090      	sub	sp, #64	; 0x40
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0318 	add.w	r3, r7, #24
 8000bee:	2228      	movs	r2, #40	; 0x28
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 fdaa 	bl	800374c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0e:	2310      	movs	r3, #16
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c16:	f107 0318 	add.w	r3, r7, #24
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 f896 	bl	8001d4c <HAL_RCC_OscConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c26:	f000 f918 	bl	8000e5a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fb02 	bl	800224c <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c4e:	f000 f904 	bl	8000e5a <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3740      	adds	r7, #64	; 0x40
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c82:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c90:	2209      	movs	r2, #9
 8000c92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ca0:	4813      	ldr	r0, [pc, #76]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000ca2:	f001 fc6d 	bl	8002580 <HAL_TIM_Base_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cac:	f000 f8d5 	bl	8000e5a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000cbe:	f001 fe03 	bl	80028c8 <HAL_TIM_ConfigClockSource>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cc8:	f000 f8c7 	bl	8000e5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000cda:	f001 ffcb 	bl	8002c74 <HAL_TIMEx_MasterConfigSynchronization>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ce4:	f000 f8b9 	bl	8000e5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000118 	.word	0x20000118

08000cf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <MX_USART2_UART_Init+0x50>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d2c:	f002 f80c 	bl	8002d48 <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d36:	f000 f890 	bl	8000e5a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000160 	.word	0x20000160
 8000d44:	40004400 	.word	0x40004400

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a33      	ldr	r2, [pc, #204]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b31      	ldr	r3, [pc, #196]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a2d      	ldr	r2, [pc, #180]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d7a:	f043 0308 	orr.w	r3, r3, #8
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0308 	and.w	r3, r3, #8
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_1_Pin|ledpb_Pin|led1a_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 8000d92:	4828      	ldr	r0, [pc, #160]	; (8000e34 <MX_GPIO_Init+0xec>)
 8000d94:	f000 ffc1 	bl	8001d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ledpa_Pin|led1b_Pin|led2b_Pin|led2a_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000d9e:	4826      	ldr	r0, [pc, #152]	; (8000e38 <MX_GPIO_Init+0xf0>)
 8000da0:	f000 ffbb 	bl	8001d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000da4:	2301      	movs	r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	4619      	mov	r1, r3
 8000db6:	481f      	ldr	r0, [pc, #124]	; (8000e34 <MX_GPIO_Init+0xec>)
 8000db8:	f000 fe1e 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : button_1_Pin button_2_Pin */
  GPIO_InitStruct.Pin = button_1_Pin|button_2_Pin;
 8000dbc:	2322      	movs	r3, #34	; 0x22
 8000dbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4819      	ldr	r0, [pc, #100]	; (8000e34 <MX_GPIO_Init+0xec>)
 8000dd0:	f000 fe12 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_1_Pin ledpb_Pin led1a_Pin */
  GPIO_InitStruct.Pin = Led_1_Pin|ledpb_Pin|led1a_Pin;
 8000dd4:	f44f 63a8 	mov.w	r3, #1344	; 0x540
 8000dd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2302      	movs	r3, #2
 8000de4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	4619      	mov	r1, r3
 8000dec:	4811      	ldr	r0, [pc, #68]	; (8000e34 <MX_GPIO_Init+0xec>)
 8000dee:	f000 fe03 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : button_3_Pin button_p_Pin */
  GPIO_InitStruct.Pin = button_3_Pin|button_p_Pin;
 8000df2:	2303      	movs	r3, #3
 8000df4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	4619      	mov	r1, r3
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <MX_GPIO_Init+0xf0>)
 8000e06:	f000 fdf7 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ledpa_Pin led1b_Pin led2b_Pin led2a_Pin */
  GPIO_InitStruct.Pin = ledpa_Pin|led1b_Pin|led2b_Pin|led2a_Pin;
 8000e0a:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	4619      	mov	r1, r3
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_GPIO_Init+0xf0>)
 8000e24:	f000 fde8 	bl	80019f8 <HAL_GPIO_Init>

}
 8000e28:	bf00      	nop
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010800 	.word	0x40010800
 8000e38:	40010c00 	.word	0x40010c00

08000e3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	if( htim -> Instance == TIM2 ){
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e4c:	d101      	bne.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 8000e4e:	f000 f867 	bl	8000f20 <SCH_Update>
//		button_reading () ;
		}
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5e:	b672      	cpsid	i
}
 8000e60:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <Error_Handler+0x8>

08000e64 <SCH_Init>:
#include "main.h"
sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
		current_index_task = 0;
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <SCH_Init+0x14>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	200000c4 	.word	0x200000c4

08000e7c <SCH_Add_Task>:

void SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS)
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <SCH_Add_Task+0x98>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b27      	cmp	r3, #39	; 0x27
 8000e8e:	d83c      	bhi.n	8000f0a <SCH_Add_Task+0x8e>
	{

		SCH_tasks_G[current_index_task].pTask = pFunction;
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <SCH_Add_Task+0x98>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <SCH_Add_Task+0x9c>)
 8000e98:	460b      	mov	r3, r1
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY/TIMER_CYCLE;
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <SCH_Add_Task+0x98>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <SCH_Add_Task+0xa0>)
 8000eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	4918      	ldr	r1, [pc, #96]	; (8000f18 <SCH_Add_Task+0x9c>)
 8000eb8:	4603      	mov	r3, r0
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4403      	add	r3, r0
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD/TIMER_CYCLE;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <SCH_Add_Task+0x98>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <SCH_Add_Task+0xa0>)
 8000ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed4:	08da      	lsrs	r2, r3, #3
 8000ed6:	4910      	ldr	r1, [pc, #64]	; (8000f18 <SCH_Add_Task+0x9c>)
 8000ed8:	4603      	mov	r3, r0
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4403      	add	r3, r0
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	3308      	adds	r3, #8
 8000ee4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <SCH_Add_Task+0x98>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4619      	mov	r1, r3
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <SCH_Add_Task+0x9c>)
 8000eee:	460b      	mov	r3, r1
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	330c      	adds	r3, #12
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
//		SCH_tasks_G[current_index_task].TaskID = current_index_task;
		current_index_task++;
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SCH_Add_Task+0x98>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <SCH_Add_Task+0x98>)
 8000f08:	701a      	strb	r2, [r3, #0]
//		return current_index_task-1;
	}
//	return -1;
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	200000c4 	.word	0x200000c4
 8000f18:	200001a8 	.word	0x200001a8
 8000f1c:	cccccccd 	.word	0xcccccccd

08000f20 <SCH_Update>:

void SCH_Update(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < current_index_task; i++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	e05d      	b.n	8000fe8 <SCH_Update+0xc8>
	{
		if(SCH_tasks_G[i].Delay > 0)
 8000f2c:	4934      	ldr	r1, [pc, #208]	; (8001000 <SCH_Update+0xe0>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d012      	beq.n	8000f68 <SCH_Update+0x48>
		{
			SCH_tasks_G[i].Delay--;
 8000f42:	492f      	ldr	r1, [pc, #188]	; (8001000 <SCH_Update+0xe0>)
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	440b      	add	r3, r1
 8000f50:	3304      	adds	r3, #4
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	1e59      	subs	r1, r3, #1
 8000f56:	482a      	ldr	r0, [pc, #168]	; (8001000 <SCH_Update+0xe0>)
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4403      	add	r3, r0
 8000f64:	3304      	adds	r3, #4
 8000f66:	6019      	str	r1, [r3, #0]
		}
		if(SCH_tasks_G[i].Delay == 0)
 8000f68:	4925      	ldr	r1, [pc, #148]	; (8001000 <SCH_Update+0xe0>)
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	440b      	add	r3, r1
 8000f76:	3304      	adds	r3, #4
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d131      	bne.n	8000fe2 <SCH_Update+0xc2>
		{
			SCH_tasks_G[i].RunMe +=1;
 8000f7e:	4920      	ldr	r1, [pc, #128]	; (8001000 <SCH_Update+0xe0>)
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	330c      	adds	r3, #12
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	b2d8      	uxtb	r0, r3
 8000f94:	491a      	ldr	r1, [pc, #104]	; (8001000 <SCH_Update+0xe0>)
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	330c      	adds	r3, #12
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	701a      	strb	r2, [r3, #0]
			if(SCH_tasks_G[i].Period)
 8000fa8:	4915      	ldr	r1, [pc, #84]	; (8001000 <SCH_Update+0xe0>)
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	3308      	adds	r3, #8
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d011      	beq.n	8000fe2 <SCH_Update+0xc2>
					SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8000fbe:	4910      	ldr	r1, [pc, #64]	; (8001000 <SCH_Update+0xe0>)
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	440b      	add	r3, r1
 8000fcc:	3308      	adds	r3, #8
 8000fce:	6819      	ldr	r1, [r3, #0]
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <SCH_Update+0xe0>)
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4403      	add	r3, r0
 8000fde:	3304      	adds	r3, #4
 8000fe0:	6019      	str	r1, [r3, #0]
	for(int i = 0 ; i < current_index_task; i++)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <SCH_Update+0xe4>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	db9b      	blt.n	8000f2c <SCH_Update+0xc>
		}

	}
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	200001a8 	.word	0x200001a8
 8001004:	200000c4 	.word	0x200000c4

08001008 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	for( int i = 0; i < current_index_task; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	e051      	b.n	80010b8 <SCH_Dispatch_Tasks+0xb0>
	{
		if(SCH_tasks_G[i].RunMe > 0)
 8001014:	492e      	ldr	r1, [pc, #184]	; (80010d0 <SCH_Dispatch_Tasks+0xc8>)
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	330c      	adds	r3, #12
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d043      	beq.n	80010b2 <SCH_Dispatch_Tasks+0xaa>
		{
			SCH_tasks_G[i].RunMe--;
 800102a:	4929      	ldr	r1, [pc, #164]	; (80010d0 <SCH_Dispatch_Tasks+0xc8>)
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	330c      	adds	r3, #12
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	3b01      	subs	r3, #1
 800103e:	b2d8      	uxtb	r0, r3
 8001040:	4923      	ldr	r1, [pc, #140]	; (80010d0 <SCH_Dispatch_Tasks+0xc8>)
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	330c      	adds	r3, #12
 8001050:	4602      	mov	r2, r0
 8001052:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 8001054:	491e      	ldr	r1, [pc, #120]	; (80010d0 <SCH_Dispatch_Tasks+0xc8>)
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4798      	blx	r3
			if(SCH_tasks_G[i].Delay == 0 && SCH_tasks_G[i].Period == 0 && SCH_tasks_G[i].RunMe == 0)
 8001066:	491a      	ldr	r1, [pc, #104]	; (80010d0 <SCH_Dispatch_Tasks+0xc8>)
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	3304      	adds	r3, #4
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d11a      	bne.n	80010b2 <SCH_Dispatch_Tasks+0xaa>
 800107c:	4914      	ldr	r1, [pc, #80]	; (80010d0 <SCH_Dispatch_Tasks+0xc8>)
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	3308      	adds	r3, #8
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10f      	bne.n	80010b2 <SCH_Dispatch_Tasks+0xaa>
 8001092:	490f      	ldr	r1, [pc, #60]	; (80010d0 <SCH_Dispatch_Tasks+0xc8>)
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	330c      	adds	r3, #12
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d104      	bne.n	80010b2 <SCH_Dispatch_Tasks+0xaa>
			{
				SCH_Delete_Task(i);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f813 	bl	80010d8 <SCH_Delete_Task>
	for( int i = 0; i < current_index_task; i++)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3301      	adds	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <SCH_Dispatch_Tasks+0xcc>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4293      	cmp	r3, r2
 80010c2:	dba7      	blt.n	8001014 <SCH_Dispatch_Tasks+0xc>
			}
		}

	}
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200001a8 	.word	0x200001a8
 80010d4:	200000c4 	.word	0x200000c4

080010d8 <SCH_Delete_Task>:

void SCH_Delete_Task(const uint8_t TASK_INDEX)//in array index is taskid
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
   if(TASK_INDEX >= current_index_task)
 80010e2:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <SCH_Delete_Task+0xdc>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d25d      	bcs.n	80011a8 <SCH_Delete_Task+0xd0>
   {
	   return ;
   }
   else
   {
	   for( int i = TASK_INDEX; i < current_index_task - 1; i++)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e04d      	b.n	800118e <SCH_Delete_Task+0xb6>
	   {
			SCH_tasks_G[i].pTask = SCH_tasks_G[i + 1].pTask;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	4930      	ldr	r1, [pc, #192]	; (80011b8 <SCH_Delete_Task+0xe0>)
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	6819      	ldr	r1, [r3, #0]
 8001104:	482c      	ldr	r0, [pc, #176]	; (80011b8 <SCH_Delete_Task+0xe0>)
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4403      	add	r3, r0
 8001112:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Delay = SCH_tasks_G[i + 1].Delay;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	4927      	ldr	r1, [pc, #156]	; (80011b8 <SCH_Delete_Task+0xe0>)
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	3304      	adds	r3, #4
 8001126:	6819      	ldr	r1, [r3, #0]
 8001128:	4823      	ldr	r0, [pc, #140]	; (80011b8 <SCH_Delete_Task+0xe0>)
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4403      	add	r3, r0
 8001136:	3304      	adds	r3, #4
 8001138:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Period = SCH_tasks_G[i + 1].Period;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	491e      	ldr	r1, [pc, #120]	; (80011b8 <SCH_Delete_Task+0xe0>)
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	3308      	adds	r3, #8
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	481a      	ldr	r0, [pc, #104]	; (80011b8 <SCH_Delete_Task+0xe0>)
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4403      	add	r3, r0
 800115c:	3308      	adds	r3, #8
 800115e:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe = SCH_tasks_G[i + 1].RunMe;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	4914      	ldr	r1, [pc, #80]	; (80011b8 <SCH_Delete_Task+0xe0>)
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	330c      	adds	r3, #12
 8001172:	7818      	ldrb	r0, [r3, #0]
 8001174:	4910      	ldr	r1, [pc, #64]	; (80011b8 <SCH_Delete_Task+0xe0>)
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	330c      	adds	r3, #12
 8001184:	4602      	mov	r2, r0
 8001186:	701a      	strb	r2, [r3, #0]
	   for( int i = TASK_INDEX; i < current_index_task - 1; i++)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3301      	adds	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <SCH_Delete_Task+0xdc>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	3b01      	subs	r3, #1
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	429a      	cmp	r2, r3
 8001198:	dbab      	blt.n	80010f2 <SCH_Delete_Task+0x1a>
	   }

	   current_index_task--;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <SCH_Delete_Task+0xdc>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	3b01      	subs	r3, #1
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SCH_Delete_Task+0xdc>)
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	e000      	b.n	80011aa <SCH_Delete_Task+0xd2>
	   return ;
 80011a8:	bf00      	nop
//	   return ;
   }
}
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200000c4 	.word	0x200000c4
 80011b8:	200001a8 	.word	0x200001a8

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_MspInit+0x5c>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	4a14      	ldr	r2, [pc, #80]	; (8001218 <HAL_MspInit+0x5c>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6193      	str	r3, [r2, #24]
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_MspInit+0x5c>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_MspInit+0x5c>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <HAL_MspInit+0x5c>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e4:	61d3      	str	r3, [r2, #28]
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_MspInit+0x5c>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_MspInit+0x60>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_MspInit+0x60>)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	40021000 	.word	0x40021000
 800121c:	40010000 	.word	0x40010000

08001220 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001230:	d113      	bne.n	800125a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_TIM_Base_MspInit+0x44>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <HAL_TIM_Base_MspInit+0x44>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_TIM_Base_MspInit+0x44>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	201c      	movs	r0, #28
 8001250:	f000 faeb 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001254:	201c      	movs	r0, #28
 8001256:	f000 fb04 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a1f      	ldr	r2, [pc, #124]	; (8001300 <HAL_UART_MspInit+0x98>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d137      	bne.n	80012f8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <HAL_UART_MspInit+0x9c>)
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <HAL_UART_MspInit+0x9c>)
 800128e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001292:	61d3      	str	r3, [r2, #28]
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_UART_MspInit+0x9c>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_UART_MspInit+0x9c>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_UART_MspInit+0x9c>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_UART_MspInit+0x9c>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012b8:	2304      	movs	r3, #4
 80012ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	480f      	ldr	r0, [pc, #60]	; (8001308 <HAL_UART_MspInit+0xa0>)
 80012cc:	f000 fb94 	bl	80019f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012d0:	2308      	movs	r3, #8
 80012d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	4619      	mov	r1, r3
 80012e2:	4809      	ldr	r0, [pc, #36]	; (8001308 <HAL_UART_MspInit+0xa0>)
 80012e4:	f000 fb88 	bl	80019f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	2026      	movs	r0, #38	; 0x26
 80012ee:	f000 fa9c 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012f2:	2026      	movs	r0, #38	; 0x26
 80012f4:	f000 fab5 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40004400 	.word	0x40004400
 8001304:	40021000 	.word	0x40021000
 8001308:	40010800 	.word	0x40010800

0800130c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <NMI_Handler+0x4>

08001312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <MemManage_Handler+0x4>

0800131e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler+0x4>

0800132a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr

08001336 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr

08001342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001352:	f000 f977 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <TIM2_IRQHandler+0x10>)
 8001362:	f001 f9a9 	bl	80026b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000118 	.word	0x20000118

08001370 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <USART2_IRQHandler+0x10>)
 8001376:	f001 fdc7 	bl	8002f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000160 	.word	0x20000160

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f002 f9a0 	bl	80036f8 <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20002800 	.word	0x20002800
 80013e4:	00000400 	.word	0x00000400
 80013e8:	200000c8 	.word	0x200000c8
 80013ec:	200004e0 	.word	0x200004e0

080013f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <setTimer0>:

int timer3_flag = 0;
int timer3_counter = 0;


void setTimer0(int duration){
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 8001404:	4a05      	ldr	r2, [pc, #20]	; (800141c <setTimer0+0x20>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 800140a:	4b05      	ldr	r3, [pc, #20]	; (8001420 <setTimer0+0x24>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
};
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	200000d0 	.word	0x200000d0
 8001420:	200000cc 	.word	0x200000cc

08001424 <setTimer1>:
void setTimer1(int duration){
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 800142c:	4a05      	ldr	r2, [pc, #20]	; (8001444 <setTimer1+0x20>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <setTimer1+0x24>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
};
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	200000d8 	.word	0x200000d8
 8001448:	200000d4 	.word	0x200000d4

0800144c <setTimer2>:
void setTimer2(int duration){
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001454:	4a05      	ldr	r2, [pc, #20]	; (800146c <setTimer2+0x20>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <setTimer2+0x24>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200000e0 	.word	0x200000e0
 8001470:	200000dc 	.word	0x200000dc

08001474 <setTimer3>:
void setTimer3(int duration){
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 800147c:	4a05      	ldr	r2, [pc, #20]	; (8001494 <setTimer3+0x20>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <setTimer3+0x24>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	200000e8 	.word	0x200000e8
 8001498:	200000e4 	.word	0x200000e4

0800149c <timerRun0>:





void timerRun0(){
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
	if(timer0_counter > 0 )
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <timerRun0+0x2c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	dd0b      	ble.n	80014c0 <timerRun0+0x24>
	{
		timer0_counter --;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <timerRun0+0x2c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <timerRun0+0x2c>)
 80014b0:	6013      	str	r3, [r2, #0]
		if(timer0_counter <=0){
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <timerRun0+0x2c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	dc02      	bgt.n	80014c0 <timerRun0+0x24>
			timer0_flag=1;
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <timerRun0+0x30>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]
		}
	}
};
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	200000d0 	.word	0x200000d0
 80014cc:	200000cc 	.word	0x200000cc

080014d0 <timerRun1>:
void timerRun1(){
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
	if(timer1_counter > 0 )
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <timerRun1+0x2c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	dd0b      	ble.n	80014f4 <timerRun1+0x24>
	{
		timer1_counter --;
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <timerRun1+0x2c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	4a06      	ldr	r2, [pc, #24]	; (80014fc <timerRun1+0x2c>)
 80014e4:	6013      	str	r3, [r2, #0]
		if(timer1_counter <=0){
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <timerRun1+0x2c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	dc02      	bgt.n	80014f4 <timerRun1+0x24>
			timer1_flag=1;
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <timerRun1+0x30>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
		}
	}
};
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	200000d8 	.word	0x200000d8
 8001500:	200000d4 	.word	0x200000d4

08001504 <timerRun2>:
void timerRun2(){
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
	if(timer2_counter > 0 )
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <timerRun2+0x2c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	dd0b      	ble.n	8001528 <timerRun2+0x24>
	{
		timer2_counter --;
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <timerRun2+0x2c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3b01      	subs	r3, #1
 8001516:	4a06      	ldr	r2, [pc, #24]	; (8001530 <timerRun2+0x2c>)
 8001518:	6013      	str	r3, [r2, #0]
		if(timer2_counter <=0){
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <timerRun2+0x2c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	dc02      	bgt.n	8001528 <timerRun2+0x24>
			timer2_flag=1;
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <timerRun2+0x30>)
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]
		}
	}
};
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	200000e0 	.word	0x200000e0
 8001534:	200000dc 	.word	0x200000dc

08001538 <timerRun3>:

void timerRun3(){
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	if(timer3_counter > 0 )
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <timerRun3+0x2c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	dd0b      	ble.n	800155c <timerRun3+0x24>
	{
		timer3_counter --;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <timerRun3+0x2c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3b01      	subs	r3, #1
 800154a:	4a06      	ldr	r2, [pc, #24]	; (8001564 <timerRun3+0x2c>)
 800154c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <=0){
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <timerRun3+0x2c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	dc02      	bgt.n	800155c <timerRun3+0x24>
			timer3_flag=1;
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <timerRun3+0x30>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]
		}
	}
};
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	200000e8 	.word	0x200000e8
 8001568:	200000e4 	.word	0x200000e4

0800156c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800156c:	480c      	ldr	r0, [pc, #48]	; (80015a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800156e:	490d      	ldr	r1, [pc, #52]	; (80015a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001570:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001584:	4c0a      	ldr	r4, [pc, #40]	; (80015b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001592:	f7ff ff2d 	bl	80013f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001596:	f002 f8b5 	bl	8003704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800159a:	f7ff fabf 	bl	8000b1c <main>
  bx lr
 800159e:	4770      	bx	lr
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80015a8:	08004084 	.word	0x08004084
  ldr r2, =_sbss
 80015ac:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80015b0:	200004dc 	.word	0x200004dc

080015b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC1_2_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_Init+0x28>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <HAL_Init+0x28>)
 80015c2:	f043 0310 	orr.w	r3, r3, #16
 80015c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 f923 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ce:	200f      	movs	r0, #15
 80015d0:	f000 f808 	bl	80015e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d4:	f7ff fdf2 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40022000 	.word	0x40022000

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x54>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f93b 	bl	800187e <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f903 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <HAL_InitTick+0x5c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000018 	.word	0x20000018
 800163c:	20000020 	.word	0x20000020
 8001640:	2000001c 	.word	0x2000001c

08001644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_IncTick+0x1c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_IncTick+0x20>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a03      	ldr	r2, [pc, #12]	; (8001664 <HAL_IncTick+0x20>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	20000020 	.word	0x20000020
 8001664:	200004c8 	.word	0x200004c8

08001668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b02      	ldr	r3, [pc, #8]	; (8001678 <HAL_GetTick+0x10>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	200004c8 	.word	0x200004c8

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	db0b      	blt.n	800170a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 021f 	and.w	r2, r3, #31
 80016f8:	4906      	ldr	r1, [pc, #24]	; (8001714 <__NVIC_EnableIRQ+0x34>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	2001      	movs	r0, #1
 8001702:	fa00 f202 	lsl.w	r2, r0, r2
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff90 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff2d 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff42 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff90 	bl	800176c <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5f 	bl	8001718 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff35 	bl	80016e0 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001896:	b480      	push	{r7}
 8001898:	b085      	sub	sp, #20
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d008      	beq.n	80018be <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2204      	movs	r2, #4
 80018b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e020      	b.n	8001900 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 020e 	bic.w	r2, r2, #14
 80018cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e6:	2101      	movs	r1, #1
 80018e8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
	...

0800190c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800191e:	2b02      	cmp	r3, #2
 8001920:	d005      	beq.n	800192e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2204      	movs	r2, #4
 8001926:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
 800192c:	e051      	b.n	80019d2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 020e 	bic.w	r2, r2, #14
 800193c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0201 	bic.w	r2, r2, #1
 800194c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a22      	ldr	r2, [pc, #136]	; (80019dc <HAL_DMA_Abort_IT+0xd0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d029      	beq.n	80019ac <HAL_DMA_Abort_IT+0xa0>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a20      	ldr	r2, [pc, #128]	; (80019e0 <HAL_DMA_Abort_IT+0xd4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d022      	beq.n	80019a8 <HAL_DMA_Abort_IT+0x9c>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1f      	ldr	r2, [pc, #124]	; (80019e4 <HAL_DMA_Abort_IT+0xd8>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d01a      	beq.n	80019a2 <HAL_DMA_Abort_IT+0x96>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_DMA_Abort_IT+0xdc>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d012      	beq.n	800199c <HAL_DMA_Abort_IT+0x90>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a1c      	ldr	r2, [pc, #112]	; (80019ec <HAL_DMA_Abort_IT+0xe0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d00a      	beq.n	8001996 <HAL_DMA_Abort_IT+0x8a>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a1a      	ldr	r2, [pc, #104]	; (80019f0 <HAL_DMA_Abort_IT+0xe4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d102      	bne.n	8001990 <HAL_DMA_Abort_IT+0x84>
 800198a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800198e:	e00e      	b.n	80019ae <HAL_DMA_Abort_IT+0xa2>
 8001990:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001994:	e00b      	b.n	80019ae <HAL_DMA_Abort_IT+0xa2>
 8001996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800199a:	e008      	b.n	80019ae <HAL_DMA_Abort_IT+0xa2>
 800199c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a0:	e005      	b.n	80019ae <HAL_DMA_Abort_IT+0xa2>
 80019a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a6:	e002      	b.n	80019ae <HAL_DMA_Abort_IT+0xa2>
 80019a8:	2310      	movs	r3, #16
 80019aa:	e000      	b.n	80019ae <HAL_DMA_Abort_IT+0xa2>
 80019ac:	2301      	movs	r3, #1
 80019ae:	4a11      	ldr	r2, [pc, #68]	; (80019f4 <HAL_DMA_Abort_IT+0xe8>)
 80019b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	4798      	blx	r3
    } 
  }
  return status;
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40020008 	.word	0x40020008
 80019e0:	4002001c 	.word	0x4002001c
 80019e4:	40020030 	.word	0x40020030
 80019e8:	40020044 	.word	0x40020044
 80019ec:	40020058 	.word	0x40020058
 80019f0:	4002006c 	.word	0x4002006c
 80019f4:	40020000 	.word	0x40020000

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b08b      	sub	sp, #44	; 0x2c
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0a:	e148      	b.n	8001c9e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	f040 8137 	bne.w	8001c98 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4aa3      	ldr	r2, [pc, #652]	; (8001cbc <HAL_GPIO_Init+0x2c4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d05e      	beq.n	8001af2 <HAL_GPIO_Init+0xfa>
 8001a34:	4aa1      	ldr	r2, [pc, #644]	; (8001cbc <HAL_GPIO_Init+0x2c4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d875      	bhi.n	8001b26 <HAL_GPIO_Init+0x12e>
 8001a3a:	4aa1      	ldr	r2, [pc, #644]	; (8001cc0 <HAL_GPIO_Init+0x2c8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d058      	beq.n	8001af2 <HAL_GPIO_Init+0xfa>
 8001a40:	4a9f      	ldr	r2, [pc, #636]	; (8001cc0 <HAL_GPIO_Init+0x2c8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d86f      	bhi.n	8001b26 <HAL_GPIO_Init+0x12e>
 8001a46:	4a9f      	ldr	r2, [pc, #636]	; (8001cc4 <HAL_GPIO_Init+0x2cc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d052      	beq.n	8001af2 <HAL_GPIO_Init+0xfa>
 8001a4c:	4a9d      	ldr	r2, [pc, #628]	; (8001cc4 <HAL_GPIO_Init+0x2cc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d869      	bhi.n	8001b26 <HAL_GPIO_Init+0x12e>
 8001a52:	4a9d      	ldr	r2, [pc, #628]	; (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d04c      	beq.n	8001af2 <HAL_GPIO_Init+0xfa>
 8001a58:	4a9b      	ldr	r2, [pc, #620]	; (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d863      	bhi.n	8001b26 <HAL_GPIO_Init+0x12e>
 8001a5e:	4a9b      	ldr	r2, [pc, #620]	; (8001ccc <HAL_GPIO_Init+0x2d4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d046      	beq.n	8001af2 <HAL_GPIO_Init+0xfa>
 8001a64:	4a99      	ldr	r2, [pc, #612]	; (8001ccc <HAL_GPIO_Init+0x2d4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d85d      	bhi.n	8001b26 <HAL_GPIO_Init+0x12e>
 8001a6a:	2b12      	cmp	r3, #18
 8001a6c:	d82a      	bhi.n	8001ac4 <HAL_GPIO_Init+0xcc>
 8001a6e:	2b12      	cmp	r3, #18
 8001a70:	d859      	bhi.n	8001b26 <HAL_GPIO_Init+0x12e>
 8001a72:	a201      	add	r2, pc, #4	; (adr r2, 8001a78 <HAL_GPIO_Init+0x80>)
 8001a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a78:	08001af3 	.word	0x08001af3
 8001a7c:	08001acd 	.word	0x08001acd
 8001a80:	08001adf 	.word	0x08001adf
 8001a84:	08001b21 	.word	0x08001b21
 8001a88:	08001b27 	.word	0x08001b27
 8001a8c:	08001b27 	.word	0x08001b27
 8001a90:	08001b27 	.word	0x08001b27
 8001a94:	08001b27 	.word	0x08001b27
 8001a98:	08001b27 	.word	0x08001b27
 8001a9c:	08001b27 	.word	0x08001b27
 8001aa0:	08001b27 	.word	0x08001b27
 8001aa4:	08001b27 	.word	0x08001b27
 8001aa8:	08001b27 	.word	0x08001b27
 8001aac:	08001b27 	.word	0x08001b27
 8001ab0:	08001b27 	.word	0x08001b27
 8001ab4:	08001b27 	.word	0x08001b27
 8001ab8:	08001b27 	.word	0x08001b27
 8001abc:	08001ad5 	.word	0x08001ad5
 8001ac0:	08001ae9 	.word	0x08001ae9
 8001ac4:	4a82      	ldr	r2, [pc, #520]	; (8001cd0 <HAL_GPIO_Init+0x2d8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aca:	e02c      	b.n	8001b26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	623b      	str	r3, [r7, #32]
          break;
 8001ad2:	e029      	b.n	8001b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	623b      	str	r3, [r7, #32]
          break;
 8001adc:	e024      	b.n	8001b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	3308      	adds	r3, #8
 8001ae4:	623b      	str	r3, [r7, #32]
          break;
 8001ae6:	e01f      	b.n	8001b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	330c      	adds	r3, #12
 8001aee:	623b      	str	r3, [r7, #32]
          break;
 8001af0:	e01a      	b.n	8001b28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001afa:	2304      	movs	r3, #4
 8001afc:	623b      	str	r3, [r7, #32]
          break;
 8001afe:	e013      	b.n	8001b28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b08:	2308      	movs	r3, #8
 8001b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	611a      	str	r2, [r3, #16]
          break;
 8001b12:	e009      	b.n	8001b28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b14:	2308      	movs	r3, #8
 8001b16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	615a      	str	r2, [r3, #20]
          break;
 8001b1e:	e003      	b.n	8001b28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
          break;
 8001b24:	e000      	b.n	8001b28 <HAL_GPIO_Init+0x130>
          break;
 8001b26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2bff      	cmp	r3, #255	; 0xff
 8001b2c:	d801      	bhi.n	8001b32 <HAL_GPIO_Init+0x13a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	e001      	b.n	8001b36 <HAL_GPIO_Init+0x13e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3304      	adds	r3, #4
 8001b36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2bff      	cmp	r3, #255	; 0xff
 8001b3c:	d802      	bhi.n	8001b44 <HAL_GPIO_Init+0x14c>
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	e002      	b.n	8001b4a <HAL_GPIO_Init+0x152>
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	3b08      	subs	r3, #8
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	210f      	movs	r1, #15
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	6a39      	ldr	r1, [r7, #32]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	431a      	orrs	r2, r3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8090 	beq.w	8001c98 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b78:	4b56      	ldr	r3, [pc, #344]	; (8001cd4 <HAL_GPIO_Init+0x2dc>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	4a55      	ldr	r2, [pc, #340]	; (8001cd4 <HAL_GPIO_Init+0x2dc>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6193      	str	r3, [r2, #24]
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_GPIO_Init+0x2dc>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b90:	4a51      	ldr	r2, [pc, #324]	; (8001cd8 <HAL_GPIO_Init+0x2e0>)
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a49      	ldr	r2, [pc, #292]	; (8001cdc <HAL_GPIO_Init+0x2e4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d00d      	beq.n	8001bd8 <HAL_GPIO_Init+0x1e0>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a48      	ldr	r2, [pc, #288]	; (8001ce0 <HAL_GPIO_Init+0x2e8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d007      	beq.n	8001bd4 <HAL_GPIO_Init+0x1dc>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a47      	ldr	r2, [pc, #284]	; (8001ce4 <HAL_GPIO_Init+0x2ec>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d101      	bne.n	8001bd0 <HAL_GPIO_Init+0x1d8>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e004      	b.n	8001bda <HAL_GPIO_Init+0x1e2>
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e002      	b.n	8001bda <HAL_GPIO_Init+0x1e2>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <HAL_GPIO_Init+0x1e2>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bdc:	f002 0203 	and.w	r2, r2, #3
 8001be0:	0092      	lsls	r2, r2, #2
 8001be2:	4093      	lsls	r3, r2
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bea:	493b      	ldr	r1, [pc, #236]	; (8001cd8 <HAL_GPIO_Init+0x2e0>)
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c04:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4937      	ldr	r1, [pc, #220]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c12:	4b35      	ldr	r3, [pc, #212]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	4933      	ldr	r1, [pc, #204]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d006      	beq.n	8001c3a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	492d      	ldr	r1, [pc, #180]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
 8001c38:	e006      	b.n	8001c48 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	4929      	ldr	r1, [pc, #164]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c54:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	4923      	ldr	r1, [pc, #140]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	491f      	ldr	r1, [pc, #124]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	4919      	ldr	r1, [pc, #100]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60cb      	str	r3, [r1, #12]
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c8a:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	4915      	ldr	r1, [pc, #84]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f47f aeaf 	bne.w	8001a0c <HAL_GPIO_Init+0x14>
  }
}
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
 8001cb2:	372c      	adds	r7, #44	; 0x2c
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	10320000 	.word	0x10320000
 8001cc0:	10310000 	.word	0x10310000
 8001cc4:	10220000 	.word	0x10220000
 8001cc8:	10210000 	.word	0x10210000
 8001ccc:	10120000 	.word	0x10120000
 8001cd0:	10110000 	.word	0x10110000
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	40010800 	.word	0x40010800
 8001ce0:	40010c00 	.word	0x40010c00
 8001ce4:	40011000 	.word	0x40011000
 8001ce8:	40010400 	.word	0x40010400

08001cec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	e001      	b.n	8001d0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	807b      	strh	r3, [r7, #2]
 8001d26:	4613      	mov	r3, r2
 8001d28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d2a:	787b      	ldrb	r3, [r7, #1]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d30:	887a      	ldrh	r2, [r7, #2]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d36:	e003      	b.n	8001d40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d38:	887b      	ldrh	r3, [r7, #2]
 8001d3a:	041a      	lsls	r2, r3, #16
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	611a      	str	r2, [r3, #16]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e26c      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 8087 	beq.w	8001e7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d6c:	4b92      	ldr	r3, [pc, #584]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d00c      	beq.n	8001d92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d78:	4b8f      	ldr	r3, [pc, #572]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 030c 	and.w	r3, r3, #12
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d112      	bne.n	8001daa <HAL_RCC_OscConfig+0x5e>
 8001d84:	4b8c      	ldr	r3, [pc, #560]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d90:	d10b      	bne.n	8001daa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d92:	4b89      	ldr	r3, [pc, #548]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d06c      	beq.n	8001e78 <HAL_RCC_OscConfig+0x12c>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d168      	bne.n	8001e78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e246      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x76>
 8001db4:	4b80      	ldr	r3, [pc, #512]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a7f      	ldr	r2, [pc, #508]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	e02e      	b.n	8001e20 <HAL_RCC_OscConfig+0xd4>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x98>
 8001dca:	4b7b      	ldr	r3, [pc, #492]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a7a      	ldr	r2, [pc, #488]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b78      	ldr	r3, [pc, #480]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a77      	ldr	r2, [pc, #476]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e01d      	b.n	8001e20 <HAL_RCC_OscConfig+0xd4>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCC_OscConfig+0xbc>
 8001dee:	4b72      	ldr	r3, [pc, #456]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a71      	ldr	r2, [pc, #452]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4b6f      	ldr	r3, [pc, #444]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a6e      	ldr	r2, [pc, #440]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e00b      	b.n	8001e20 <HAL_RCC_OscConfig+0xd4>
 8001e08:	4b6b      	ldr	r3, [pc, #428]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a6a      	ldr	r2, [pc, #424]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4b68      	ldr	r3, [pc, #416]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a67      	ldr	r2, [pc, #412]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d013      	beq.n	8001e50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fc1e 	bl	8001668 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e30:	f7ff fc1a 	bl	8001668 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e1fa      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	4b5d      	ldr	r3, [pc, #372]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0xe4>
 8001e4e:	e014      	b.n	8001e7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff fc0a 	bl	8001668 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e58:	f7ff fc06 	bl	8001668 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	; 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e1e6      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6a:	4b53      	ldr	r3, [pc, #332]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x10c>
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d063      	beq.n	8001f4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e86:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00b      	beq.n	8001eaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e92:	4b49      	ldr	r3, [pc, #292]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d11c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x18c>
 8001e9e:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d116      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eaa:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x176>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d001      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e1ba      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec2:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4939      	ldr	r1, [pc, #228]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	e03a      	b.n	8001f4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d020      	beq.n	8001f22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee0:	4b36      	ldr	r3, [pc, #216]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff fbbf 	bl	8001668 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eee:	f7ff fbbb 	bl	8001668 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e19b      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f00:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4927      	ldr	r1, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]
 8001f20:	e015      	b.n	8001f4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fb9e 	bl	8001668 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f30:	f7ff fb9a 	bl	8001668 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e17a      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d03a      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d019      	beq.n	8001f96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_RCC_OscConfig+0x274>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7ff fb7e 	bl	8001668 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f70:	f7ff fb7a 	bl	8001668 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e15a      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f000 fad8 	bl	8002544 <RCC_Delay>
 8001f94:	e01c      	b.n	8001fd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_RCC_OscConfig+0x274>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9c:	f7ff fb64 	bl	8001668 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa2:	e00f      	b.n	8001fc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa4:	f7ff fb60 	bl	8001668 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d908      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e140      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	42420000 	.word	0x42420000
 8001fc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc4:	4b9e      	ldr	r3, [pc, #632]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1e9      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80a6 	beq.w	800212a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe2:	4b97      	ldr	r3, [pc, #604]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10d      	bne.n	800200a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fee:	4b94      	ldr	r3, [pc, #592]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	4a93      	ldr	r2, [pc, #588]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	61d3      	str	r3, [r2, #28]
 8001ffa:	4b91      	ldr	r3, [pc, #580]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002006:	2301      	movs	r3, #1
 8002008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200a:	4b8e      	ldr	r3, [pc, #568]	; (8002244 <HAL_RCC_OscConfig+0x4f8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d118      	bne.n	8002048 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002016:	4b8b      	ldr	r3, [pc, #556]	; (8002244 <HAL_RCC_OscConfig+0x4f8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a8a      	ldr	r2, [pc, #552]	; (8002244 <HAL_RCC_OscConfig+0x4f8>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002022:	f7ff fb21 	bl	8001668 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202a:	f7ff fb1d 	bl	8001668 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b64      	cmp	r3, #100	; 0x64
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e0fd      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203c:	4b81      	ldr	r3, [pc, #516]	; (8002244 <HAL_RCC_OscConfig+0x4f8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d106      	bne.n	800205e <HAL_RCC_OscConfig+0x312>
 8002050:	4b7b      	ldr	r3, [pc, #492]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	4a7a      	ldr	r2, [pc, #488]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6213      	str	r3, [r2, #32]
 800205c:	e02d      	b.n	80020ba <HAL_RCC_OscConfig+0x36e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0x334>
 8002066:	4b76      	ldr	r3, [pc, #472]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a75      	ldr	r2, [pc, #468]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	6213      	str	r3, [r2, #32]
 8002072:	4b73      	ldr	r3, [pc, #460]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	4a72      	ldr	r2, [pc, #456]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	f023 0304 	bic.w	r3, r3, #4
 800207c:	6213      	str	r3, [r2, #32]
 800207e:	e01c      	b.n	80020ba <HAL_RCC_OscConfig+0x36e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b05      	cmp	r3, #5
 8002086:	d10c      	bne.n	80020a2 <HAL_RCC_OscConfig+0x356>
 8002088:	4b6d      	ldr	r3, [pc, #436]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	4a6c      	ldr	r2, [pc, #432]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 800208e:	f043 0304 	orr.w	r3, r3, #4
 8002092:	6213      	str	r3, [r2, #32]
 8002094:	4b6a      	ldr	r3, [pc, #424]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4a69      	ldr	r2, [pc, #420]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6213      	str	r3, [r2, #32]
 80020a0:	e00b      	b.n	80020ba <HAL_RCC_OscConfig+0x36e>
 80020a2:	4b67      	ldr	r3, [pc, #412]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a66      	ldr	r2, [pc, #408]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	4b64      	ldr	r3, [pc, #400]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4a63      	ldr	r2, [pc, #396]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	f023 0304 	bic.w	r3, r3, #4
 80020b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d015      	beq.n	80020ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7ff fad1 	bl	8001668 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c8:	e00a      	b.n	80020e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7ff facd 	bl	8001668 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d8:	4293      	cmp	r3, r2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e0ab      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e0:	4b57      	ldr	r3, [pc, #348]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0ee      	beq.n	80020ca <HAL_RCC_OscConfig+0x37e>
 80020ec:	e014      	b.n	8002118 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ee:	f7ff fabb 	bl	8001668 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f6:	f7ff fab7 	bl	8001668 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	f241 3288 	movw	r2, #5000	; 0x1388
 8002104:	4293      	cmp	r3, r2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e095      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210c:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1ee      	bne.n	80020f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002118:	7dfb      	ldrb	r3, [r7, #23]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d105      	bne.n	800212a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211e:	4b48      	ldr	r3, [pc, #288]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	4a47      	ldr	r2, [pc, #284]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002128:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8081 	beq.w	8002236 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002134:	4b42      	ldr	r3, [pc, #264]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b08      	cmp	r3, #8
 800213e:	d061      	beq.n	8002204 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d146      	bne.n	80021d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002148:	4b3f      	ldr	r3, [pc, #252]	; (8002248 <HAL_RCC_OscConfig+0x4fc>)
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7ff fa8b 	bl	8001668 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002156:	f7ff fa87 	bl	8001668 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e067      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002168:	4b35      	ldr	r3, [pc, #212]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f0      	bne.n	8002156 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217c:	d108      	bne.n	8002190 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800217e:	4b30      	ldr	r3, [pc, #192]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	492d      	ldr	r1, [pc, #180]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a19      	ldr	r1, [r3, #32]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	430b      	orrs	r3, r1
 80021a2:	4927      	ldr	r1, [pc, #156]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a8:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_RCC_OscConfig+0x4fc>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7ff fa5b 	bl	8001668 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b6:	f7ff fa57 	bl	8001668 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e037      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x46a>
 80021d4:	e02f      	b.n	8002236 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d6:	4b1c      	ldr	r3, [pc, #112]	; (8002248 <HAL_RCC_OscConfig+0x4fc>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff fa44 	bl	8001668 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e4:	f7ff fa40 	bl	8001668 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e020      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x498>
 8002202:	e018      	b.n	8002236 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e013      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_OscConfig+0x4f4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	429a      	cmp	r2, r3
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d001      	beq.n	8002236 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	40007000 	.word	0x40007000
 8002248:	42420060 	.word	0x42420060

0800224c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0d0      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002260:	4b6a      	ldr	r3, [pc, #424]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d910      	bls.n	8002290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b67      	ldr	r3, [pc, #412]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0207 	bic.w	r2, r3, #7
 8002276:	4965      	ldr	r1, [pc, #404]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b63      	ldr	r3, [pc, #396]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0b8      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a8:	4b59      	ldr	r3, [pc, #356]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a58      	ldr	r2, [pc, #352]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c0:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a52      	ldr	r2, [pc, #328]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	4b50      	ldr	r3, [pc, #320]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	494d      	ldr	r1, [pc, #308]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d040      	beq.n	800236c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d115      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e07f      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230a:	4b41      	ldr	r3, [pc, #260]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e073      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231a:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e06b      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232a:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f023 0203 	bic.w	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4936      	ldr	r1, [pc, #216]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800233c:	f7ff f994 	bl	8001668 <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	e00a      	b.n	800235a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002344:	f7ff f990 	bl	8001668 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e053      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 020c 	and.w	r2, r3, #12
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	429a      	cmp	r2, r3
 800236a:	d1eb      	bne.n	8002344 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d210      	bcs.n	800239c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 0207 	bic.w	r2, r3, #7
 8002382:	4922      	ldr	r1, [pc, #136]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e032      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4916      	ldr	r1, [pc, #88]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	490e      	ldr	r1, [pc, #56]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023da:	f000 f821 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 80023de:	4602      	mov	r2, r0
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	490a      	ldr	r1, [pc, #40]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	5ccb      	ldrb	r3, [r1, r3]
 80023ee:	fa22 f303 	lsr.w	r3, r2, r3
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x1cc>)
 80023f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1d0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff f8f2 	bl	80015e4 <HAL_InitTick>

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40022000 	.word	0x40022000
 8002410:	40021000 	.word	0x40021000
 8002414:	08004030 	.word	0x08004030
 8002418:	20000018 	.word	0x20000018
 800241c:	2000001c 	.word	0x2000001c

08002420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002420:	b490      	push	{r4, r7}
 8002422:	b08a      	sub	sp, #40	; 0x28
 8002424:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002426:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002428:	1d3c      	adds	r4, r7, #4
 800242a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800242c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002430:	f240 2301 	movw	r3, #513	; 0x201
 8002434:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800244a:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b04      	cmp	r3, #4
 8002458:	d002      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x40>
 800245a:	2b08      	cmp	r3, #8
 800245c:	d003      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0x46>
 800245e:	e02d      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002462:	623b      	str	r3, [r7, #32]
      break;
 8002464:	e02d      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	0c9b      	lsrs	r3, r3, #18
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002472:	4413      	add	r3, r2
 8002474:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002478:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d013      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002484:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	0c5b      	lsrs	r3, r3, #17
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002492:	4413      	add	r3, r2
 8002494:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002498:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800249e:	fb02 f203 	mul.w	r2, r2, r3
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	e004      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	4a0b      	ldr	r2, [pc, #44]	; (80024dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	623b      	str	r3, [r7, #32]
      break;
 80024ba:	e002      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024be:	623b      	str	r3, [r7, #32]
      break;
 80024c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c2:	6a3b      	ldr	r3, [r7, #32]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3728      	adds	r7, #40	; 0x28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc90      	pop	{r4, r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	08004020 	.word	0x08004020
 80024d4:	40021000 	.word	0x40021000
 80024d8:	007a1200 	.word	0x007a1200
 80024dc:	003d0900 	.word	0x003d0900

080024e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e4:	4b02      	ldr	r3, [pc, #8]	; (80024f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	20000018 	.word	0x20000018

080024f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024f8:	f7ff fff2 	bl	80024e0 <HAL_RCC_GetHCLKFreq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	4903      	ldr	r1, [pc, #12]	; (8002518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800250a:	5ccb      	ldrb	r3, [r1, r3]
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	08004040 	.word	0x08004040

0800251c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002520:	f7ff ffde 	bl	80024e0 <HAL_RCC_GetHCLKFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0adb      	lsrs	r3, r3, #11
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4903      	ldr	r1, [pc, #12]	; (8002540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002538:	4618      	mov	r0, r3
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000
 8002540:	08004040 	.word	0x08004040

08002544 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <RCC_Delay+0x34>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0a      	ldr	r2, [pc, #40]	; (800257c <RCC_Delay+0x38>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	0a5b      	lsrs	r3, r3, #9
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	fb02 f303 	mul.w	r3, r2, r3
 800255e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002560:	bf00      	nop
  }
  while (Delay --);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1e5a      	subs	r2, r3, #1
 8002566:	60fa      	str	r2, [r7, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f9      	bne.n	8002560 <RCC_Delay+0x1c>
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	20000018 	.word	0x20000018
 800257c:	10624dd3 	.word	0x10624dd3

08002580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e041      	b.n	8002616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe fe3a 	bl	8001220 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	4619      	mov	r1, r3
 80025be:	4610      	mov	r0, r2
 80025c0:	f000 fa6a 	bl	8002a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d001      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e035      	b.n	80026a4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <HAL_TIM_Base_Start_IT+0x90>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d009      	beq.n	800266e <HAL_TIM_Base_Start_IT+0x4e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002662:	d004      	beq.n	800266e <HAL_TIM_Base_Start_IT+0x4e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <HAL_TIM_Base_Start_IT+0x94>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d111      	bne.n	8002692 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b06      	cmp	r3, #6
 800267e:	d010      	beq.n	80026a2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002690:	e007      	b.n	80026a2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f042 0201 	orr.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40012c00 	.word	0x40012c00
 80026b4:	40000400 	.word	0x40000400

080026b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d122      	bne.n	8002714 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d11b      	bne.n	8002714 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0202 	mvn.w	r2, #2
 80026e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f9b1 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 8002700:	e005      	b.n	800270e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f9a4 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f9b3 	bl	8002a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b04      	cmp	r3, #4
 8002720:	d122      	bne.n	8002768 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b04      	cmp	r3, #4
 800272e:	d11b      	bne.n	8002768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0204 	mvn.w	r2, #4
 8002738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f987 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 8002754:	e005      	b.n	8002762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f97a 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f989 	bl	8002a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b08      	cmp	r3, #8
 8002774:	d122      	bne.n	80027bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b08      	cmp	r3, #8
 8002782:	d11b      	bne.n	80027bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0208 	mvn.w	r2, #8
 800278c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2204      	movs	r2, #4
 8002792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f95d 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 80027a8:	e005      	b.n	80027b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f950 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f95f 	bl	8002a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d122      	bne.n	8002810 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b10      	cmp	r3, #16
 80027d6:	d11b      	bne.n	8002810 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0210 	mvn.w	r2, #16
 80027e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2208      	movs	r2, #8
 80027e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f933 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 80027fc:	e005      	b.n	800280a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f926 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f935 	bl	8002a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d10e      	bne.n	800283c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b01      	cmp	r3, #1
 800282a:	d107      	bne.n	800283c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0201 	mvn.w	r2, #1
 8002834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fe fb00 	bl	8000e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002846:	2b80      	cmp	r3, #128	; 0x80
 8002848:	d10e      	bne.n	8002868 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002854:	2b80      	cmp	r3, #128	; 0x80
 8002856:	d107      	bne.n	8002868 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fa67 	bl	8002d36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	d107      	bne.n	8002894 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800288c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f8f9 	bl	8002a86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d10e      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d107      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0220 	mvn.w	r2, #32
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fa32 	bl	8002d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_TIM_ConfigClockSource+0x18>
 80028dc:	2302      	movs	r3, #2
 80028de:	e0b3      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x180>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002906:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002918:	d03e      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0xd0>
 800291a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291e:	f200 8087 	bhi.w	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002926:	f000 8085 	beq.w	8002a34 <HAL_TIM_ConfigClockSource+0x16c>
 800292a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292e:	d87f      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002930:	2b70      	cmp	r3, #112	; 0x70
 8002932:	d01a      	beq.n	800296a <HAL_TIM_ConfigClockSource+0xa2>
 8002934:	2b70      	cmp	r3, #112	; 0x70
 8002936:	d87b      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002938:	2b60      	cmp	r3, #96	; 0x60
 800293a:	d050      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x116>
 800293c:	2b60      	cmp	r3, #96	; 0x60
 800293e:	d877      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002940:	2b50      	cmp	r3, #80	; 0x50
 8002942:	d03c      	beq.n	80029be <HAL_TIM_ConfigClockSource+0xf6>
 8002944:	2b50      	cmp	r3, #80	; 0x50
 8002946:	d873      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002948:	2b40      	cmp	r3, #64	; 0x40
 800294a:	d058      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x136>
 800294c:	2b40      	cmp	r3, #64	; 0x40
 800294e:	d86f      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002950:	2b30      	cmp	r3, #48	; 0x30
 8002952:	d064      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x156>
 8002954:	2b30      	cmp	r3, #48	; 0x30
 8002956:	d86b      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002958:	2b20      	cmp	r3, #32
 800295a:	d060      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x156>
 800295c:	2b20      	cmp	r3, #32
 800295e:	d867      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d05c      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x156>
 8002964:	2b10      	cmp	r3, #16
 8002966:	d05a      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002968:	e062      	b.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6899      	ldr	r1, [r3, #8]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f000 f95c 	bl	8002c36 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800298c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	609a      	str	r2, [r3, #8]
      break;
 8002996:	e04e      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6899      	ldr	r1, [r3, #8]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f000 f945 	bl	8002c36 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029ba:	609a      	str	r2, [r3, #8]
      break;
 80029bc:	e03b      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f000 f8bc 	bl	8002b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2150      	movs	r1, #80	; 0x50
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f913 	bl	8002c02 <TIM_ITRx_SetConfig>
      break;
 80029dc:	e02b      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f000 f8da 	bl	8002ba4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2160      	movs	r1, #96	; 0x60
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f903 	bl	8002c02 <TIM_ITRx_SetConfig>
      break;
 80029fc:	e01b      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6859      	ldr	r1, [r3, #4]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f000 f89c 	bl	8002b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2140      	movs	r1, #64	; 0x40
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f8f3 	bl	8002c02 <TIM_ITRx_SetConfig>
      break;
 8002a1c:	e00b      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f000 f8ea 	bl	8002c02 <TIM_ITRx_SetConfig>
        break;
 8002a2e:	e002      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a30:	bf00      	nop
 8002a32:	e000      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a25      	ldr	r2, [pc, #148]	; (8002b40 <TIM_Base_SetConfig+0xa8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <TIM_Base_SetConfig+0x28>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab6:	d003      	beq.n	8002ac0 <TIM_Base_SetConfig+0x28>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a22      	ldr	r2, [pc, #136]	; (8002b44 <TIM_Base_SetConfig+0xac>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d108      	bne.n	8002ad2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a1a      	ldr	r2, [pc, #104]	; (8002b40 <TIM_Base_SetConfig+0xa8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d007      	beq.n	8002aea <TIM_Base_SetConfig+0x52>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae0:	d003      	beq.n	8002aea <TIM_Base_SetConfig+0x52>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <TIM_Base_SetConfig+0xac>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d108      	bne.n	8002afc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a07      	ldr	r2, [pc, #28]	; (8002b40 <TIM_Base_SetConfig+0xa8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d103      	bne.n	8002b30 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	615a      	str	r2, [r3, #20]
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40000400 	.word	0x40000400

08002b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f023 0201 	bic.w	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f023 030a 	bic.w	r3, r3, #10
 8002b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	621a      	str	r2, [r3, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f023 0210 	bic.w	r2, r3, #16
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	031b      	lsls	r3, r3, #12
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002be0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	621a      	str	r2, [r3, #32]
}
 8002bf8:	bf00      	nop
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f043 0307 	orr.w	r3, r3, #7
 8002c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	609a      	str	r2, [r3, #8]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b087      	sub	sp, #28
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	021a      	lsls	r2, r3, #8
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	609a      	str	r2, [r3, #8]
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e041      	b.n	8002d10 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d009      	beq.n	8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd8:	d004      	beq.n	8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a10      	ldr	r2, [pc, #64]	; (8002d20 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d10c      	bne.n	8002cfe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40012c00 	.word	0x40012c00
 8002d20:	40000400 	.word	0x40000400

08002d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e03f      	b.n	8002dda <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fe fa7a 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2224      	movs	r2, #36	; 0x24
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fc25 	bl	80035dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b08a      	sub	sp, #40	; 0x28
 8002de6:	af02      	add	r7, sp, #8
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	603b      	str	r3, [r7, #0]
 8002dee:	4613      	mov	r3, r2
 8002df0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d17c      	bne.n	8002efc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_UART_Transmit+0x2c>
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e075      	b.n	8002efe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_UART_Transmit+0x3e>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e06e      	b.n	8002efe <HAL_UART_Transmit+0x11c>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2221      	movs	r2, #33	; 0x21
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e36:	f7fe fc17 	bl	8001668 <HAL_GetTick>
 8002e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	88fa      	ldrh	r2, [r7, #6]
 8002e40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	88fa      	ldrh	r2, [r7, #6]
 8002e46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e50:	d108      	bne.n	8002e64 <HAL_UART_Transmit+0x82>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d104      	bne.n	8002e64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	e003      	b.n	8002e6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e74:	e02a      	b.n	8002ecc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2180      	movs	r1, #128	; 0x80
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fa11 	bl	80032a8 <UART_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e036      	b.n	8002efe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10b      	bne.n	8002eae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ea4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	61bb      	str	r3, [r7, #24]
 8002eac:	e007      	b.n	8002ebe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	781a      	ldrb	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1cf      	bne.n	8002e76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2200      	movs	r2, #0
 8002ede:	2140      	movs	r1, #64	; 0x40
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f9e1 	bl	80032a8 <UART_WaitOnFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e006      	b.n	8002efe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e000      	b.n	8002efe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002efc:	2302      	movs	r3, #2
  }
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3720      	adds	r7, #32
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	; 0x28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10d      	bne.n	8002f5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_UART_IRQHandler+0x52>
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fa99 	bl	800348a <UART_Receive_IT>
      return;
 8002f58:	e17b      	b.n	8003252 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80b1 	beq.w	80030c4 <HAL_UART_IRQHandler+0x1bc>
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <HAL_UART_IRQHandler+0x70>
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80a6 	beq.w	80030c4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_UART_IRQHandler+0x90>
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f043 0201 	orr.w	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_UART_IRQHandler+0xb0>
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	f043 0202 	orr.w	r2, r3, #2
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_UART_IRQHandler+0xd0>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f043 0204 	orr.w	r2, r3, #4
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00f      	beq.n	8003002 <HAL_UART_IRQHandler+0xfa>
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <HAL_UART_IRQHandler+0xee>
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f043 0208 	orr.w	r2, r3, #8
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 811e 	beq.w	8003248 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <HAL_UART_IRQHandler+0x11e>
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fa32 	bl	800348a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf14      	ite	ne
 8003034:	2301      	movne	r3, #1
 8003036:	2300      	moveq	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <HAL_UART_IRQHandler+0x146>
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d031      	beq.n	80030b2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f974 	bl	800333c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d023      	beq.n	80030aa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003070:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	2b00      	cmp	r3, #0
 8003078:	d013      	beq.n	80030a2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	4a76      	ldr	r2, [pc, #472]	; (8003258 <HAL_UART_IRQHandler+0x350>)
 8003080:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fc40 	bl	800190c <HAL_DMA_Abort_IT>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d016      	beq.n	80030c0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800309c:	4610      	mov	r0, r2
 800309e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a0:	e00e      	b.n	80030c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f8ec 	bl	8003280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a8:	e00a      	b.n	80030c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f8e8 	bl	8003280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b0:	e006      	b.n	80030c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f8e4 	bl	8003280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80030be:	e0c3      	b.n	8003248 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c0:	bf00      	nop
    return;
 80030c2:	e0c1      	b.n	8003248 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	f040 80a1 	bne.w	8003210 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 809b 	beq.w	8003210 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8095 	beq.w	8003210 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d04e      	beq.n	80031a8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003114:	8a3b      	ldrh	r3, [r7, #16]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8098 	beq.w	800324c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003120:	8a3a      	ldrh	r2, [r7, #16]
 8003122:	429a      	cmp	r2, r3
 8003124:	f080 8092 	bcs.w	800324c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	8a3a      	ldrh	r2, [r7, #16]
 800312c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b20      	cmp	r3, #32
 8003136:	d02b      	beq.n	8003190 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003146:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003166:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0210 	bic.w	r2, r2, #16
 8003184:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fb83 	bl	8001896 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003198:	b29b      	uxth	r3, r3
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	b29b      	uxth	r3, r3
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f876 	bl	8003292 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80031a6:	e051      	b.n	800324c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d047      	beq.n	8003250 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80031c0:	8a7b      	ldrh	r3, [r7, #18]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d044      	beq.n	8003250 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031d4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0201 	bic.w	r2, r2, #1
 80031e4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0210 	bic.w	r2, r2, #16
 8003202:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003204:	8a7b      	ldrh	r3, [r7, #18]
 8003206:	4619      	mov	r1, r3
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f842 	bl	8003292 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800320e:	e01f      	b.n	8003250 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_UART_IRQHandler+0x324>
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f8c9 	bl	80033bc <UART_Transmit_IT>
    return;
 800322a:	e012      	b.n	8003252 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00d      	beq.n	8003252 <HAL_UART_IRQHandler+0x34a>
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f90a 	bl	800345a <UART_EndTransmit_IT>
    return;
 8003246:	e004      	b.n	8003252 <HAL_UART_IRQHandler+0x34a>
    return;
 8003248:	bf00      	nop
 800324a:	e002      	b.n	8003252 <HAL_UART_IRQHandler+0x34a>
      return;
 800324c:	bf00      	nop
 800324e:	e000      	b.n	8003252 <HAL_UART_IRQHandler+0x34a>
      return;
 8003250:	bf00      	nop
  }
}
 8003252:	3728      	adds	r7, #40	; 0x28
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	08003395 	.word	0x08003395

0800325c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr

0800326e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b8:	e02c      	b.n	8003314 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d028      	beq.n	8003314 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80032c8:	f7fe f9ce 	bl	8001668 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d21d      	bcs.n	8003314 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0201 	bic.w	r2, r2, #1
 80032f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e00f      	b.n	8003334 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4013      	ands	r3, r2
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	429a      	cmp	r2, r3
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	429a      	cmp	r2, r3
 8003330:	d0c3      	beq.n	80032ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003352:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	2b01      	cmp	r3, #1
 800336a:	d107      	bne.n	800337c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0210 	bic.w	r2, r2, #16
 800337a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f7ff ff66 	bl	8003280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b21      	cmp	r3, #33	; 0x21
 80033ce:	d13e      	bne.n	800344e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d8:	d114      	bne.n	8003404 <UART_Transmit_IT+0x48>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d110      	bne.n	8003404 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	1c9a      	adds	r2, r3, #2
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	621a      	str	r2, [r3, #32]
 8003402:	e008      	b.n	8003416 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	1c59      	adds	r1, r3, #1
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6211      	str	r1, [r2, #32]
 800340e:	781a      	ldrb	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29b      	uxth	r3, r3
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	4619      	mov	r1, r3
 8003424:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10f      	bne.n	800344a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003438:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003448:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e000      	b.n	8003450 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800344e:	2302      	movs	r3, #2
  }
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr

0800345a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003470:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff feee 	bl	800325c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b086      	sub	sp, #24
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b22      	cmp	r3, #34	; 0x22
 800349c:	f040 8099 	bne.w	80035d2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a8:	d117      	bne.n	80034da <UART_Receive_IT+0x50>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d113      	bne.n	80034da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	1c9a      	adds	r2, r3, #2
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28
 80034d8:	e026      	b.n	8003528 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ec:	d007      	beq.n	80034fe <UART_Receive_IT+0x74>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10a      	bne.n	800350c <UART_Receive_IT+0x82>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	701a      	strb	r2, [r3, #0]
 800350a:	e008      	b.n	800351e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003518:	b2da      	uxtb	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29b      	uxth	r3, r3
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4619      	mov	r1, r3
 8003536:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003538:	2b00      	cmp	r3, #0
 800353a:	d148      	bne.n	80035ce <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0220 	bic.w	r2, r2, #32
 800354a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800355a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	2b01      	cmp	r3, #1
 800357a:	d123      	bne.n	80035c4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0210 	bic.w	r2, r2, #16
 8003590:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b10      	cmp	r3, #16
 800359e:	d10a      	bne.n	80035b6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff fe68 	bl	8003292 <HAL_UARTEx_RxEventCallback>
 80035c2:	e002      	b.n	80035ca <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff fe52 	bl	800326e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	e002      	b.n	80035d4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e000      	b.n	80035d4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
  }
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003616:	f023 030c 	bic.w	r3, r3, #12
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	430b      	orrs	r3, r1
 8003622:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a2c      	ldr	r2, [pc, #176]	; (80036f0 <UART_SetConfig+0x114>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d103      	bne.n	800364c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003644:	f7fe ff6a 	bl	800251c <HAL_RCC_GetPCLK2Freq>
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	e002      	b.n	8003652 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800364c:	f7fe ff52 	bl	80024f4 <HAL_RCC_GetPCLK1Freq>
 8003650:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	009a      	lsls	r2, r3, #2
 800365c:	441a      	add	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <UART_SetConfig+0x118>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	0119      	lsls	r1, r3, #4
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	009a      	lsls	r2, r3, #2
 800367c:	441a      	add	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	fbb2 f2f3 	udiv	r2, r2, r3
 8003688:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <UART_SetConfig+0x118>)
 800368a:	fba3 0302 	umull	r0, r3, r3, r2
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2064      	movs	r0, #100	; 0x64
 8003692:	fb00 f303 	mul.w	r3, r0, r3
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	3332      	adds	r3, #50	; 0x32
 800369c:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <UART_SetConfig+0x118>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a8:	4419      	add	r1, r3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	009a      	lsls	r2, r3, #2
 80036b4:	441a      	add	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <UART_SetConfig+0x118>)
 80036c2:	fba3 0302 	umull	r0, r3, r3, r2
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2064      	movs	r0, #100	; 0x64
 80036ca:	fb00 f303 	mul.w	r3, r0, r3
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	3332      	adds	r3, #50	; 0x32
 80036d4:	4a07      	ldr	r2, [pc, #28]	; (80036f4 <UART_SetConfig+0x118>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	f003 020f 	and.w	r2, r3, #15
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	440a      	add	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40013800 	.word	0x40013800
 80036f4:	51eb851f 	.word	0x51eb851f

080036f8 <__errno>:
 80036f8:	4b01      	ldr	r3, [pc, #4]	; (8003700 <__errno+0x8>)
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000024 	.word	0x20000024

08003704 <__libc_init_array>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	2600      	movs	r6, #0
 8003708:	4d0c      	ldr	r5, [pc, #48]	; (800373c <__libc_init_array+0x38>)
 800370a:	4c0d      	ldr	r4, [pc, #52]	; (8003740 <__libc_init_array+0x3c>)
 800370c:	1b64      	subs	r4, r4, r5
 800370e:	10a4      	asrs	r4, r4, #2
 8003710:	42a6      	cmp	r6, r4
 8003712:	d109      	bne.n	8003728 <__libc_init_array+0x24>
 8003714:	f000 fc5c 	bl	8003fd0 <_init>
 8003718:	2600      	movs	r6, #0
 800371a:	4d0a      	ldr	r5, [pc, #40]	; (8003744 <__libc_init_array+0x40>)
 800371c:	4c0a      	ldr	r4, [pc, #40]	; (8003748 <__libc_init_array+0x44>)
 800371e:	1b64      	subs	r4, r4, r5
 8003720:	10a4      	asrs	r4, r4, #2
 8003722:	42a6      	cmp	r6, r4
 8003724:	d105      	bne.n	8003732 <__libc_init_array+0x2e>
 8003726:	bd70      	pop	{r4, r5, r6, pc}
 8003728:	f855 3b04 	ldr.w	r3, [r5], #4
 800372c:	4798      	blx	r3
 800372e:	3601      	adds	r6, #1
 8003730:	e7ee      	b.n	8003710 <__libc_init_array+0xc>
 8003732:	f855 3b04 	ldr.w	r3, [r5], #4
 8003736:	4798      	blx	r3
 8003738:	3601      	adds	r6, #1
 800373a:	e7f2      	b.n	8003722 <__libc_init_array+0x1e>
 800373c:	0800407c 	.word	0x0800407c
 8003740:	0800407c 	.word	0x0800407c
 8003744:	0800407c 	.word	0x0800407c
 8003748:	08004080 	.word	0x08004080

0800374c <memset>:
 800374c:	4603      	mov	r3, r0
 800374e:	4402      	add	r2, r0
 8003750:	4293      	cmp	r3, r2
 8003752:	d100      	bne.n	8003756 <memset+0xa>
 8003754:	4770      	bx	lr
 8003756:	f803 1b01 	strb.w	r1, [r3], #1
 800375a:	e7f9      	b.n	8003750 <memset+0x4>

0800375c <siprintf>:
 800375c:	b40e      	push	{r1, r2, r3}
 800375e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003762:	b500      	push	{lr}
 8003764:	b09c      	sub	sp, #112	; 0x70
 8003766:	ab1d      	add	r3, sp, #116	; 0x74
 8003768:	9002      	str	r0, [sp, #8]
 800376a:	9006      	str	r0, [sp, #24]
 800376c:	9107      	str	r1, [sp, #28]
 800376e:	9104      	str	r1, [sp, #16]
 8003770:	4808      	ldr	r0, [pc, #32]	; (8003794 <siprintf+0x38>)
 8003772:	4909      	ldr	r1, [pc, #36]	; (8003798 <siprintf+0x3c>)
 8003774:	f853 2b04 	ldr.w	r2, [r3], #4
 8003778:	9105      	str	r1, [sp, #20]
 800377a:	6800      	ldr	r0, [r0, #0]
 800377c:	a902      	add	r1, sp, #8
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	f000 f868 	bl	8003854 <_svfiprintf_r>
 8003784:	2200      	movs	r2, #0
 8003786:	9b02      	ldr	r3, [sp, #8]
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	b01c      	add	sp, #112	; 0x70
 800378c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003790:	b003      	add	sp, #12
 8003792:	4770      	bx	lr
 8003794:	20000024 	.word	0x20000024
 8003798:	ffff0208 	.word	0xffff0208

0800379c <__ssputs_r>:
 800379c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a0:	688e      	ldr	r6, [r1, #8]
 80037a2:	4682      	mov	sl, r0
 80037a4:	429e      	cmp	r6, r3
 80037a6:	460c      	mov	r4, r1
 80037a8:	4690      	mov	r8, r2
 80037aa:	461f      	mov	r7, r3
 80037ac:	d838      	bhi.n	8003820 <__ssputs_r+0x84>
 80037ae:	898a      	ldrh	r2, [r1, #12]
 80037b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037b4:	d032      	beq.n	800381c <__ssputs_r+0x80>
 80037b6:	6825      	ldr	r5, [r4, #0]
 80037b8:	6909      	ldr	r1, [r1, #16]
 80037ba:	3301      	adds	r3, #1
 80037bc:	eba5 0901 	sub.w	r9, r5, r1
 80037c0:	6965      	ldr	r5, [r4, #20]
 80037c2:	444b      	add	r3, r9
 80037c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037cc:	106d      	asrs	r5, r5, #1
 80037ce:	429d      	cmp	r5, r3
 80037d0:	bf38      	it	cc
 80037d2:	461d      	movcc	r5, r3
 80037d4:	0553      	lsls	r3, r2, #21
 80037d6:	d531      	bpl.n	800383c <__ssputs_r+0xa0>
 80037d8:	4629      	mov	r1, r5
 80037da:	f000 fb53 	bl	8003e84 <_malloc_r>
 80037de:	4606      	mov	r6, r0
 80037e0:	b950      	cbnz	r0, 80037f8 <__ssputs_r+0x5c>
 80037e2:	230c      	movs	r3, #12
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	f8ca 3000 	str.w	r3, [sl]
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f2:	81a3      	strh	r3, [r4, #12]
 80037f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037f8:	464a      	mov	r2, r9
 80037fa:	6921      	ldr	r1, [r4, #16]
 80037fc:	f000 face 	bl	8003d9c <memcpy>
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800380a:	81a3      	strh	r3, [r4, #12]
 800380c:	6126      	str	r6, [r4, #16]
 800380e:	444e      	add	r6, r9
 8003810:	6026      	str	r6, [r4, #0]
 8003812:	463e      	mov	r6, r7
 8003814:	6165      	str	r5, [r4, #20]
 8003816:	eba5 0509 	sub.w	r5, r5, r9
 800381a:	60a5      	str	r5, [r4, #8]
 800381c:	42be      	cmp	r6, r7
 800381e:	d900      	bls.n	8003822 <__ssputs_r+0x86>
 8003820:	463e      	mov	r6, r7
 8003822:	4632      	mov	r2, r6
 8003824:	4641      	mov	r1, r8
 8003826:	6820      	ldr	r0, [r4, #0]
 8003828:	f000 fac6 	bl	8003db8 <memmove>
 800382c:	68a3      	ldr	r3, [r4, #8]
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	1b9b      	subs	r3, r3, r6
 8003832:	4432      	add	r2, r6
 8003834:	2000      	movs	r0, #0
 8003836:	60a3      	str	r3, [r4, #8]
 8003838:	6022      	str	r2, [r4, #0]
 800383a:	e7db      	b.n	80037f4 <__ssputs_r+0x58>
 800383c:	462a      	mov	r2, r5
 800383e:	f000 fb7b 	bl	8003f38 <_realloc_r>
 8003842:	4606      	mov	r6, r0
 8003844:	2800      	cmp	r0, #0
 8003846:	d1e1      	bne.n	800380c <__ssputs_r+0x70>
 8003848:	4650      	mov	r0, sl
 800384a:	6921      	ldr	r1, [r4, #16]
 800384c:	f000 face 	bl	8003dec <_free_r>
 8003850:	e7c7      	b.n	80037e2 <__ssputs_r+0x46>
	...

08003854 <_svfiprintf_r>:
 8003854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003858:	4698      	mov	r8, r3
 800385a:	898b      	ldrh	r3, [r1, #12]
 800385c:	4607      	mov	r7, r0
 800385e:	061b      	lsls	r3, r3, #24
 8003860:	460d      	mov	r5, r1
 8003862:	4614      	mov	r4, r2
 8003864:	b09d      	sub	sp, #116	; 0x74
 8003866:	d50e      	bpl.n	8003886 <_svfiprintf_r+0x32>
 8003868:	690b      	ldr	r3, [r1, #16]
 800386a:	b963      	cbnz	r3, 8003886 <_svfiprintf_r+0x32>
 800386c:	2140      	movs	r1, #64	; 0x40
 800386e:	f000 fb09 	bl	8003e84 <_malloc_r>
 8003872:	6028      	str	r0, [r5, #0]
 8003874:	6128      	str	r0, [r5, #16]
 8003876:	b920      	cbnz	r0, 8003882 <_svfiprintf_r+0x2e>
 8003878:	230c      	movs	r3, #12
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	f04f 30ff 	mov.w	r0, #4294967295
 8003880:	e0d1      	b.n	8003a26 <_svfiprintf_r+0x1d2>
 8003882:	2340      	movs	r3, #64	; 0x40
 8003884:	616b      	str	r3, [r5, #20]
 8003886:	2300      	movs	r3, #0
 8003888:	9309      	str	r3, [sp, #36]	; 0x24
 800388a:	2320      	movs	r3, #32
 800388c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003890:	2330      	movs	r3, #48	; 0x30
 8003892:	f04f 0901 	mov.w	r9, #1
 8003896:	f8cd 800c 	str.w	r8, [sp, #12]
 800389a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a40 <_svfiprintf_r+0x1ec>
 800389e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038a2:	4623      	mov	r3, r4
 80038a4:	469a      	mov	sl, r3
 80038a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038aa:	b10a      	cbz	r2, 80038b0 <_svfiprintf_r+0x5c>
 80038ac:	2a25      	cmp	r2, #37	; 0x25
 80038ae:	d1f9      	bne.n	80038a4 <_svfiprintf_r+0x50>
 80038b0:	ebba 0b04 	subs.w	fp, sl, r4
 80038b4:	d00b      	beq.n	80038ce <_svfiprintf_r+0x7a>
 80038b6:	465b      	mov	r3, fp
 80038b8:	4622      	mov	r2, r4
 80038ba:	4629      	mov	r1, r5
 80038bc:	4638      	mov	r0, r7
 80038be:	f7ff ff6d 	bl	800379c <__ssputs_r>
 80038c2:	3001      	adds	r0, #1
 80038c4:	f000 80aa 	beq.w	8003a1c <_svfiprintf_r+0x1c8>
 80038c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038ca:	445a      	add	r2, fp
 80038cc:	9209      	str	r2, [sp, #36]	; 0x24
 80038ce:	f89a 3000 	ldrb.w	r3, [sl]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80a2 	beq.w	8003a1c <_svfiprintf_r+0x1c8>
 80038d8:	2300      	movs	r3, #0
 80038da:	f04f 32ff 	mov.w	r2, #4294967295
 80038de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038e2:	f10a 0a01 	add.w	sl, sl, #1
 80038e6:	9304      	str	r3, [sp, #16]
 80038e8:	9307      	str	r3, [sp, #28]
 80038ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038ee:	931a      	str	r3, [sp, #104]	; 0x68
 80038f0:	4654      	mov	r4, sl
 80038f2:	2205      	movs	r2, #5
 80038f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038f8:	4851      	ldr	r0, [pc, #324]	; (8003a40 <_svfiprintf_r+0x1ec>)
 80038fa:	f000 fa41 	bl	8003d80 <memchr>
 80038fe:	9a04      	ldr	r2, [sp, #16]
 8003900:	b9d8      	cbnz	r0, 800393a <_svfiprintf_r+0xe6>
 8003902:	06d0      	lsls	r0, r2, #27
 8003904:	bf44      	itt	mi
 8003906:	2320      	movmi	r3, #32
 8003908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800390c:	0711      	lsls	r1, r2, #28
 800390e:	bf44      	itt	mi
 8003910:	232b      	movmi	r3, #43	; 0x2b
 8003912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003916:	f89a 3000 	ldrb.w	r3, [sl]
 800391a:	2b2a      	cmp	r3, #42	; 0x2a
 800391c:	d015      	beq.n	800394a <_svfiprintf_r+0xf6>
 800391e:	4654      	mov	r4, sl
 8003920:	2000      	movs	r0, #0
 8003922:	f04f 0c0a 	mov.w	ip, #10
 8003926:	9a07      	ldr	r2, [sp, #28]
 8003928:	4621      	mov	r1, r4
 800392a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800392e:	3b30      	subs	r3, #48	; 0x30
 8003930:	2b09      	cmp	r3, #9
 8003932:	d94e      	bls.n	80039d2 <_svfiprintf_r+0x17e>
 8003934:	b1b0      	cbz	r0, 8003964 <_svfiprintf_r+0x110>
 8003936:	9207      	str	r2, [sp, #28]
 8003938:	e014      	b.n	8003964 <_svfiprintf_r+0x110>
 800393a:	eba0 0308 	sub.w	r3, r0, r8
 800393e:	fa09 f303 	lsl.w	r3, r9, r3
 8003942:	4313      	orrs	r3, r2
 8003944:	46a2      	mov	sl, r4
 8003946:	9304      	str	r3, [sp, #16]
 8003948:	e7d2      	b.n	80038f0 <_svfiprintf_r+0x9c>
 800394a:	9b03      	ldr	r3, [sp, #12]
 800394c:	1d19      	adds	r1, r3, #4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	9103      	str	r1, [sp, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	bfbb      	ittet	lt
 8003956:	425b      	neglt	r3, r3
 8003958:	f042 0202 	orrlt.w	r2, r2, #2
 800395c:	9307      	strge	r3, [sp, #28]
 800395e:	9307      	strlt	r3, [sp, #28]
 8003960:	bfb8      	it	lt
 8003962:	9204      	strlt	r2, [sp, #16]
 8003964:	7823      	ldrb	r3, [r4, #0]
 8003966:	2b2e      	cmp	r3, #46	; 0x2e
 8003968:	d10c      	bne.n	8003984 <_svfiprintf_r+0x130>
 800396a:	7863      	ldrb	r3, [r4, #1]
 800396c:	2b2a      	cmp	r3, #42	; 0x2a
 800396e:	d135      	bne.n	80039dc <_svfiprintf_r+0x188>
 8003970:	9b03      	ldr	r3, [sp, #12]
 8003972:	3402      	adds	r4, #2
 8003974:	1d1a      	adds	r2, r3, #4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	9203      	str	r2, [sp, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	bfb8      	it	lt
 800397e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003982:	9305      	str	r3, [sp, #20]
 8003984:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a50 <_svfiprintf_r+0x1fc>
 8003988:	2203      	movs	r2, #3
 800398a:	4650      	mov	r0, sl
 800398c:	7821      	ldrb	r1, [r4, #0]
 800398e:	f000 f9f7 	bl	8003d80 <memchr>
 8003992:	b140      	cbz	r0, 80039a6 <_svfiprintf_r+0x152>
 8003994:	2340      	movs	r3, #64	; 0x40
 8003996:	eba0 000a 	sub.w	r0, r0, sl
 800399a:	fa03 f000 	lsl.w	r0, r3, r0
 800399e:	9b04      	ldr	r3, [sp, #16]
 80039a0:	3401      	adds	r4, #1
 80039a2:	4303      	orrs	r3, r0
 80039a4:	9304      	str	r3, [sp, #16]
 80039a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039aa:	2206      	movs	r2, #6
 80039ac:	4825      	ldr	r0, [pc, #148]	; (8003a44 <_svfiprintf_r+0x1f0>)
 80039ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039b2:	f000 f9e5 	bl	8003d80 <memchr>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d038      	beq.n	8003a2c <_svfiprintf_r+0x1d8>
 80039ba:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <_svfiprintf_r+0x1f4>)
 80039bc:	bb1b      	cbnz	r3, 8003a06 <_svfiprintf_r+0x1b2>
 80039be:	9b03      	ldr	r3, [sp, #12]
 80039c0:	3307      	adds	r3, #7
 80039c2:	f023 0307 	bic.w	r3, r3, #7
 80039c6:	3308      	adds	r3, #8
 80039c8:	9303      	str	r3, [sp, #12]
 80039ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039cc:	4433      	add	r3, r6
 80039ce:	9309      	str	r3, [sp, #36]	; 0x24
 80039d0:	e767      	b.n	80038a2 <_svfiprintf_r+0x4e>
 80039d2:	460c      	mov	r4, r1
 80039d4:	2001      	movs	r0, #1
 80039d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80039da:	e7a5      	b.n	8003928 <_svfiprintf_r+0xd4>
 80039dc:	2300      	movs	r3, #0
 80039de:	f04f 0c0a 	mov.w	ip, #10
 80039e2:	4619      	mov	r1, r3
 80039e4:	3401      	adds	r4, #1
 80039e6:	9305      	str	r3, [sp, #20]
 80039e8:	4620      	mov	r0, r4
 80039ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039ee:	3a30      	subs	r2, #48	; 0x30
 80039f0:	2a09      	cmp	r2, #9
 80039f2:	d903      	bls.n	80039fc <_svfiprintf_r+0x1a8>
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0c5      	beq.n	8003984 <_svfiprintf_r+0x130>
 80039f8:	9105      	str	r1, [sp, #20]
 80039fa:	e7c3      	b.n	8003984 <_svfiprintf_r+0x130>
 80039fc:	4604      	mov	r4, r0
 80039fe:	2301      	movs	r3, #1
 8003a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a04:	e7f0      	b.n	80039e8 <_svfiprintf_r+0x194>
 8003a06:	ab03      	add	r3, sp, #12
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	462a      	mov	r2, r5
 8003a0c:	4638      	mov	r0, r7
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <_svfiprintf_r+0x1f8>)
 8003a10:	a904      	add	r1, sp, #16
 8003a12:	f3af 8000 	nop.w
 8003a16:	1c42      	adds	r2, r0, #1
 8003a18:	4606      	mov	r6, r0
 8003a1a:	d1d6      	bne.n	80039ca <_svfiprintf_r+0x176>
 8003a1c:	89ab      	ldrh	r3, [r5, #12]
 8003a1e:	065b      	lsls	r3, r3, #25
 8003a20:	f53f af2c 	bmi.w	800387c <_svfiprintf_r+0x28>
 8003a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a26:	b01d      	add	sp, #116	; 0x74
 8003a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a2c:	ab03      	add	r3, sp, #12
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	462a      	mov	r2, r5
 8003a32:	4638      	mov	r0, r7
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <_svfiprintf_r+0x1f8>)
 8003a36:	a904      	add	r1, sp, #16
 8003a38:	f000 f87c 	bl	8003b34 <_printf_i>
 8003a3c:	e7eb      	b.n	8003a16 <_svfiprintf_r+0x1c2>
 8003a3e:	bf00      	nop
 8003a40:	08004048 	.word	0x08004048
 8003a44:	08004052 	.word	0x08004052
 8003a48:	00000000 	.word	0x00000000
 8003a4c:	0800379d 	.word	0x0800379d
 8003a50:	0800404e 	.word	0x0800404e

08003a54 <_printf_common>:
 8003a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a58:	4616      	mov	r6, r2
 8003a5a:	4699      	mov	r9, r3
 8003a5c:	688a      	ldr	r2, [r1, #8]
 8003a5e:	690b      	ldr	r3, [r1, #16]
 8003a60:	4607      	mov	r7, r0
 8003a62:	4293      	cmp	r3, r2
 8003a64:	bfb8      	it	lt
 8003a66:	4613      	movlt	r3, r2
 8003a68:	6033      	str	r3, [r6, #0]
 8003a6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a6e:	460c      	mov	r4, r1
 8003a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a74:	b10a      	cbz	r2, 8003a7a <_printf_common+0x26>
 8003a76:	3301      	adds	r3, #1
 8003a78:	6033      	str	r3, [r6, #0]
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	0699      	lsls	r1, r3, #26
 8003a7e:	bf42      	ittt	mi
 8003a80:	6833      	ldrmi	r3, [r6, #0]
 8003a82:	3302      	addmi	r3, #2
 8003a84:	6033      	strmi	r3, [r6, #0]
 8003a86:	6825      	ldr	r5, [r4, #0]
 8003a88:	f015 0506 	ands.w	r5, r5, #6
 8003a8c:	d106      	bne.n	8003a9c <_printf_common+0x48>
 8003a8e:	f104 0a19 	add.w	sl, r4, #25
 8003a92:	68e3      	ldr	r3, [r4, #12]
 8003a94:	6832      	ldr	r2, [r6, #0]
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	42ab      	cmp	r3, r5
 8003a9a:	dc28      	bgt.n	8003aee <_printf_common+0x9a>
 8003a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003aa0:	1e13      	subs	r3, r2, #0
 8003aa2:	6822      	ldr	r2, [r4, #0]
 8003aa4:	bf18      	it	ne
 8003aa6:	2301      	movne	r3, #1
 8003aa8:	0692      	lsls	r2, r2, #26
 8003aaa:	d42d      	bmi.n	8003b08 <_printf_common+0xb4>
 8003aac:	4649      	mov	r1, r9
 8003aae:	4638      	mov	r0, r7
 8003ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ab4:	47c0      	blx	r8
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	d020      	beq.n	8003afc <_printf_common+0xa8>
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	68e5      	ldr	r5, [r4, #12]
 8003abe:	f003 0306 	and.w	r3, r3, #6
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	bf18      	it	ne
 8003ac6:	2500      	movne	r5, #0
 8003ac8:	6832      	ldr	r2, [r6, #0]
 8003aca:	f04f 0600 	mov.w	r6, #0
 8003ace:	68a3      	ldr	r3, [r4, #8]
 8003ad0:	bf08      	it	eq
 8003ad2:	1aad      	subeq	r5, r5, r2
 8003ad4:	6922      	ldr	r2, [r4, #16]
 8003ad6:	bf08      	it	eq
 8003ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003adc:	4293      	cmp	r3, r2
 8003ade:	bfc4      	itt	gt
 8003ae0:	1a9b      	subgt	r3, r3, r2
 8003ae2:	18ed      	addgt	r5, r5, r3
 8003ae4:	341a      	adds	r4, #26
 8003ae6:	42b5      	cmp	r5, r6
 8003ae8:	d11a      	bne.n	8003b20 <_printf_common+0xcc>
 8003aea:	2000      	movs	r0, #0
 8003aec:	e008      	b.n	8003b00 <_printf_common+0xac>
 8003aee:	2301      	movs	r3, #1
 8003af0:	4652      	mov	r2, sl
 8003af2:	4649      	mov	r1, r9
 8003af4:	4638      	mov	r0, r7
 8003af6:	47c0      	blx	r8
 8003af8:	3001      	adds	r0, #1
 8003afa:	d103      	bne.n	8003b04 <_printf_common+0xb0>
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295
 8003b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b04:	3501      	adds	r5, #1
 8003b06:	e7c4      	b.n	8003a92 <_printf_common+0x3e>
 8003b08:	2030      	movs	r0, #48	; 0x30
 8003b0a:	18e1      	adds	r1, r4, r3
 8003b0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b16:	4422      	add	r2, r4
 8003b18:	3302      	adds	r3, #2
 8003b1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b1e:	e7c5      	b.n	8003aac <_printf_common+0x58>
 8003b20:	2301      	movs	r3, #1
 8003b22:	4622      	mov	r2, r4
 8003b24:	4649      	mov	r1, r9
 8003b26:	4638      	mov	r0, r7
 8003b28:	47c0      	blx	r8
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	d0e6      	beq.n	8003afc <_printf_common+0xa8>
 8003b2e:	3601      	adds	r6, #1
 8003b30:	e7d9      	b.n	8003ae6 <_printf_common+0x92>
	...

08003b34 <_printf_i>:
 8003b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b38:	460c      	mov	r4, r1
 8003b3a:	7e27      	ldrb	r7, [r4, #24]
 8003b3c:	4691      	mov	r9, r2
 8003b3e:	2f78      	cmp	r7, #120	; 0x78
 8003b40:	4680      	mov	r8, r0
 8003b42:	469a      	mov	sl, r3
 8003b44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b4a:	d807      	bhi.n	8003b5c <_printf_i+0x28>
 8003b4c:	2f62      	cmp	r7, #98	; 0x62
 8003b4e:	d80a      	bhi.n	8003b66 <_printf_i+0x32>
 8003b50:	2f00      	cmp	r7, #0
 8003b52:	f000 80d9 	beq.w	8003d08 <_printf_i+0x1d4>
 8003b56:	2f58      	cmp	r7, #88	; 0x58
 8003b58:	f000 80a4 	beq.w	8003ca4 <_printf_i+0x170>
 8003b5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b64:	e03a      	b.n	8003bdc <_printf_i+0xa8>
 8003b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b6a:	2b15      	cmp	r3, #21
 8003b6c:	d8f6      	bhi.n	8003b5c <_printf_i+0x28>
 8003b6e:	a001      	add	r0, pc, #4	; (adr r0, 8003b74 <_printf_i+0x40>)
 8003b70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b74:	08003bcd 	.word	0x08003bcd
 8003b78:	08003be1 	.word	0x08003be1
 8003b7c:	08003b5d 	.word	0x08003b5d
 8003b80:	08003b5d 	.word	0x08003b5d
 8003b84:	08003b5d 	.word	0x08003b5d
 8003b88:	08003b5d 	.word	0x08003b5d
 8003b8c:	08003be1 	.word	0x08003be1
 8003b90:	08003b5d 	.word	0x08003b5d
 8003b94:	08003b5d 	.word	0x08003b5d
 8003b98:	08003b5d 	.word	0x08003b5d
 8003b9c:	08003b5d 	.word	0x08003b5d
 8003ba0:	08003cef 	.word	0x08003cef
 8003ba4:	08003c11 	.word	0x08003c11
 8003ba8:	08003cd1 	.word	0x08003cd1
 8003bac:	08003b5d 	.word	0x08003b5d
 8003bb0:	08003b5d 	.word	0x08003b5d
 8003bb4:	08003d11 	.word	0x08003d11
 8003bb8:	08003b5d 	.word	0x08003b5d
 8003bbc:	08003c11 	.word	0x08003c11
 8003bc0:	08003b5d 	.word	0x08003b5d
 8003bc4:	08003b5d 	.word	0x08003b5d
 8003bc8:	08003cd9 	.word	0x08003cd9
 8003bcc:	680b      	ldr	r3, [r1, #0]
 8003bce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003bd2:	1d1a      	adds	r2, r3, #4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	600a      	str	r2, [r1, #0]
 8003bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0a4      	b.n	8003d2a <_printf_i+0x1f6>
 8003be0:	6825      	ldr	r5, [r4, #0]
 8003be2:	6808      	ldr	r0, [r1, #0]
 8003be4:	062e      	lsls	r6, r5, #24
 8003be6:	f100 0304 	add.w	r3, r0, #4
 8003bea:	d50a      	bpl.n	8003c02 <_printf_i+0xce>
 8003bec:	6805      	ldr	r5, [r0, #0]
 8003bee:	600b      	str	r3, [r1, #0]
 8003bf0:	2d00      	cmp	r5, #0
 8003bf2:	da03      	bge.n	8003bfc <_printf_i+0xc8>
 8003bf4:	232d      	movs	r3, #45	; 0x2d
 8003bf6:	426d      	negs	r5, r5
 8003bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bfc:	230a      	movs	r3, #10
 8003bfe:	485e      	ldr	r0, [pc, #376]	; (8003d78 <_printf_i+0x244>)
 8003c00:	e019      	b.n	8003c36 <_printf_i+0x102>
 8003c02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c06:	6805      	ldr	r5, [r0, #0]
 8003c08:	600b      	str	r3, [r1, #0]
 8003c0a:	bf18      	it	ne
 8003c0c:	b22d      	sxthne	r5, r5
 8003c0e:	e7ef      	b.n	8003bf0 <_printf_i+0xbc>
 8003c10:	680b      	ldr	r3, [r1, #0]
 8003c12:	6825      	ldr	r5, [r4, #0]
 8003c14:	1d18      	adds	r0, r3, #4
 8003c16:	6008      	str	r0, [r1, #0]
 8003c18:	0628      	lsls	r0, r5, #24
 8003c1a:	d501      	bpl.n	8003c20 <_printf_i+0xec>
 8003c1c:	681d      	ldr	r5, [r3, #0]
 8003c1e:	e002      	b.n	8003c26 <_printf_i+0xf2>
 8003c20:	0669      	lsls	r1, r5, #25
 8003c22:	d5fb      	bpl.n	8003c1c <_printf_i+0xe8>
 8003c24:	881d      	ldrh	r5, [r3, #0]
 8003c26:	2f6f      	cmp	r7, #111	; 0x6f
 8003c28:	bf0c      	ite	eq
 8003c2a:	2308      	moveq	r3, #8
 8003c2c:	230a      	movne	r3, #10
 8003c2e:	4852      	ldr	r0, [pc, #328]	; (8003d78 <_printf_i+0x244>)
 8003c30:	2100      	movs	r1, #0
 8003c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c36:	6866      	ldr	r6, [r4, #4]
 8003c38:	2e00      	cmp	r6, #0
 8003c3a:	bfa8      	it	ge
 8003c3c:	6821      	ldrge	r1, [r4, #0]
 8003c3e:	60a6      	str	r6, [r4, #8]
 8003c40:	bfa4      	itt	ge
 8003c42:	f021 0104 	bicge.w	r1, r1, #4
 8003c46:	6021      	strge	r1, [r4, #0]
 8003c48:	b90d      	cbnz	r5, 8003c4e <_printf_i+0x11a>
 8003c4a:	2e00      	cmp	r6, #0
 8003c4c:	d04d      	beq.n	8003cea <_printf_i+0x1b6>
 8003c4e:	4616      	mov	r6, r2
 8003c50:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c54:	fb03 5711 	mls	r7, r3, r1, r5
 8003c58:	5dc7      	ldrb	r7, [r0, r7]
 8003c5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c5e:	462f      	mov	r7, r5
 8003c60:	42bb      	cmp	r3, r7
 8003c62:	460d      	mov	r5, r1
 8003c64:	d9f4      	bls.n	8003c50 <_printf_i+0x11c>
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d10b      	bne.n	8003c82 <_printf_i+0x14e>
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	07df      	lsls	r7, r3, #31
 8003c6e:	d508      	bpl.n	8003c82 <_printf_i+0x14e>
 8003c70:	6923      	ldr	r3, [r4, #16]
 8003c72:	6861      	ldr	r1, [r4, #4]
 8003c74:	4299      	cmp	r1, r3
 8003c76:	bfde      	ittt	le
 8003c78:	2330      	movle	r3, #48	; 0x30
 8003c7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c82:	1b92      	subs	r2, r2, r6
 8003c84:	6122      	str	r2, [r4, #16]
 8003c86:	464b      	mov	r3, r9
 8003c88:	4621      	mov	r1, r4
 8003c8a:	4640      	mov	r0, r8
 8003c8c:	f8cd a000 	str.w	sl, [sp]
 8003c90:	aa03      	add	r2, sp, #12
 8003c92:	f7ff fedf 	bl	8003a54 <_printf_common>
 8003c96:	3001      	adds	r0, #1
 8003c98:	d14c      	bne.n	8003d34 <_printf_i+0x200>
 8003c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9e:	b004      	add	sp, #16
 8003ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca4:	4834      	ldr	r0, [pc, #208]	; (8003d78 <_printf_i+0x244>)
 8003ca6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003caa:	680e      	ldr	r6, [r1, #0]
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	f856 5b04 	ldr.w	r5, [r6], #4
 8003cb2:	061f      	lsls	r7, r3, #24
 8003cb4:	600e      	str	r6, [r1, #0]
 8003cb6:	d514      	bpl.n	8003ce2 <_printf_i+0x1ae>
 8003cb8:	07d9      	lsls	r1, r3, #31
 8003cba:	bf44      	itt	mi
 8003cbc:	f043 0320 	orrmi.w	r3, r3, #32
 8003cc0:	6023      	strmi	r3, [r4, #0]
 8003cc2:	b91d      	cbnz	r5, 8003ccc <_printf_i+0x198>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	f023 0320 	bic.w	r3, r3, #32
 8003cca:	6023      	str	r3, [r4, #0]
 8003ccc:	2310      	movs	r3, #16
 8003cce:	e7af      	b.n	8003c30 <_printf_i+0xfc>
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	f043 0320 	orr.w	r3, r3, #32
 8003cd6:	6023      	str	r3, [r4, #0]
 8003cd8:	2378      	movs	r3, #120	; 0x78
 8003cda:	4828      	ldr	r0, [pc, #160]	; (8003d7c <_printf_i+0x248>)
 8003cdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ce0:	e7e3      	b.n	8003caa <_printf_i+0x176>
 8003ce2:	065e      	lsls	r6, r3, #25
 8003ce4:	bf48      	it	mi
 8003ce6:	b2ad      	uxthmi	r5, r5
 8003ce8:	e7e6      	b.n	8003cb8 <_printf_i+0x184>
 8003cea:	4616      	mov	r6, r2
 8003cec:	e7bb      	b.n	8003c66 <_printf_i+0x132>
 8003cee:	680b      	ldr	r3, [r1, #0]
 8003cf0:	6826      	ldr	r6, [r4, #0]
 8003cf2:	1d1d      	adds	r5, r3, #4
 8003cf4:	6960      	ldr	r0, [r4, #20]
 8003cf6:	600d      	str	r5, [r1, #0]
 8003cf8:	0635      	lsls	r5, r6, #24
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	d501      	bpl.n	8003d02 <_printf_i+0x1ce>
 8003cfe:	6018      	str	r0, [r3, #0]
 8003d00:	e002      	b.n	8003d08 <_printf_i+0x1d4>
 8003d02:	0671      	lsls	r1, r6, #25
 8003d04:	d5fb      	bpl.n	8003cfe <_printf_i+0x1ca>
 8003d06:	8018      	strh	r0, [r3, #0]
 8003d08:	2300      	movs	r3, #0
 8003d0a:	4616      	mov	r6, r2
 8003d0c:	6123      	str	r3, [r4, #16]
 8003d0e:	e7ba      	b.n	8003c86 <_printf_i+0x152>
 8003d10:	680b      	ldr	r3, [r1, #0]
 8003d12:	1d1a      	adds	r2, r3, #4
 8003d14:	600a      	str	r2, [r1, #0]
 8003d16:	681e      	ldr	r6, [r3, #0]
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	6862      	ldr	r2, [r4, #4]
 8003d1e:	f000 f82f 	bl	8003d80 <memchr>
 8003d22:	b108      	cbz	r0, 8003d28 <_printf_i+0x1f4>
 8003d24:	1b80      	subs	r0, r0, r6
 8003d26:	6060      	str	r0, [r4, #4]
 8003d28:	6863      	ldr	r3, [r4, #4]
 8003d2a:	6123      	str	r3, [r4, #16]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d32:	e7a8      	b.n	8003c86 <_printf_i+0x152>
 8003d34:	4632      	mov	r2, r6
 8003d36:	4649      	mov	r1, r9
 8003d38:	4640      	mov	r0, r8
 8003d3a:	6923      	ldr	r3, [r4, #16]
 8003d3c:	47d0      	blx	sl
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d0ab      	beq.n	8003c9a <_printf_i+0x166>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	079b      	lsls	r3, r3, #30
 8003d46:	d413      	bmi.n	8003d70 <_printf_i+0x23c>
 8003d48:	68e0      	ldr	r0, [r4, #12]
 8003d4a:	9b03      	ldr	r3, [sp, #12]
 8003d4c:	4298      	cmp	r0, r3
 8003d4e:	bfb8      	it	lt
 8003d50:	4618      	movlt	r0, r3
 8003d52:	e7a4      	b.n	8003c9e <_printf_i+0x16a>
 8003d54:	2301      	movs	r3, #1
 8003d56:	4632      	mov	r2, r6
 8003d58:	4649      	mov	r1, r9
 8003d5a:	4640      	mov	r0, r8
 8003d5c:	47d0      	blx	sl
 8003d5e:	3001      	adds	r0, #1
 8003d60:	d09b      	beq.n	8003c9a <_printf_i+0x166>
 8003d62:	3501      	adds	r5, #1
 8003d64:	68e3      	ldr	r3, [r4, #12]
 8003d66:	9903      	ldr	r1, [sp, #12]
 8003d68:	1a5b      	subs	r3, r3, r1
 8003d6a:	42ab      	cmp	r3, r5
 8003d6c:	dcf2      	bgt.n	8003d54 <_printf_i+0x220>
 8003d6e:	e7eb      	b.n	8003d48 <_printf_i+0x214>
 8003d70:	2500      	movs	r5, #0
 8003d72:	f104 0619 	add.w	r6, r4, #25
 8003d76:	e7f5      	b.n	8003d64 <_printf_i+0x230>
 8003d78:	08004059 	.word	0x08004059
 8003d7c:	0800406a 	.word	0x0800406a

08003d80 <memchr>:
 8003d80:	4603      	mov	r3, r0
 8003d82:	b510      	push	{r4, lr}
 8003d84:	b2c9      	uxtb	r1, r1
 8003d86:	4402      	add	r2, r0
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	d101      	bne.n	8003d92 <memchr+0x12>
 8003d8e:	2000      	movs	r0, #0
 8003d90:	e003      	b.n	8003d9a <memchr+0x1a>
 8003d92:	7804      	ldrb	r4, [r0, #0]
 8003d94:	3301      	adds	r3, #1
 8003d96:	428c      	cmp	r4, r1
 8003d98:	d1f6      	bne.n	8003d88 <memchr+0x8>
 8003d9a:	bd10      	pop	{r4, pc}

08003d9c <memcpy>:
 8003d9c:	440a      	add	r2, r1
 8003d9e:	4291      	cmp	r1, r2
 8003da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003da4:	d100      	bne.n	8003da8 <memcpy+0xc>
 8003da6:	4770      	bx	lr
 8003da8:	b510      	push	{r4, lr}
 8003daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dae:	4291      	cmp	r1, r2
 8003db0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003db4:	d1f9      	bne.n	8003daa <memcpy+0xe>
 8003db6:	bd10      	pop	{r4, pc}

08003db8 <memmove>:
 8003db8:	4288      	cmp	r0, r1
 8003dba:	b510      	push	{r4, lr}
 8003dbc:	eb01 0402 	add.w	r4, r1, r2
 8003dc0:	d902      	bls.n	8003dc8 <memmove+0x10>
 8003dc2:	4284      	cmp	r4, r0
 8003dc4:	4623      	mov	r3, r4
 8003dc6:	d807      	bhi.n	8003dd8 <memmove+0x20>
 8003dc8:	1e43      	subs	r3, r0, #1
 8003dca:	42a1      	cmp	r1, r4
 8003dcc:	d008      	beq.n	8003de0 <memmove+0x28>
 8003dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dd6:	e7f8      	b.n	8003dca <memmove+0x12>
 8003dd8:	4601      	mov	r1, r0
 8003dda:	4402      	add	r2, r0
 8003ddc:	428a      	cmp	r2, r1
 8003dde:	d100      	bne.n	8003de2 <memmove+0x2a>
 8003de0:	bd10      	pop	{r4, pc}
 8003de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003dea:	e7f7      	b.n	8003ddc <memmove+0x24>

08003dec <_free_r>:
 8003dec:	b538      	push	{r3, r4, r5, lr}
 8003dee:	4605      	mov	r5, r0
 8003df0:	2900      	cmp	r1, #0
 8003df2:	d043      	beq.n	8003e7c <_free_r+0x90>
 8003df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003df8:	1f0c      	subs	r4, r1, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	bfb8      	it	lt
 8003dfe:	18e4      	addlt	r4, r4, r3
 8003e00:	f000 f8d0 	bl	8003fa4 <__malloc_lock>
 8003e04:	4a1e      	ldr	r2, [pc, #120]	; (8003e80 <_free_r+0x94>)
 8003e06:	6813      	ldr	r3, [r2, #0]
 8003e08:	4610      	mov	r0, r2
 8003e0a:	b933      	cbnz	r3, 8003e1a <_free_r+0x2e>
 8003e0c:	6063      	str	r3, [r4, #4]
 8003e0e:	6014      	str	r4, [r2, #0]
 8003e10:	4628      	mov	r0, r5
 8003e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e16:	f000 b8cb 	b.w	8003fb0 <__malloc_unlock>
 8003e1a:	42a3      	cmp	r3, r4
 8003e1c:	d90a      	bls.n	8003e34 <_free_r+0x48>
 8003e1e:	6821      	ldr	r1, [r4, #0]
 8003e20:	1862      	adds	r2, r4, r1
 8003e22:	4293      	cmp	r3, r2
 8003e24:	bf01      	itttt	eq
 8003e26:	681a      	ldreq	r2, [r3, #0]
 8003e28:	685b      	ldreq	r3, [r3, #4]
 8003e2a:	1852      	addeq	r2, r2, r1
 8003e2c:	6022      	streq	r2, [r4, #0]
 8003e2e:	6063      	str	r3, [r4, #4]
 8003e30:	6004      	str	r4, [r0, #0]
 8003e32:	e7ed      	b.n	8003e10 <_free_r+0x24>
 8003e34:	461a      	mov	r2, r3
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	b10b      	cbz	r3, 8003e3e <_free_r+0x52>
 8003e3a:	42a3      	cmp	r3, r4
 8003e3c:	d9fa      	bls.n	8003e34 <_free_r+0x48>
 8003e3e:	6811      	ldr	r1, [r2, #0]
 8003e40:	1850      	adds	r0, r2, r1
 8003e42:	42a0      	cmp	r0, r4
 8003e44:	d10b      	bne.n	8003e5e <_free_r+0x72>
 8003e46:	6820      	ldr	r0, [r4, #0]
 8003e48:	4401      	add	r1, r0
 8003e4a:	1850      	adds	r0, r2, r1
 8003e4c:	4283      	cmp	r3, r0
 8003e4e:	6011      	str	r1, [r2, #0]
 8003e50:	d1de      	bne.n	8003e10 <_free_r+0x24>
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4401      	add	r1, r0
 8003e58:	6011      	str	r1, [r2, #0]
 8003e5a:	6053      	str	r3, [r2, #4]
 8003e5c:	e7d8      	b.n	8003e10 <_free_r+0x24>
 8003e5e:	d902      	bls.n	8003e66 <_free_r+0x7a>
 8003e60:	230c      	movs	r3, #12
 8003e62:	602b      	str	r3, [r5, #0]
 8003e64:	e7d4      	b.n	8003e10 <_free_r+0x24>
 8003e66:	6820      	ldr	r0, [r4, #0]
 8003e68:	1821      	adds	r1, r4, r0
 8003e6a:	428b      	cmp	r3, r1
 8003e6c:	bf01      	itttt	eq
 8003e6e:	6819      	ldreq	r1, [r3, #0]
 8003e70:	685b      	ldreq	r3, [r3, #4]
 8003e72:	1809      	addeq	r1, r1, r0
 8003e74:	6021      	streq	r1, [r4, #0]
 8003e76:	6063      	str	r3, [r4, #4]
 8003e78:	6054      	str	r4, [r2, #4]
 8003e7a:	e7c9      	b.n	8003e10 <_free_r+0x24>
 8003e7c:	bd38      	pop	{r3, r4, r5, pc}
 8003e7e:	bf00      	nop
 8003e80:	200000ec 	.word	0x200000ec

08003e84 <_malloc_r>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	1ccd      	adds	r5, r1, #3
 8003e88:	f025 0503 	bic.w	r5, r5, #3
 8003e8c:	3508      	adds	r5, #8
 8003e8e:	2d0c      	cmp	r5, #12
 8003e90:	bf38      	it	cc
 8003e92:	250c      	movcc	r5, #12
 8003e94:	2d00      	cmp	r5, #0
 8003e96:	4606      	mov	r6, r0
 8003e98:	db01      	blt.n	8003e9e <_malloc_r+0x1a>
 8003e9a:	42a9      	cmp	r1, r5
 8003e9c:	d903      	bls.n	8003ea6 <_malloc_r+0x22>
 8003e9e:	230c      	movs	r3, #12
 8003ea0:	6033      	str	r3, [r6, #0]
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ea6:	f000 f87d 	bl	8003fa4 <__malloc_lock>
 8003eaa:	4921      	ldr	r1, [pc, #132]	; (8003f30 <_malloc_r+0xac>)
 8003eac:	680a      	ldr	r2, [r1, #0]
 8003eae:	4614      	mov	r4, r2
 8003eb0:	b99c      	cbnz	r4, 8003eda <_malloc_r+0x56>
 8003eb2:	4f20      	ldr	r7, [pc, #128]	; (8003f34 <_malloc_r+0xb0>)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	b923      	cbnz	r3, 8003ec2 <_malloc_r+0x3e>
 8003eb8:	4621      	mov	r1, r4
 8003eba:	4630      	mov	r0, r6
 8003ebc:	f000 f862 	bl	8003f84 <_sbrk_r>
 8003ec0:	6038      	str	r0, [r7, #0]
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	f000 f85d 	bl	8003f84 <_sbrk_r>
 8003eca:	1c43      	adds	r3, r0, #1
 8003ecc:	d123      	bne.n	8003f16 <_malloc_r+0x92>
 8003ece:	230c      	movs	r3, #12
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	6033      	str	r3, [r6, #0]
 8003ed4:	f000 f86c 	bl	8003fb0 <__malloc_unlock>
 8003ed8:	e7e3      	b.n	8003ea2 <_malloc_r+0x1e>
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	1b5b      	subs	r3, r3, r5
 8003ede:	d417      	bmi.n	8003f10 <_malloc_r+0x8c>
 8003ee0:	2b0b      	cmp	r3, #11
 8003ee2:	d903      	bls.n	8003eec <_malloc_r+0x68>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	441c      	add	r4, r3
 8003ee8:	6025      	str	r5, [r4, #0]
 8003eea:	e004      	b.n	8003ef6 <_malloc_r+0x72>
 8003eec:	6863      	ldr	r3, [r4, #4]
 8003eee:	42a2      	cmp	r2, r4
 8003ef0:	bf0c      	ite	eq
 8003ef2:	600b      	streq	r3, [r1, #0]
 8003ef4:	6053      	strne	r3, [r2, #4]
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	f000 f85a 	bl	8003fb0 <__malloc_unlock>
 8003efc:	f104 000b 	add.w	r0, r4, #11
 8003f00:	1d23      	adds	r3, r4, #4
 8003f02:	f020 0007 	bic.w	r0, r0, #7
 8003f06:	1ac2      	subs	r2, r0, r3
 8003f08:	d0cc      	beq.n	8003ea4 <_malloc_r+0x20>
 8003f0a:	1a1b      	subs	r3, r3, r0
 8003f0c:	50a3      	str	r3, [r4, r2]
 8003f0e:	e7c9      	b.n	8003ea4 <_malloc_r+0x20>
 8003f10:	4622      	mov	r2, r4
 8003f12:	6864      	ldr	r4, [r4, #4]
 8003f14:	e7cc      	b.n	8003eb0 <_malloc_r+0x2c>
 8003f16:	1cc4      	adds	r4, r0, #3
 8003f18:	f024 0403 	bic.w	r4, r4, #3
 8003f1c:	42a0      	cmp	r0, r4
 8003f1e:	d0e3      	beq.n	8003ee8 <_malloc_r+0x64>
 8003f20:	1a21      	subs	r1, r4, r0
 8003f22:	4630      	mov	r0, r6
 8003f24:	f000 f82e 	bl	8003f84 <_sbrk_r>
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d1dd      	bne.n	8003ee8 <_malloc_r+0x64>
 8003f2c:	e7cf      	b.n	8003ece <_malloc_r+0x4a>
 8003f2e:	bf00      	nop
 8003f30:	200000ec 	.word	0x200000ec
 8003f34:	200000f0 	.word	0x200000f0

08003f38 <_realloc_r>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	4607      	mov	r7, r0
 8003f3c:	4614      	mov	r4, r2
 8003f3e:	460e      	mov	r6, r1
 8003f40:	b921      	cbnz	r1, 8003f4c <_realloc_r+0x14>
 8003f42:	4611      	mov	r1, r2
 8003f44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f48:	f7ff bf9c 	b.w	8003e84 <_malloc_r>
 8003f4c:	b922      	cbnz	r2, 8003f58 <_realloc_r+0x20>
 8003f4e:	f7ff ff4d 	bl	8003dec <_free_r>
 8003f52:	4625      	mov	r5, r4
 8003f54:	4628      	mov	r0, r5
 8003f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f58:	f000 f830 	bl	8003fbc <_malloc_usable_size_r>
 8003f5c:	42a0      	cmp	r0, r4
 8003f5e:	d20f      	bcs.n	8003f80 <_realloc_r+0x48>
 8003f60:	4621      	mov	r1, r4
 8003f62:	4638      	mov	r0, r7
 8003f64:	f7ff ff8e 	bl	8003e84 <_malloc_r>
 8003f68:	4605      	mov	r5, r0
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d0f2      	beq.n	8003f54 <_realloc_r+0x1c>
 8003f6e:	4631      	mov	r1, r6
 8003f70:	4622      	mov	r2, r4
 8003f72:	f7ff ff13 	bl	8003d9c <memcpy>
 8003f76:	4631      	mov	r1, r6
 8003f78:	4638      	mov	r0, r7
 8003f7a:	f7ff ff37 	bl	8003dec <_free_r>
 8003f7e:	e7e9      	b.n	8003f54 <_realloc_r+0x1c>
 8003f80:	4635      	mov	r5, r6
 8003f82:	e7e7      	b.n	8003f54 <_realloc_r+0x1c>

08003f84 <_sbrk_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	2300      	movs	r3, #0
 8003f88:	4d05      	ldr	r5, [pc, #20]	; (8003fa0 <_sbrk_r+0x1c>)
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	602b      	str	r3, [r5, #0]
 8003f90:	f7fd f9f8 	bl	8001384 <_sbrk>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_sbrk_r+0x1a>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_sbrk_r+0x1a>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	200004cc 	.word	0x200004cc

08003fa4 <__malloc_lock>:
 8003fa4:	4801      	ldr	r0, [pc, #4]	; (8003fac <__malloc_lock+0x8>)
 8003fa6:	f000 b811 	b.w	8003fcc <__retarget_lock_acquire_recursive>
 8003faa:	bf00      	nop
 8003fac:	200004d4 	.word	0x200004d4

08003fb0 <__malloc_unlock>:
 8003fb0:	4801      	ldr	r0, [pc, #4]	; (8003fb8 <__malloc_unlock+0x8>)
 8003fb2:	f000 b80c 	b.w	8003fce <__retarget_lock_release_recursive>
 8003fb6:	bf00      	nop
 8003fb8:	200004d4 	.word	0x200004d4

08003fbc <_malloc_usable_size_r>:
 8003fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc0:	1f18      	subs	r0, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bfbc      	itt	lt
 8003fc6:	580b      	ldrlt	r3, [r1, r0]
 8003fc8:	18c0      	addlt	r0, r0, r3
 8003fca:	4770      	bx	lr

08003fcc <__retarget_lock_acquire_recursive>:
 8003fcc:	4770      	bx	lr

08003fce <__retarget_lock_release_recursive>:
 8003fce:	4770      	bx	lr

08003fd0 <_init>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	bf00      	nop
 8003fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd6:	bc08      	pop	{r3}
 8003fd8:	469e      	mov	lr, r3
 8003fda:	4770      	bx	lr

08003fdc <_fini>:
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	bf00      	nop
 8003fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe2:	bc08      	pop	{r3}
 8003fe4:	469e      	mov	lr, r3
 8003fe6:	4770      	bx	lr
