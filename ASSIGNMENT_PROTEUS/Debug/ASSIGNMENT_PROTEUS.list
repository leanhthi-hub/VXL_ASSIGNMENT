
ASSIGNMENT_PROTEUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d2c  08004d2c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08004d2c  08004d2c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d2c  08004d2c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d2c  08004d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d30  08004d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000090  08004dc4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08004dc4  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5df  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e2  00000000  00000000  0002d698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0002f880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00030638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f65  00000000  00000000  00031308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e27a  00000000  00000000  0004926d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088df5  00000000  00000000  000574e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e02dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf4  00000000  00000000  000e0330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c40 	.word	0x08004c40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08004c40 	.word	0x08004c40

0800014c <toogleRed>:
#define ON GPIO_PIN_SET
#define OFF GPIO_PIN_RESET



void toogleRed(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,led1a_Pin, ON);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000156:	4805      	ldr	r0, [pc, #20]	; (800016c <toogleRed+0x20>)
 8000158:	f002 f8b9 	bl	80022ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led1b_Pin, OFF);
 800015c:	2200      	movs	r2, #0
 800015e:	2108      	movs	r1, #8
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <toogleRed+0x24>)
 8000162:	f002 f8b4 	bl	80022ce <HAL_GPIO_WritePin>
}
 8000166:	bf00      	nop
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	40010800 	.word	0x40010800
 8000170:	40010c00 	.word	0x40010c00

08000174 <toogleGreen>:
void toogleGreen(){
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,led1a_Pin, OFF);
 8000178:	2200      	movs	r2, #0
 800017a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800017e:	4805      	ldr	r0, [pc, #20]	; (8000194 <toogleGreen+0x20>)
 8000180:	f002 f8a5 	bl	80022ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led1b_Pin, ON);
 8000184:	2201      	movs	r2, #1
 8000186:	2108      	movs	r1, #8
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <toogleGreen+0x24>)
 800018a:	f002 f8a0 	bl	80022ce <HAL_GPIO_WritePin>
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40010800 	.word	0x40010800
 8000198:	40010c00 	.word	0x40010c00

0800019c <toogleYellow>:
void toogleYellow(){
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,led1a_Pin, ON);
 80001a0:	2201      	movs	r2, #1
 80001a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001a6:	4805      	ldr	r0, [pc, #20]	; (80001bc <toogleYellow+0x20>)
 80001a8:	f002 f891 	bl	80022ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led1b_Pin, ON);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2108      	movs	r1, #8
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <toogleYellow+0x24>)
 80001b2:	f002 f88c 	bl	80022ce <HAL_GPIO_WritePin>
}
 80001b6:	bf00      	nop
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	40010800 	.word	0x40010800
 80001c0:	40010c00 	.word	0x40010c00

080001c4 <toogleRed1>:
void toogleRed1(){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,led2a_Pin, ON);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2120      	movs	r1, #32
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <toogleRed1+0x1c>)
 80001ce:	f002 f87e 	bl	80022ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led2b_Pin, OFF);
 80001d2:	2200      	movs	r2, #0
 80001d4:	2110      	movs	r1, #16
 80001d6:	4802      	ldr	r0, [pc, #8]	; (80001e0 <toogleRed1+0x1c>)
 80001d8:	f002 f879 	bl	80022ce <HAL_GPIO_WritePin>
}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	40010c00 	.word	0x40010c00

080001e4 <toogleGreen1>:
void toogleGreen1(){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,led2a_Pin, OFF);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2120      	movs	r1, #32
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <toogleGreen1+0x1c>)
 80001ee:	f002 f86e 	bl	80022ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led2b_Pin, ON);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2110      	movs	r1, #16
 80001f6:	4802      	ldr	r0, [pc, #8]	; (8000200 <toogleGreen1+0x1c>)
 80001f8:	f002 f869 	bl	80022ce <HAL_GPIO_WritePin>
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	40010c00 	.word	0x40010c00

08000204 <toogleYellow1>:
void toogleYellow1(){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,led2a_Pin, ON);
 8000208:	2201      	movs	r2, #1
 800020a:	2120      	movs	r1, #32
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <toogleYellow1+0x1c>)
 800020e:	f002 f85e 	bl	80022ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,led2b_Pin, ON);
 8000212:	2201      	movs	r2, #1
 8000214:	2110      	movs	r1, #16
 8000216:	4802      	ldr	r0, [pc, #8]	; (8000220 <toogleYellow1+0x1c>)
 8000218:	f002 f859 	bl	80022ce <HAL_GPIO_WritePin>
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	40010c00 	.word	0x40010c00

08000224 <redP>:
void redP(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ledpa_Pin, ON);
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800022e:	4805      	ldr	r0, [pc, #20]	; (8000244 <redP+0x20>)
 8000230:	f002 f84d 	bl	80022ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ledpb_Pin, OFF);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023a:	4803      	ldr	r0, [pc, #12]	; (8000248 <redP+0x24>)
 800023c:	f002 f847 	bl	80022ce <HAL_GPIO_WritePin>
}
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40010c00 	.word	0x40010c00
 8000248:	40010800 	.word	0x40010800

0800024c <greenP>:
void greenP(){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ledpa_Pin, OFF);
 8000250:	2200      	movs	r2, #0
 8000252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000256:	4805      	ldr	r0, [pc, #20]	; (800026c <greenP+0x20>)
 8000258:	f002 f839 	bl	80022ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ledpb_Pin, ON);
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000262:	4803      	ldr	r0, [pc, #12]	; (8000270 <greenP+0x24>)
 8000264:	f002 f833 	bl	80022ce <HAL_GPIO_WritePin>
}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40010c00 	.word	0x40010c00
 8000270:	40010800 	.word	0x40010800

08000274 <offP>:
void offP(){
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ledpa_Pin, OFF);
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <offP+0x20>)
 8000280:	f002 f825 	bl	80022ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ledpb_Pin, OFF);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028a:	4803      	ldr	r0, [pc, #12]	; (8000298 <offP+0x24>)
 800028c:	f002 f81f 	bl	80022ce <HAL_GPIO_WritePin>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40010c00 	.word	0x40010c00
 8000298:	40010800 	.word	0x40010800

0800029c <fsm_automatic_run1>:
void fsm_automatic_run1(){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	switch (status1	) {
 80002a0:	4b31      	ldr	r3, [pc, #196]	; (8000368 <fsm_automatic_run1+0xcc>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a31      	ldr	r2, [pc, #196]	; (800036c <fsm_automatic_run1+0xd0>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d00b      	beq.n	80002c2 <fsm_automatic_run1+0x26>
 80002aa:	4a30      	ldr	r2, [pc, #192]	; (800036c <fsm_automatic_run1+0xd0>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	dc52      	bgt.n	8000356 <fsm_automatic_run1+0xba>
 80002b0:	2b03      	cmp	r3, #3
 80002b2:	d03c      	beq.n	800032e <fsm_automatic_run1+0x92>
 80002b4:	2b03      	cmp	r3, #3
 80002b6:	dc4e      	bgt.n	8000356 <fsm_automatic_run1+0xba>
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d010      	beq.n	80002de <fsm_automatic_run1+0x42>
 80002bc:	2b02      	cmp	r3, #2
 80002be:	d022      	beq.n	8000306 <fsm_automatic_run1+0x6a>
				status1 = AUTO_RED;
				timer=RED_TIME/OneSec;
			}
			break;
		default:
			break;
 80002c0:	e049      	b.n	8000356 <fsm_automatic_run1+0xba>
			status1 = AUTO_RED;
 80002c2:	4b29      	ldr	r3, [pc, #164]	; (8000368 <fsm_automatic_run1+0xcc>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	601a      	str	r2, [r3, #0]
			timer = RED_TIME/OneSec;
 80002c8:	4b29      	ldr	r3, [pc, #164]	; (8000370 <fsm_automatic_run1+0xd4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a29      	ldr	r2, [pc, #164]	; (8000374 <fsm_automatic_run1+0xd8>)
 80002ce:	fb82 1203 	smull	r1, r2, r2, r3
 80002d2:	1152      	asrs	r2, r2, #5
 80002d4:	17db      	asrs	r3, r3, #31
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	4a27      	ldr	r2, [pc, #156]	; (8000378 <fsm_automatic_run1+0xdc>)
 80002da:	6013      	str	r3, [r2, #0]
			break;
 80002dc:	e042      	b.n	8000364 <fsm_automatic_run1+0xc8>
			toogleRed();
 80002de:	f7ff ff35 	bl	800014c <toogleRed>
			if(timer==STOP){
 80002e2:	4b25      	ldr	r3, [pc, #148]	; (8000378 <fsm_automatic_run1+0xdc>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d137      	bne.n	800035a <fsm_automatic_run1+0xbe>
				status1 = AUTO_GREEN;
 80002ea:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <fsm_automatic_run1+0xcc>)
 80002ec:	2202      	movs	r2, #2
 80002ee:	601a      	str	r2, [r3, #0]
				timer=GREEN_TIME/OneSec;
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <fsm_automatic_run1+0xe0>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a1f      	ldr	r2, [pc, #124]	; (8000374 <fsm_automatic_run1+0xd8>)
 80002f6:	fb82 1203 	smull	r1, r2, r2, r3
 80002fa:	1152      	asrs	r2, r2, #5
 80002fc:	17db      	asrs	r3, r3, #31
 80002fe:	1ad3      	subs	r3, r2, r3
 8000300:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <fsm_automatic_run1+0xdc>)
 8000302:	6013      	str	r3, [r2, #0]
			break;
 8000304:	e029      	b.n	800035a <fsm_automatic_run1+0xbe>
			toogleGreen();
 8000306:	f7ff ff35 	bl	8000174 <toogleGreen>
			if(timer==STOP){
 800030a:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <fsm_automatic_run1+0xdc>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d125      	bne.n	800035e <fsm_automatic_run1+0xc2>
				status1 = AUTO_YELLOW;
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <fsm_automatic_run1+0xcc>)
 8000314:	2203      	movs	r2, #3
 8000316:	601a      	str	r2, [r3, #0]
				timer=YELLOW_TIME/OneSec;
 8000318:	4b19      	ldr	r3, [pc, #100]	; (8000380 <fsm_automatic_run1+0xe4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a15      	ldr	r2, [pc, #84]	; (8000374 <fsm_automatic_run1+0xd8>)
 800031e:	fb82 1203 	smull	r1, r2, r2, r3
 8000322:	1152      	asrs	r2, r2, #5
 8000324:	17db      	asrs	r3, r3, #31
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	4a13      	ldr	r2, [pc, #76]	; (8000378 <fsm_automatic_run1+0xdc>)
 800032a:	6013      	str	r3, [r2, #0]
			break;
 800032c:	e017      	b.n	800035e <fsm_automatic_run1+0xc2>
			toogleYellow();
 800032e:	f7ff ff35 	bl	800019c <toogleYellow>
			if(timer==STOP){
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <fsm_automatic_run1+0xdc>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d113      	bne.n	8000362 <fsm_automatic_run1+0xc6>
				status1 = AUTO_RED;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <fsm_automatic_run1+0xcc>)
 800033c:	2201      	movs	r2, #1
 800033e:	601a      	str	r2, [r3, #0]
				timer=RED_TIME/OneSec;
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <fsm_automatic_run1+0xd4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a0b      	ldr	r2, [pc, #44]	; (8000374 <fsm_automatic_run1+0xd8>)
 8000346:	fb82 1203 	smull	r1, r2, r2, r3
 800034a:	1152      	asrs	r2, r2, #5
 800034c:	17db      	asrs	r3, r3, #31
 800034e:	1ad3      	subs	r3, r2, r3
 8000350:	4a09      	ldr	r2, [pc, #36]	; (8000378 <fsm_automatic_run1+0xdc>)
 8000352:	6013      	str	r3, [r2, #0]
			break;
 8000354:	e005      	b.n	8000362 <fsm_automatic_run1+0xc6>
			break;
 8000356:	bf00      	nop
 8000358:	e004      	b.n	8000364 <fsm_automatic_run1+0xc8>
			break;
 800035a:	bf00      	nop
 800035c:	e002      	b.n	8000364 <fsm_automatic_run1+0xc8>
			break;
 800035e:	bf00      	nop
 8000360:	e000      	b.n	8000364 <fsm_automatic_run1+0xc8>
			break;
 8000362:	bf00      	nop
	}
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000000 	.word	0x20000000
 800036c:	01605b22 	.word	0x01605b22
 8000370:	20000010 	.word	0x20000010
 8000374:	51eb851f 	.word	0x51eb851f
 8000378:	200000c8 	.word	0x200000c8
 800037c:	20000014 	.word	0x20000014
 8000380:	20000018 	.word	0x20000018

08000384 <fsm_automatic_run2>:


void fsm_automatic_run2(){
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	switch (status2	) {
 8000388:	4b31      	ldr	r3, [pc, #196]	; (8000450 <fsm_automatic_run2+0xcc>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a31      	ldr	r2, [pc, #196]	; (8000454 <fsm_automatic_run2+0xd0>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d00b      	beq.n	80003aa <fsm_automatic_run2+0x26>
 8000392:	4a30      	ldr	r2, [pc, #192]	; (8000454 <fsm_automatic_run2+0xd0>)
 8000394:	4293      	cmp	r3, r2
 8000396:	dc52      	bgt.n	800043e <fsm_automatic_run2+0xba>
 8000398:	2b03      	cmp	r3, #3
 800039a:	d03c      	beq.n	8000416 <fsm_automatic_run2+0x92>
 800039c:	2b03      	cmp	r3, #3
 800039e:	dc4e      	bgt.n	800043e <fsm_automatic_run2+0xba>
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d010      	beq.n	80003c6 <fsm_automatic_run2+0x42>
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d022      	beq.n	80003ee <fsm_automatic_run2+0x6a>
				status2 = AUTO_RED;
				timer2=RED_TIME/OneSec;
			}
			break;
		default:
			break;
 80003a8:	e049      	b.n	800043e <fsm_automatic_run2+0xba>
			status2 = AUTO_GREEN;
 80003aa:	4b29      	ldr	r3, [pc, #164]	; (8000450 <fsm_automatic_run2+0xcc>)
 80003ac:	2202      	movs	r2, #2
 80003ae:	601a      	str	r2, [r3, #0]
			timer2=GREEN_TIME/OneSec;
 80003b0:	4b29      	ldr	r3, [pc, #164]	; (8000458 <fsm_automatic_run2+0xd4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a29      	ldr	r2, [pc, #164]	; (800045c <fsm_automatic_run2+0xd8>)
 80003b6:	fb82 1203 	smull	r1, r2, r2, r3
 80003ba:	1152      	asrs	r2, r2, #5
 80003bc:	17db      	asrs	r3, r3, #31
 80003be:	1ad3      	subs	r3, r2, r3
 80003c0:	4a27      	ldr	r2, [pc, #156]	; (8000460 <fsm_automatic_run2+0xdc>)
 80003c2:	6013      	str	r3, [r2, #0]
			break;
 80003c4:	e042      	b.n	800044c <fsm_automatic_run2+0xc8>
			toogleRed1();
 80003c6:	f7ff fefd 	bl	80001c4 <toogleRed1>
			if(timer2==STOP){
 80003ca:	4b25      	ldr	r3, [pc, #148]	; (8000460 <fsm_automatic_run2+0xdc>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d137      	bne.n	8000442 <fsm_automatic_run2+0xbe>
				status2 = AUTO_GREEN;
 80003d2:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <fsm_automatic_run2+0xcc>)
 80003d4:	2202      	movs	r2, #2
 80003d6:	601a      	str	r2, [r3, #0]
				timer2=GREEN_TIME/OneSec;
 80003d8:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <fsm_automatic_run2+0xd4>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a1f      	ldr	r2, [pc, #124]	; (800045c <fsm_automatic_run2+0xd8>)
 80003de:	fb82 1203 	smull	r1, r2, r2, r3
 80003e2:	1152      	asrs	r2, r2, #5
 80003e4:	17db      	asrs	r3, r3, #31
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	4a1d      	ldr	r2, [pc, #116]	; (8000460 <fsm_automatic_run2+0xdc>)
 80003ea:	6013      	str	r3, [r2, #0]
			break;
 80003ec:	e029      	b.n	8000442 <fsm_automatic_run2+0xbe>
			toogleGreen1();
 80003ee:	f7ff fef9 	bl	80001e4 <toogleGreen1>
			if(timer2==STOP){
 80003f2:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <fsm_automatic_run2+0xdc>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d125      	bne.n	8000446 <fsm_automatic_run2+0xc2>
				status2 = AUTO_YELLOW;
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <fsm_automatic_run2+0xcc>)
 80003fc:	2203      	movs	r2, #3
 80003fe:	601a      	str	r2, [r3, #0]
				timer2=YELLOW_TIME/OneSec;
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <fsm_automatic_run2+0xe0>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a15      	ldr	r2, [pc, #84]	; (800045c <fsm_automatic_run2+0xd8>)
 8000406:	fb82 1203 	smull	r1, r2, r2, r3
 800040a:	1152      	asrs	r2, r2, #5
 800040c:	17db      	asrs	r3, r3, #31
 800040e:	1ad3      	subs	r3, r2, r3
 8000410:	4a13      	ldr	r2, [pc, #76]	; (8000460 <fsm_automatic_run2+0xdc>)
 8000412:	6013      	str	r3, [r2, #0]
			break;
 8000414:	e017      	b.n	8000446 <fsm_automatic_run2+0xc2>
			toogleYellow1();
 8000416:	f7ff fef5 	bl	8000204 <toogleYellow1>
			if(timer2==STOP){
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <fsm_automatic_run2+0xdc>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d113      	bne.n	800044a <fsm_automatic_run2+0xc6>
				status2 = AUTO_RED;
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <fsm_automatic_run2+0xcc>)
 8000424:	2201      	movs	r2, #1
 8000426:	601a      	str	r2, [r3, #0]
				timer2=RED_TIME/OneSec;
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <fsm_automatic_run2+0xe4>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a0b      	ldr	r2, [pc, #44]	; (800045c <fsm_automatic_run2+0xd8>)
 800042e:	fb82 1203 	smull	r1, r2, r2, r3
 8000432:	1152      	asrs	r2, r2, #5
 8000434:	17db      	asrs	r3, r3, #31
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	4a09      	ldr	r2, [pc, #36]	; (8000460 <fsm_automatic_run2+0xdc>)
 800043a:	6013      	str	r3, [r2, #0]
			break;
 800043c:	e005      	b.n	800044a <fsm_automatic_run2+0xc6>
			break;
 800043e:	bf00      	nop
 8000440:	e004      	b.n	800044c <fsm_automatic_run2+0xc8>
			break;
 8000442:	bf00      	nop
 8000444:	e002      	b.n	800044c <fsm_automatic_run2+0xc8>
			break;
 8000446:	bf00      	nop
 8000448:	e000      	b.n	800044c <fsm_automatic_run2+0xc8>
			break;
 800044a:	bf00      	nop
	}
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000004 	.word	0x20000004
 8000454:	01605b22 	.word	0x01605b22
 8000458:	20000014 	.word	0x20000014
 800045c:	51eb851f 	.word	0x51eb851f
 8000460:	200000cc 	.word	0x200000cc
 8000464:	20000018 	.word	0x20000018
 8000468:	20000010 	.word	0x20000010

0800046c <fsm_p>:
void fsm_p(){
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	switch (status4) {
 8000470:	4b2a      	ldr	r3, [pc, #168]	; (800051c <fsm_p+0xb0>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a2a      	ldr	r2, [pc, #168]	; (8000520 <fsm_p+0xb4>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d00b      	beq.n	8000492 <fsm_p+0x26>
 800047a:	4a29      	ldr	r2, [pc, #164]	; (8000520 <fsm_p+0xb4>)
 800047c:	4293      	cmp	r3, r2
 800047e:	dc43      	bgt.n	8000508 <fsm_p+0x9c>
 8000480:	2b63      	cmp	r3, #99	; 0x63
 8000482:	d043      	beq.n	800050c <fsm_p+0xa0>
 8000484:	2b63      	cmp	r3, #99	; 0x63
 8000486:	dc3f      	bgt.n	8000508 <fsm_p+0x9c>
 8000488:	2b1f      	cmp	r3, #31
 800048a:	d00d      	beq.n	80004a8 <fsm_p+0x3c>
 800048c:	2b20      	cmp	r3, #32
 800048e:	d025      	beq.n	80004dc <fsm_p+0x70>
			if(timer3==STOP){
				status4=INIT;
			}
			break;
		default:
			break;
 8000490:	e03a      	b.n	8000508 <fsm_p+0x9c>
			status4=Waiting;
 8000492:	4b22      	ldr	r3, [pc, #136]	; (800051c <fsm_p+0xb0>)
 8000494:	2263      	movs	r2, #99	; 0x63
 8000496:	601a      	str	r2, [r3, #0]
			timer3 = 0;
 8000498:	4b22      	ldr	r3, [pc, #136]	; (8000524 <fsm_p+0xb8>)
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
			offP();
 800049e:	f7ff fee9 	bl	8000274 <offP>
			off_Speaker();
 80004a2:	f000 fd5f 	bl	8000f64 <off_Speaker>
			break;
 80004a6:	e036      	b.n	8000516 <fsm_p+0xaa>
			redP();
 80004a8:	f7ff febc 	bl	8000224 <redP>
			if(timer3==STOP){
 80004ac:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <fsm_p+0xb8>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d12d      	bne.n	8000510 <fsm_p+0xa4>
				status4=P_GREEN;
 80004b4:	4b19      	ldr	r3, [pc, #100]	; (800051c <fsm_p+0xb0>)
 80004b6:	2220      	movs	r2, #32
 80004b8:	601a      	str	r2, [r3, #0]
				timer3 = RED_TIME/OneSec-1;
 80004ba:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <fsm_p+0xbc>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a1b      	ldr	r2, [pc, #108]	; (800052c <fsm_p+0xc0>)
 80004c0:	fb82 1203 	smull	r1, r2, r2, r3
 80004c4:	1152      	asrs	r2, r2, #5
 80004c6:	17db      	asrs	r3, r3, #31
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	3b01      	subs	r3, #1
 80004cc:	4a15      	ldr	r2, [pc, #84]	; (8000524 <fsm_p+0xb8>)
 80004ce:	6013      	str	r3, [r2, #0]
				offP();
 80004d0:	f7ff fed0 	bl	8000274 <offP>
				setTimer3 (1);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f001 fadb 	bl	8001a90 <setTimer3>
			break;
 80004da:	e019      	b.n	8000510 <fsm_p+0xa4>
			greenP();
 80004dc:	f7ff feb6 	bl	800024c <greenP>
			if( timer3_flag == 1) {
 80004e0:	4b13      	ldr	r3, [pc, #76]	; (8000530 <fsm_p+0xc4>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d107      	bne.n	80004f8 <fsm_p+0x8c>
				toogle_Speaker();
 80004e8:	f000 fd4e 	bl	8000f88 <toogle_Speaker>
				setTimer3 (timer3*4) ;
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <fsm_p+0xb8>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 facc 	bl	8001a90 <setTimer3>
			if(timer3==STOP){
 80004f8:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <fsm_p+0xb8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d109      	bne.n	8000514 <fsm_p+0xa8>
				status4=INIT;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <fsm_p+0xb0>)
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <fsm_p+0xb4>)
 8000504:	601a      	str	r2, [r3, #0]
			break;
 8000506:	e005      	b.n	8000514 <fsm_p+0xa8>
			break;
 8000508:	bf00      	nop
 800050a:	e004      	b.n	8000516 <fsm_p+0xaa>
			break;
 800050c:	bf00      	nop
 800050e:	e002      	b.n	8000516 <fsm_p+0xaa>
			break;
 8000510:	bf00      	nop
 8000512:	e000      	b.n	8000516 <fsm_p+0xaa>
			break;
 8000514:	bf00      	nop
	}
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000008 	.word	0x20000008
 8000520:	01605b22 	.word	0x01605b22
 8000524:	200000d0 	.word	0x200000d0
 8000528:	20000010 	.word	0x20000010
 800052c:	51eb851f 	.word	0x51eb851f
 8000530:	200000e4 	.word	0x200000e4

08000534 <fsm_automatic_run3>:
void fsm_automatic_run3(){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	switch (status3	) {
 8000538:	4b90      	ldr	r3, [pc, #576]	; (800077c <fsm_automatic_run3+0x248>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a90      	ldr	r2, [pc, #576]	; (8000780 <fsm_automatic_run3+0x24c>)
 800053e:	4293      	cmp	r3, r2
 8000540:	f000 8102 	beq.w	8000748 <fsm_automatic_run3+0x214>
 8000544:	4a8e      	ldr	r2, [pc, #568]	; (8000780 <fsm_automatic_run3+0x24c>)
 8000546:	4293      	cmp	r3, r2
 8000548:	f300 8380 	bgt.w	8000c4c <fsm_automatic_run3+0x718>
 800054c:	2b17      	cmp	r3, #23
 800054e:	dc23      	bgt.n	8000598 <fsm_automatic_run3+0x64>
 8000550:	2b0b      	cmp	r3, #11
 8000552:	f2c0 837b 	blt.w	8000c4c <fsm_automatic_run3+0x718>
 8000556:	3b0b      	subs	r3, #11
 8000558:	2b0c      	cmp	r3, #12
 800055a:	f200 8377 	bhi.w	8000c4c <fsm_automatic_run3+0x718>
 800055e:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <fsm_automatic_run3+0x30>)
 8000560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000564:	080007b5 	.word	0x080007b5
 8000568:	08000899 	.word	0x08000899
 800056c:	0800097d 	.word	0x0800097d
 8000570:	08000c4d 	.word	0x08000c4d
 8000574:	08000c4d 	.word	0x08000c4d
 8000578:	08000c4d 	.word	0x08000c4d
 800057c:	08000c4d 	.word	0x08000c4d
 8000580:	08000c4d 	.word	0x08000c4d
 8000584:	08000c4d 	.word	0x08000c4d
 8000588:	08000c4d 	.word	0x08000c4d
 800058c:	08000a6d 	.word	0x08000a6d
 8000590:	08000b0d 	.word	0x08000b0d
 8000594:	08000bad 	.word	0x08000bad
 8000598:	2b64      	cmp	r3, #100	; 0x64
 800059a:	f040 8357 	bne.w	8000c4c <fsm_automatic_run3+0x718>
		case RUNNING://AUTOMATIC MODE MAIN FSM
			if( timer0_flag == 1) {
 800059e:	4b79      	ldr	r3, [pc, #484]	; (8000784 <fsm_automatic_run3+0x250>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d12d      	bne.n	8000602 <fsm_automatic_run3+0xce>
				Print_Time1(timer);//TIMER FOR LED 1
 80005a6:	4b78      	ldr	r3, [pc, #480]	; (8000788 <fsm_automatic_run3+0x254>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fc9e 	bl	8000eec <Print_Time1>
				Print_Time2(timer2);//TIMER FOR LED 2
 80005b0:	4b76      	ldr	r3, [pc, #472]	; (800078c <fsm_automatic_run3+0x258>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fcb7 	bl	8000f28 <Print_Time2>
				timer--;//IF timer == 0 fsm1 will change status and set timer again
 80005ba:	4b73      	ldr	r3, [pc, #460]	; (8000788 <fsm_automatic_run3+0x254>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	4a71      	ldr	r2, [pc, #452]	; (8000788 <fsm_automatic_run3+0x254>)
 80005c2:	6013      	str	r3, [r2, #0]
				timer2--;// timer for fsm2 work like timer
 80005c4:	4b71      	ldr	r3, [pc, #452]	; (800078c <fsm_automatic_run3+0x258>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	4a70      	ldr	r2, [pc, #448]	; (800078c <fsm_automatic_run3+0x258>)
 80005cc:	6013      	str	r3, [r2, #0]
				if(status4==P_RED||status4==P_GREEN){//when P_mode is enable it will cout down timer for P_mode
 80005ce:	4b70      	ldr	r3, [pc, #448]	; (8000790 <fsm_automatic_run3+0x25c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b1f      	cmp	r3, #31
 80005d4:	d003      	beq.n	80005de <fsm_automatic_run3+0xaa>
 80005d6:	4b6e      	ldr	r3, [pc, #440]	; (8000790 <fsm_automatic_run3+0x25c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b20      	cmp	r3, #32
 80005dc:	d10e      	bne.n	80005fc <fsm_automatic_run3+0xc8>
					Print_Mode(status4);
 80005de:	4b6c      	ldr	r3, [pc, #432]	; (8000790 <fsm_automatic_run3+0x25c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fc46 	bl	8000e74 <Print_Mode>
					Print_TimeOut(timer3);
 80005e8:	4b6a      	ldr	r3, [pc, #424]	; (8000794 <fsm_automatic_run3+0x260>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fc23 	bl	8000e38 <Print_TimeOut>
					timer3--;//if timer == 0 P_mode will change status form red to green and set timer again or disable P_mode
 80005f2:	4b68      	ldr	r3, [pc, #416]	; (8000794 <fsm_automatic_run3+0x260>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	4a66      	ldr	r2, [pc, #408]	; (8000794 <fsm_automatic_run3+0x260>)
 80005fa:	6013      	str	r3, [r2, #0]
				}
				setTimer0 (OneSec);
 80005fc:	2064      	movs	r0, #100	; 0x64
 80005fe:	f001 fa33 	bl	8001a68 <setTimer0>
				}
			if(button_flag[0]==1){// button 1 turn MAIN FSM to manual mode to adjust time for AUTOMATIC
 8000602:	4b65      	ldr	r3, [pc, #404]	; (8000798 <fsm_automatic_run3+0x264>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d128      	bne.n	800065c <fsm_automatic_run3+0x128>
								//It will turn FSM1 FSM2 to waiting
								//when change status it will use timer for MODE. timer2 for time of this mode
								//it will enable timer 3 for timeOut
				button_flag[0]=0;
 800060a:	4b63      	ldr	r3, [pc, #396]	; (8000798 <fsm_automatic_run3+0x264>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
				status1=Waiting;
 8000610:	4b62      	ldr	r3, [pc, #392]	; (800079c <fsm_automatic_run3+0x268>)
 8000612:	2263      	movs	r2, #99	; 0x63
 8000614:	601a      	str	r2, [r3, #0]
				status2=Waiting;
 8000616:	4b62      	ldr	r3, [pc, #392]	; (80007a0 <fsm_automatic_run3+0x26c>)
 8000618:	2263      	movs	r2, #99	; 0x63
 800061a:	601a      	str	r2, [r3, #0]
				status4=Waiting;
 800061c:	4b5c      	ldr	r3, [pc, #368]	; (8000790 <fsm_automatic_run3+0x25c>)
 800061e:	2263      	movs	r2, #99	; 0x63
 8000620:	601a      	str	r2, [r3, #0]
				status3=MAN_RED;
 8000622:	4b56      	ldr	r3, [pc, #344]	; (800077c <fsm_automatic_run3+0x248>)
 8000624:	220b      	movs	r2, #11
 8000626:	601a      	str	r2, [r3, #0]
				setTimer0(OneSec);
 8000628:	2064      	movs	r0, #100	; 0x64
 800062a:	f001 fa1d 	bl	8001a68 <setTimer0>
				timer = MAN_RED;
 800062e:	4b56      	ldr	r3, [pc, #344]	; (8000788 <fsm_automatic_run3+0x254>)
 8000630:	220b      	movs	r2, #11
 8000632:	601a      	str	r2, [r3, #0]
				timer2=RED_TIME/OneSec;
 8000634:	4b5b      	ldr	r3, [pc, #364]	; (80007a4 <fsm_automatic_run3+0x270>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a5b      	ldr	r2, [pc, #364]	; (80007a8 <fsm_automatic_run3+0x274>)
 800063a:	fb82 1203 	smull	r1, r2, r2, r3
 800063e:	1152      	asrs	r2, r2, #5
 8000640:	17db      	asrs	r3, r3, #31
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	4a51      	ldr	r2, [pc, #324]	; (800078c <fsm_automatic_run3+0x258>)
 8000646:	6013      	str	r3, [r2, #0]
				timer3= TIME_OUT/OneSec;
 8000648:	4b58      	ldr	r3, [pc, #352]	; (80007ac <fsm_automatic_run3+0x278>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a56      	ldr	r2, [pc, #344]	; (80007a8 <fsm_automatic_run3+0x274>)
 800064e:	fb82 1203 	smull	r1, r2, r2, r3
 8000652:	1152      	asrs	r2, r2, #5
 8000654:	17db      	asrs	r3, r3, #31
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	4a4e      	ldr	r2, [pc, #312]	; (8000794 <fsm_automatic_run3+0x260>)
 800065a:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[1]==1)//button 2 turn MAIN FSM to HAND mode to turn led by RED_GREEN_YELLOW
 800065c:	4b4e      	ldr	r3, [pc, #312]	; (8000798 <fsm_automatic_run3+0x264>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d132      	bne.n	80006ca <fsm_automatic_run3+0x196>
								//FSM will use timer for timeOut
			{
				button_flag[1] = 0;
 8000664:	4b4c      	ldr	r3, [pc, #304]	; (8000798 <fsm_automatic_run3+0x264>)
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
				Print_HELLO();
 800066a:	f000 fbcd 	bl	8000e08 <Print_HELLO>
				switch (status1) {
 800066e:	4b4b      	ldr	r3, [pc, #300]	; (800079c <fsm_automatic_run3+0x268>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b03      	cmp	r3, #3
 8000674:	d00a      	beq.n	800068c <fsm_automatic_run3+0x158>
 8000676:	2b03      	cmp	r3, #3
 8000678:	dc10      	bgt.n	800069c <fsm_automatic_run3+0x168>
 800067a:	2b01      	cmp	r3, #1
 800067c:	d002      	beq.n	8000684 <fsm_automatic_run3+0x150>
 800067e:	2b02      	cmp	r3, #2
 8000680:	d008      	beq.n	8000694 <fsm_automatic_run3+0x160>
						break;
					case AUTO_GREEN:
						status3 = HAND_YELLOW;
						break;
					default:
						break;
 8000682:	e00b      	b.n	800069c <fsm_automatic_run3+0x168>
						status3 = HAND_GREEN;
 8000684:	4b3d      	ldr	r3, [pc, #244]	; (800077c <fsm_automatic_run3+0x248>)
 8000686:	2216      	movs	r2, #22
 8000688:	601a      	str	r2, [r3, #0]
						break;
 800068a:	e008      	b.n	800069e <fsm_automatic_run3+0x16a>
						status3 = HAND_RED;
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <fsm_automatic_run3+0x248>)
 800068e:	2215      	movs	r2, #21
 8000690:	601a      	str	r2, [r3, #0]
						break;
 8000692:	e004      	b.n	800069e <fsm_automatic_run3+0x16a>
						status3 = HAND_YELLOW;
 8000694:	4b39      	ldr	r3, [pc, #228]	; (800077c <fsm_automatic_run3+0x248>)
 8000696:	2217      	movs	r2, #23
 8000698:	601a      	str	r2, [r3, #0]
						break;
 800069a:	e000      	b.n	800069e <fsm_automatic_run3+0x16a>
						break;
 800069c:	bf00      	nop
				}
				setTimer0 (OneSec);
 800069e:	2064      	movs	r0, #100	; 0x64
 80006a0:	f001 f9e2 	bl	8001a68 <setTimer0>
				timer=TIME_OUT/OneSec;
 80006a4:	4b41      	ldr	r3, [pc, #260]	; (80007ac <fsm_automatic_run3+0x278>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a3f      	ldr	r2, [pc, #252]	; (80007a8 <fsm_automatic_run3+0x274>)
 80006aa:	fb82 1203 	smull	r1, r2, r2, r3
 80006ae:	1152      	asrs	r2, r2, #5
 80006b0:	17db      	asrs	r3, r3, #31
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <fsm_automatic_run3+0x254>)
 80006b6:	6013      	str	r3, [r2, #0]
				status1 = Waiting;
 80006b8:	4b38      	ldr	r3, [pc, #224]	; (800079c <fsm_automatic_run3+0x268>)
 80006ba:	2263      	movs	r2, #99	; 0x63
 80006bc:	601a      	str	r2, [r3, #0]
				status2 = Waiting;
 80006be:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <fsm_automatic_run3+0x26c>)
 80006c0:	2263      	movs	r2, #99	; 0x63
 80006c2:	601a      	str	r2, [r3, #0]
				status4 = Waiting;
 80006c4:	4b32      	ldr	r3, [pc, #200]	; (8000790 <fsm_automatic_run3+0x25c>)
 80006c6:	2263      	movs	r2, #99	; 0x63
 80006c8:	601a      	str	r2, [r3, #0]
			}
			if(button_flag[3]==1){//button 3 enable P_MOde
 80006ca:	4b33      	ldr	r3, [pc, #204]	; (8000798 <fsm_automatic_run3+0x264>)
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	f040 82be 	bne.w	8000c50 <fsm_automatic_run3+0x71c>
				button_flag[3]=0;
 80006d4:	4b30      	ldr	r3, [pc, #192]	; (8000798 <fsm_automatic_run3+0x264>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
				if(status1== AUTO_RED){
 80006da:	4b30      	ldr	r3, [pc, #192]	; (800079c <fsm_automatic_run3+0x268>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d109      	bne.n	80006f6 <fsm_automatic_run3+0x1c2>
					status4=P_GREEN;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <fsm_automatic_run3+0x25c>)
 80006e4:	2220      	movs	r2, #32
 80006e6:	601a      	str	r2, [r3, #0]
					setTimer3(OneSec);
 80006e8:	2064      	movs	r0, #100	; 0x64
 80006ea:	f001 f9d1 	bl	8001a90 <setTimer3>
					timer3=timer;
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <fsm_automatic_run3+0x254>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a28      	ldr	r2, [pc, #160]	; (8000794 <fsm_automatic_run3+0x260>)
 80006f4:	6013      	str	r3, [r2, #0]
				}
				if(status1== AUTO_GREEN){
 80006f6:	4b29      	ldr	r3, [pc, #164]	; (800079c <fsm_automatic_run3+0x268>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d112      	bne.n	8000724 <fsm_automatic_run3+0x1f0>
					status4=P_RED;
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <fsm_automatic_run3+0x25c>)
 8000700:	221f      	movs	r2, #31
 8000702:	601a      	str	r2, [r3, #0]
					setTimer3(OneSec);
 8000704:	2064      	movs	r0, #100	; 0x64
 8000706:	f001 f9c3 	bl	8001a90 <setTimer3>
					timer3=timer+YELLOW_TIME/OneSec;
 800070a:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <fsm_automatic_run3+0x27c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a26      	ldr	r2, [pc, #152]	; (80007a8 <fsm_automatic_run3+0x274>)
 8000710:	fb82 1203 	smull	r1, r2, r2, r3
 8000714:	1152      	asrs	r2, r2, #5
 8000716:	17db      	asrs	r3, r3, #31
 8000718:	1ad2      	subs	r2, r2, r3
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <fsm_automatic_run3+0x254>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4413      	add	r3, r2
 8000720:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <fsm_automatic_run3+0x260>)
 8000722:	6013      	str	r3, [r2, #0]
				}
				if(status1== AUTO_YELLOW){
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <fsm_automatic_run3+0x268>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b03      	cmp	r3, #3
 800072a:	f040 8291 	bne.w	8000c50 <fsm_automatic_run3+0x71c>
					status4=P_RED;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <fsm_automatic_run3+0x25c>)
 8000730:	221f      	movs	r2, #31
 8000732:	601a      	str	r2, [r3, #0]
					offP();
 8000734:	f7ff fd9e 	bl	8000274 <offP>
					setTimer3(OneSec);
 8000738:	2064      	movs	r0, #100	; 0x64
 800073a:	f001 f9a9 	bl	8001a90 <setTimer3>
					timer3=timer;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <fsm_automatic_run3+0x254>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <fsm_automatic_run3+0x260>)
 8000744:	6013      	str	r3, [r2, #0]
				}
			}
			break;
 8000746:	e283      	b.n	8000c50 <fsm_automatic_run3+0x71c>
		case INIT:
			Print_Mode(INIT);
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <fsm_automatic_run3+0x24c>)
 800074a:	f000 fb93 	bl	8000e74 <Print_Mode>
			offP();
 800074e:	f7ff fd91 	bl	8000274 <offP>
			Print_ERROR();// check if RED_TIME == GREEN_TIME + YELLOW_TIME
 8000752:	f000 fc3b 	bl	8000fcc <Print_ERROR>
			timer3=0;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <fsm_automatic_run3+0x260>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
			setTimer0(OneSec);
 800075c:	2064      	movs	r0, #100	; 0x64
 800075e:	f001 f983 	bl	8001a68 <setTimer0>
			status1=INIT;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <fsm_automatic_run3+0x268>)
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <fsm_automatic_run3+0x24c>)
 8000766:	601a      	str	r2, [r3, #0]
			status2=INIT;
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <fsm_automatic_run3+0x26c>)
 800076a:	4a05      	ldr	r2, [pc, #20]	; (8000780 <fsm_automatic_run3+0x24c>)
 800076c:	601a      	str	r2, [r3, #0]
			status4=INIT;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <fsm_automatic_run3+0x25c>)
 8000770:	4a03      	ldr	r2, [pc, #12]	; (8000780 <fsm_automatic_run3+0x24c>)
 8000772:	601a      	str	r2, [r3, #0]
			status3=RUNNING;
 8000774:	4b01      	ldr	r3, [pc, #4]	; (800077c <fsm_automatic_run3+0x248>)
 8000776:	2264      	movs	r2, #100	; 0x64
 8000778:	601a      	str	r2, [r3, #0]
			break;
 800077a:	e270      	b.n	8000c5e <fsm_automatic_run3+0x72a>
 800077c:	2000000c 	.word	0x2000000c
 8000780:	01605b22 	.word	0x01605b22
 8000784:	200000dc 	.word	0x200000dc
 8000788:	200000c8 	.word	0x200000c8
 800078c:	200000cc 	.word	0x200000cc
 8000790:	20000008 	.word	0x20000008
 8000794:	200000d0 	.word	0x200000d0
 8000798:	200000f4 	.word	0x200000f4
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000004 	.word	0x20000004
 80007a4:	20000010 	.word	0x20000010
 80007a8:	51eb851f 	.word	0x51eb851f
 80007ac:	2000001c 	.word	0x2000001c
 80007b0:	20000018 	.word	0x20000018
		case MAN_RED:
			toogleRed();
 80007b4:	f7ff fcca 	bl	800014c <toogleRed>
			toogleRed1();
 80007b8:	f7ff fd04 	bl	80001c4 <toogleRed1>
			if( timer0_flag == 1) {
 80007bc:	4b9f      	ldr	r3, [pc, #636]	; (8000a3c <fsm_automatic_run3+0x508>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d116      	bne.n	80007f2 <fsm_automatic_run3+0x2be>
				Print_Mode(timer);
 80007c4:	4b9e      	ldr	r3, [pc, #632]	; (8000a40 <fsm_automatic_run3+0x50c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fb53 	bl	8000e74 <Print_Mode>
				Print_Time(timer2);
 80007ce:	4b9d      	ldr	r3, [pc, #628]	; (8000a44 <fsm_automatic_run3+0x510>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fb6c 	bl	8000eb0 <Print_Time>
				Print_TimeOut(timer3);
 80007d8:	4b9b      	ldr	r3, [pc, #620]	; (8000a48 <fsm_automatic_run3+0x514>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fb2b 	bl	8000e38 <Print_TimeOut>
				timer3--;
 80007e2:	4b99      	ldr	r3, [pc, #612]	; (8000a48 <fsm_automatic_run3+0x514>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	4a97      	ldr	r2, [pc, #604]	; (8000a48 <fsm_automatic_run3+0x514>)
 80007ea:	6013      	str	r3, [r2, #0]
				setTimer0 (OneSec) ;
 80007ec:	2064      	movs	r0, #100	; 0x64
 80007ee:	f001 f93b 	bl	8001a68 <setTimer0>
				}
			if(timer2>99)timer2=0;
 80007f2:	4b94      	ldr	r3, [pc, #592]	; (8000a44 <fsm_automatic_run3+0x510>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b63      	cmp	r3, #99	; 0x63
 80007f8:	dd02      	ble.n	8000800 <fsm_automatic_run3+0x2cc>
 80007fa:	4b92      	ldr	r3, [pc, #584]	; (8000a44 <fsm_automatic_run3+0x510>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
			RED_TIME=timer2*100;
 8000800:	4b90      	ldr	r3, [pc, #576]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2264      	movs	r2, #100	; 0x64
 8000806:	fb02 f303 	mul.w	r3, r2, r3
 800080a:	4a90      	ldr	r2, [pc, #576]	; (8000a4c <fsm_automatic_run3+0x518>)
 800080c:	6013      	str	r3, [r2, #0]
			if(button_flag[0]==1){
 800080e:	4b90      	ldr	r3, [pc, #576]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d11f      	bne.n	8000856 <fsm_automatic_run3+0x322>
				button_flag[0]=0;
 8000816:	4b8e      	ldr	r3, [pc, #568]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
				timer2=GREEN_TIME/OneSec;
 800081c:	4b8d      	ldr	r3, [pc, #564]	; (8000a54 <fsm_automatic_run3+0x520>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a8d      	ldr	r2, [pc, #564]	; (8000a58 <fsm_automatic_run3+0x524>)
 8000822:	fb82 1203 	smull	r1, r2, r2, r3
 8000826:	1152      	asrs	r2, r2, #5
 8000828:	17db      	asrs	r3, r3, #31
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	4a85      	ldr	r2, [pc, #532]	; (8000a44 <fsm_automatic_run3+0x510>)
 800082e:	6013      	str	r3, [r2, #0]
				timer = MAN_GREEN;
 8000830:	4b83      	ldr	r3, [pc, #524]	; (8000a40 <fsm_automatic_run3+0x50c>)
 8000832:	220c      	movs	r2, #12
 8000834:	601a      	str	r2, [r3, #0]
				status3=MAN_GREEN;
 8000836:	4b89      	ldr	r3, [pc, #548]	; (8000a5c <fsm_automatic_run3+0x528>)
 8000838:	220c      	movs	r2, #12
 800083a:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 800083c:	2064      	movs	r0, #100	; 0x64
 800083e:	f001 f913 	bl	8001a68 <setTimer0>
				timer3= TIME_OUT/OneSec;
 8000842:	4b87      	ldr	r3, [pc, #540]	; (8000a60 <fsm_automatic_run3+0x52c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a84      	ldr	r2, [pc, #528]	; (8000a58 <fsm_automatic_run3+0x524>)
 8000848:	fb82 1203 	smull	r1, r2, r2, r3
 800084c:	1152      	asrs	r2, r2, #5
 800084e:	17db      	asrs	r3, r3, #31
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	4a7d      	ldr	r2, [pc, #500]	; (8000a48 <fsm_automatic_run3+0x514>)
 8000854:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[1]==1){
 8000856:	4b7e      	ldr	r3, [pc, #504]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d107      	bne.n	800086e <fsm_automatic_run3+0x33a>
				button_flag[1]=0;
 800085e:	4b7c      	ldr	r3, [pc, #496]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
				timer2++;
 8000864:	4b77      	ldr	r3, [pc, #476]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	4a76      	ldr	r2, [pc, #472]	; (8000a44 <fsm_automatic_run3+0x510>)
 800086c:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 800086e:	4b78      	ldr	r3, [pc, #480]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d107      	bne.n	8000886 <fsm_automatic_run3+0x352>
				button_flag[2]=0;
 8000876:	4b76      	ldr	r3, [pc, #472]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
				timer2--;
 800087c:	4b71      	ldr	r3, [pc, #452]	; (8000a44 <fsm_automatic_run3+0x510>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3b01      	subs	r3, #1
 8000882:	4a70      	ldr	r2, [pc, #448]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000884:	6013      	str	r3, [r2, #0]
			}
			if(timer3==STOP){
 8000886:	4b70      	ldr	r3, [pc, #448]	; (8000a48 <fsm_automatic_run3+0x514>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	f040 81e2 	bne.w	8000c54 <fsm_automatic_run3+0x720>
				status3=INIT;
 8000890:	4b72      	ldr	r3, [pc, #456]	; (8000a5c <fsm_automatic_run3+0x528>)
 8000892:	4a74      	ldr	r2, [pc, #464]	; (8000a64 <fsm_automatic_run3+0x530>)
 8000894:	601a      	str	r2, [r3, #0]
			}
			break;
 8000896:	e1dd      	b.n	8000c54 <fsm_automatic_run3+0x720>
		case MAN_GREEN:
			if( timer0_flag == 1) {
 8000898:	4b68      	ldr	r3, [pc, #416]	; (8000a3c <fsm_automatic_run3+0x508>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d116      	bne.n	80008ce <fsm_automatic_run3+0x39a>
				Print_Mode(timer);
 80008a0:	4b67      	ldr	r3, [pc, #412]	; (8000a40 <fsm_automatic_run3+0x50c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fae5 	bl	8000e74 <Print_Mode>
				Print_Time(timer2);
 80008aa:	4b66      	ldr	r3, [pc, #408]	; (8000a44 <fsm_automatic_run3+0x510>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fafe 	bl	8000eb0 <Print_Time>
				Print_TimeOut(timer3);
 80008b4:	4b64      	ldr	r3, [pc, #400]	; (8000a48 <fsm_automatic_run3+0x514>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fabd 	bl	8000e38 <Print_TimeOut>
				timer3--;
 80008be:	4b62      	ldr	r3, [pc, #392]	; (8000a48 <fsm_automatic_run3+0x514>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	4a60      	ldr	r2, [pc, #384]	; (8000a48 <fsm_automatic_run3+0x514>)
 80008c6:	6013      	str	r3, [r2, #0]
				setTimer0 (OneSec) ;
 80008c8:	2064      	movs	r0, #100	; 0x64
 80008ca:	f001 f8cd 	bl	8001a68 <setTimer0>
				}
			toogleGreen();
 80008ce:	f7ff fc51 	bl	8000174 <toogleGreen>
			toogleGreen1();
 80008d2:	f7ff fc87 	bl	80001e4 <toogleGreen1>
			if(timer2>99)timer2=0;
 80008d6:	4b5b      	ldr	r3, [pc, #364]	; (8000a44 <fsm_automatic_run3+0x510>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b63      	cmp	r3, #99	; 0x63
 80008dc:	dd02      	ble.n	80008e4 <fsm_automatic_run3+0x3b0>
 80008de:	4b59      	ldr	r3, [pc, #356]	; (8000a44 <fsm_automatic_run3+0x510>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
			GREEN_TIME=timer2*100;
 80008e4:	4b57      	ldr	r3, [pc, #348]	; (8000a44 <fsm_automatic_run3+0x510>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2264      	movs	r2, #100	; 0x64
 80008ea:	fb02 f303 	mul.w	r3, r2, r3
 80008ee:	4a59      	ldr	r2, [pc, #356]	; (8000a54 <fsm_automatic_run3+0x520>)
 80008f0:	6013      	str	r3, [r2, #0]
			if(button_flag[0]==1){
 80008f2:	4b57      	ldr	r3, [pc, #348]	; (8000a50 <fsm_automatic_run3+0x51c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d11f      	bne.n	800093a <fsm_automatic_run3+0x406>
				button_flag[0]=0;
 80008fa:	4b55      	ldr	r3, [pc, #340]	; (8000a50 <fsm_automatic_run3+0x51c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
				timer2=YELLOW_TIME/OneSec;
 8000900:	4b59      	ldr	r3, [pc, #356]	; (8000a68 <fsm_automatic_run3+0x534>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a54      	ldr	r2, [pc, #336]	; (8000a58 <fsm_automatic_run3+0x524>)
 8000906:	fb82 1203 	smull	r1, r2, r2, r3
 800090a:	1152      	asrs	r2, r2, #5
 800090c:	17db      	asrs	r3, r3, #31
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	4a4c      	ldr	r2, [pc, #304]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000912:	6013      	str	r3, [r2, #0]
				status3=MAN_YELLOW;
 8000914:	4b51      	ldr	r3, [pc, #324]	; (8000a5c <fsm_automatic_run3+0x528>)
 8000916:	220d      	movs	r2, #13
 8000918:	601a      	str	r2, [r3, #0]
				timer = MAN_YELLOW;
 800091a:	4b49      	ldr	r3, [pc, #292]	; (8000a40 <fsm_automatic_run3+0x50c>)
 800091c:	220d      	movs	r2, #13
 800091e:	601a      	str	r2, [r3, #0]
				setTimer0(OneSec);
 8000920:	2064      	movs	r0, #100	; 0x64
 8000922:	f001 f8a1 	bl	8001a68 <setTimer0>
				timer3= TIME_OUT/OneSec;
 8000926:	4b4e      	ldr	r3, [pc, #312]	; (8000a60 <fsm_automatic_run3+0x52c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a4b      	ldr	r2, [pc, #300]	; (8000a58 <fsm_automatic_run3+0x524>)
 800092c:	fb82 1203 	smull	r1, r2, r2, r3
 8000930:	1152      	asrs	r2, r2, #5
 8000932:	17db      	asrs	r3, r3, #31
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	4a44      	ldr	r2, [pc, #272]	; (8000a48 <fsm_automatic_run3+0x514>)
 8000938:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[1]==1){
 800093a:	4b45      	ldr	r3, [pc, #276]	; (8000a50 <fsm_automatic_run3+0x51c>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d107      	bne.n	8000952 <fsm_automatic_run3+0x41e>
				button_flag[1]=0;
 8000942:	4b43      	ldr	r3, [pc, #268]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
				timer2++;
 8000948:	4b3e      	ldr	r3, [pc, #248]	; (8000a44 <fsm_automatic_run3+0x510>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	4a3d      	ldr	r2, [pc, #244]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000950:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000952:	4b3f      	ldr	r3, [pc, #252]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d107      	bne.n	800096a <fsm_automatic_run3+0x436>
				button_flag[2]=0;
 800095a:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <fsm_automatic_run3+0x51c>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
				timer2--;
 8000960:	4b38      	ldr	r3, [pc, #224]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3b01      	subs	r3, #1
 8000966:	4a37      	ldr	r2, [pc, #220]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000968:	6013      	str	r3, [r2, #0]
			}
			if(timer3==STOP){
 800096a:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <fsm_automatic_run3+0x514>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	f040 8172 	bne.w	8000c58 <fsm_automatic_run3+0x724>
				status3=INIT;
 8000974:	4b39      	ldr	r3, [pc, #228]	; (8000a5c <fsm_automatic_run3+0x528>)
 8000976:	4a3b      	ldr	r2, [pc, #236]	; (8000a64 <fsm_automatic_run3+0x530>)
 8000978:	601a      	str	r2, [r3, #0]
			}

			break;
 800097a:	e16d      	b.n	8000c58 <fsm_automatic_run3+0x724>
		case MAN_YELLOW:
			if( timer0_flag == 1) {
 800097c:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <fsm_automatic_run3+0x508>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d116      	bne.n	80009b2 <fsm_automatic_run3+0x47e>
				Print_Mode(timer);
 8000984:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <fsm_automatic_run3+0x50c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fa73 	bl	8000e74 <Print_Mode>
				Print_Time(timer2);
 800098e:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f000 fa8c 	bl	8000eb0 <Print_Time>
				Print_TimeOut(timer3);
 8000998:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <fsm_automatic_run3+0x514>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fa4b 	bl	8000e38 <Print_TimeOut>
				setTimer0 (OneSec) ;
 80009a2:	2064      	movs	r0, #100	; 0x64
 80009a4:	f001 f860 	bl	8001a68 <setTimer0>
				timer3--;
 80009a8:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <fsm_automatic_run3+0x514>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <fsm_automatic_run3+0x514>)
 80009b0:	6013      	str	r3, [r2, #0]
				}
			toogleYellow();
 80009b2:	f7ff fbf3 	bl	800019c <toogleYellow>
			toogleYellow1();
 80009b6:	f7ff fc25 	bl	8000204 <toogleYellow1>
			if(timer2>99)timer2=3;
 80009ba:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <fsm_automatic_run3+0x510>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b63      	cmp	r3, #99	; 0x63
 80009c0:	dd02      	ble.n	80009c8 <fsm_automatic_run3+0x494>
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <fsm_automatic_run3+0x510>)
 80009c4:	2203      	movs	r2, #3
 80009c6:	601a      	str	r2, [r3, #0]
			if(timer2<3)timer2=3;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <fsm_automatic_run3+0x510>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	dc02      	bgt.n	80009d6 <fsm_automatic_run3+0x4a2>
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <fsm_automatic_run3+0x510>)
 80009d2:	2203      	movs	r2, #3
 80009d4:	601a      	str	r2, [r3, #0]
			YELLOW_TIME=timer2*100;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <fsm_automatic_run3+0x510>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2264      	movs	r2, #100	; 0x64
 80009dc:	fb02 f303 	mul.w	r3, r2, r3
 80009e0:	4a21      	ldr	r2, [pc, #132]	; (8000a68 <fsm_automatic_run3+0x534>)
 80009e2:	6013      	str	r3, [r2, #0]
			if(button_flag[0]==1){
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <fsm_automatic_run3+0x51c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d105      	bne.n	80009f8 <fsm_automatic_run3+0x4c4>
				button_flag[0]=0;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <fsm_automatic_run3+0x51c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
				status3=INIT;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <fsm_automatic_run3+0x528>)
 80009f4:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <fsm_automatic_run3+0x530>)
 80009f6:	601a      	str	r2, [r3, #0]
			}
			if(button_flag[1]==1){
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <fsm_automatic_run3+0x51c>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d107      	bne.n	8000a10 <fsm_automatic_run3+0x4dc>
				button_flag[1]=0;
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
				timer2++;
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000a0e:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d107      	bne.n	8000a28 <fsm_automatic_run3+0x4f4>
				button_flag[2]=0;
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <fsm_automatic_run3+0x51c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
				timer2--;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <fsm_automatic_run3+0x510>)
 8000a26:	6013      	str	r3, [r2, #0]
			}
			if(timer3==STOP){
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <fsm_automatic_run3+0x514>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	f040 8115 	bne.w	8000c5c <fsm_automatic_run3+0x728>
				status3=INIT;
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <fsm_automatic_run3+0x528>)
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <fsm_automatic_run3+0x530>)
 8000a36:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a38:	e110      	b.n	8000c5c <fsm_automatic_run3+0x728>
 8000a3a:	bf00      	nop
 8000a3c:	200000dc 	.word	0x200000dc
 8000a40:	200000c8 	.word	0x200000c8
 8000a44:	200000cc 	.word	0x200000cc
 8000a48:	200000d0 	.word	0x200000d0
 8000a4c:	20000010 	.word	0x20000010
 8000a50:	200000f4 	.word	0x200000f4
 8000a54:	20000014 	.word	0x20000014
 8000a58:	51eb851f 	.word	0x51eb851f
 8000a5c:	2000000c 	.word	0x2000000c
 8000a60:	2000001c 	.word	0x2000001c
 8000a64:	01605b22 	.word	0x01605b22
 8000a68:	20000018 	.word	0x20000018
		case HAND_RED:
			if(timer0_flag == 1) {
 8000a6c:	4b7d      	ldr	r3, [pc, #500]	; (8000c64 <fsm_automatic_run3+0x730>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d10f      	bne.n	8000a94 <fsm_automatic_run3+0x560>
				timer--;
 8000a74:	4b7c      	ldr	r3, [pc, #496]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	4a7b      	ldr	r2, [pc, #492]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000a7c:	6013      	str	r3, [r2, #0]
				Print_Mode(HAND_RED);
 8000a7e:	2015      	movs	r0, #21
 8000a80:	f000 f9f8 	bl	8000e74 <Print_Mode>
				Print_TimeOut(timer);
 8000a84:	4b78      	ldr	r3, [pc, #480]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f9d5 	bl	8000e38 <Print_TimeOut>
				setTimer0 (OneSec) ;
 8000a8e:	2064      	movs	r0, #100	; 0x64
 8000a90:	f000 ffea 	bl	8001a68 <setTimer0>
			}
			if(button_flag[1]==1){
 8000a94:	4b75      	ldr	r3, [pc, #468]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d112      	bne.n	8000ac2 <fsm_automatic_run3+0x58e>
				button_flag[1]=0;
 8000a9c:	4b73      	ldr	r3, [pc, #460]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	605a      	str	r2, [r3, #4]
				status3=HAND_GREEN;
 8000aa2:	4b73      	ldr	r3, [pc, #460]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000aa4:	2216      	movs	r2, #22
 8000aa6:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000aa8:	2064      	movs	r0, #100	; 0x64
 8000aaa:	f000 ffdd 	bl	8001a68 <setTimer0>
				timer=TIME_OUT/OneSec;
 8000aae:	4b71      	ldr	r3, [pc, #452]	; (8000c74 <fsm_automatic_run3+0x740>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a71      	ldr	r2, [pc, #452]	; (8000c78 <fsm_automatic_run3+0x744>)
 8000ab4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ab8:	1152      	asrs	r2, r2, #5
 8000aba:	17db      	asrs	r3, r3, #31
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	4a6a      	ldr	r2, [pc, #424]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000ac0:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000ac2:	4b6a      	ldr	r3, [pc, #424]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d112      	bne.n	8000af0 <fsm_automatic_run3+0x5bc>
				button_flag[2]=0;
 8000aca:	4b68      	ldr	r3, [pc, #416]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
				status3=HAND_YELLOW;
 8000ad0:	4b67      	ldr	r3, [pc, #412]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000ad2:	2217      	movs	r2, #23
 8000ad4:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f000 ffc6 	bl	8001a68 <setTimer0>
				timer=TIME_OUT/OneSec;
 8000adc:	4b65      	ldr	r3, [pc, #404]	; (8000c74 <fsm_automatic_run3+0x740>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a65      	ldr	r2, [pc, #404]	; (8000c78 <fsm_automatic_run3+0x744>)
 8000ae2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae6:	1152      	asrs	r2, r2, #5
 8000ae8:	17db      	asrs	r3, r3, #31
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	4a5e      	ldr	r2, [pc, #376]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000aee:	6013      	str	r3, [r2, #0]
			}
			if(timer==STOP){
 8000af0:	4b5d      	ldr	r3, [pc, #372]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <fsm_automatic_run3+0x5ca>
				status3=INIT;
 8000af8:	4b5d      	ldr	r3, [pc, #372]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000afa:	4a60      	ldr	r2, [pc, #384]	; (8000c7c <fsm_automatic_run3+0x748>)
 8000afc:	601a      	str	r2, [r3, #0]
			}
			 toogleGreen1();
 8000afe:	f7ff fb71 	bl	80001e4 <toogleGreen1>
			 toogleRed();
 8000b02:	f7ff fb23 	bl	800014c <toogleRed>
			 greenP();
 8000b06:	f7ff fba1 	bl	800024c <greenP>
			break;
 8000b0a:	e0a8      	b.n	8000c5e <fsm_automatic_run3+0x72a>
		case HAND_GREEN:
			if(timer0_flag == 1) {
 8000b0c:	4b55      	ldr	r3, [pc, #340]	; (8000c64 <fsm_automatic_run3+0x730>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d10f      	bne.n	8000b34 <fsm_automatic_run3+0x600>
				timer--;
 8000b14:	4b54      	ldr	r3, [pc, #336]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	4a53      	ldr	r2, [pc, #332]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000b1c:	6013      	str	r3, [r2, #0]
				Print_Mode(HAND_GREEN);
 8000b1e:	2016      	movs	r0, #22
 8000b20:	f000 f9a8 	bl	8000e74 <Print_Mode>
				Print_TimeOut(timer);
 8000b24:	4b50      	ldr	r3, [pc, #320]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f985 	bl	8000e38 <Print_TimeOut>
				setTimer0 (OneSec) ;
 8000b2e:	2064      	movs	r0, #100	; 0x64
 8000b30:	f000 ff9a 	bl	8001a68 <setTimer0>
				}
			if(button_flag[1]==1){
 8000b34:	4b4d      	ldr	r3, [pc, #308]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d112      	bne.n	8000b62 <fsm_automatic_run3+0x62e>
				button_flag[1]=0;
 8000b3c:	4b4b      	ldr	r3, [pc, #300]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
				status3=HAND_YELLOW;
 8000b42:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000b44:	2217      	movs	r2, #23
 8000b46:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000b48:	2064      	movs	r0, #100	; 0x64
 8000b4a:	f000 ff8d 	bl	8001a68 <setTimer0>
				timer=TIME_OUT/OneSec;
 8000b4e:	4b49      	ldr	r3, [pc, #292]	; (8000c74 <fsm_automatic_run3+0x740>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a49      	ldr	r2, [pc, #292]	; (8000c78 <fsm_automatic_run3+0x744>)
 8000b54:	fb82 1203 	smull	r1, r2, r2, r3
 8000b58:	1152      	asrs	r2, r2, #5
 8000b5a:	17db      	asrs	r3, r3, #31
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	4a42      	ldr	r2, [pc, #264]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000b60:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000b62:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d112      	bne.n	8000b90 <fsm_automatic_run3+0x65c>
				button_flag[2]=0;
 8000b6a:	4b40      	ldr	r3, [pc, #256]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
				status3=HAND_RED;
 8000b70:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000b72:	2215      	movs	r2, #21
 8000b74:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000b76:	2064      	movs	r0, #100	; 0x64
 8000b78:	f000 ff76 	bl	8001a68 <setTimer0>
				timer=TIME_OUT/OneSec;
 8000b7c:	4b3d      	ldr	r3, [pc, #244]	; (8000c74 <fsm_automatic_run3+0x740>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a3d      	ldr	r2, [pc, #244]	; (8000c78 <fsm_automatic_run3+0x744>)
 8000b82:	fb82 1203 	smull	r1, r2, r2, r3
 8000b86:	1152      	asrs	r2, r2, #5
 8000b88:	17db      	asrs	r3, r3, #31
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	4a36      	ldr	r2, [pc, #216]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000b8e:	6013      	str	r3, [r2, #0]
			}
			if(timer==STOP){
 8000b90:	4b35      	ldr	r3, [pc, #212]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <fsm_automatic_run3+0x66a>
				status3=INIT;
 8000b98:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000b9a:	4a38      	ldr	r2, [pc, #224]	; (8000c7c <fsm_automatic_run3+0x748>)
 8000b9c:	601a      	str	r2, [r3, #0]
			}
			toogleRed1();
 8000b9e:	f7ff fb11 	bl	80001c4 <toogleRed1>
			toogleGreen();
 8000ba2:	f7ff fae7 	bl	8000174 <toogleGreen>
			redP();
 8000ba6:	f7ff fb3d 	bl	8000224 <redP>
			break;
 8000baa:	e058      	b.n	8000c5e <fsm_automatic_run3+0x72a>
		case HAND_YELLOW:
			if(timer0_flag == 1) {
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <fsm_automatic_run3+0x730>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d10f      	bne.n	8000bd4 <fsm_automatic_run3+0x6a0>
				timer--;
 8000bb4:	4b2c      	ldr	r3, [pc, #176]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	4a2b      	ldr	r2, [pc, #172]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000bbc:	6013      	str	r3, [r2, #0]
				Print_Mode(HAND_YELLOW);
 8000bbe:	2017      	movs	r0, #23
 8000bc0:	f000 f958 	bl	8000e74 <Print_Mode>
				Print_TimeOut(timer);
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 f935 	bl	8000e38 <Print_TimeOut>
				setTimer0 (OneSec) ;
 8000bce:	2064      	movs	r0, #100	; 0x64
 8000bd0:	f000 ff4a 	bl	8001a68 <setTimer0>
				}
			if(button_flag[1]==1){
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d112      	bne.n	8000c02 <fsm_automatic_run3+0x6ce>
				button_flag[1]=0;
 8000bdc:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
				status3=HAND_RED;
 8000be2:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000be4:	2215      	movs	r2, #21
 8000be6:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000be8:	2064      	movs	r0, #100	; 0x64
 8000bea:	f000 ff3d 	bl	8001a68 <setTimer0>
				timer=TIME_OUT/OneSec;
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <fsm_automatic_run3+0x740>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a21      	ldr	r2, [pc, #132]	; (8000c78 <fsm_automatic_run3+0x744>)
 8000bf4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf8:	1152      	asrs	r2, r2, #5
 8000bfa:	17db      	asrs	r3, r3, #31
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	4a1a      	ldr	r2, [pc, #104]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000c00:	6013      	str	r3, [r2, #0]
			}
			if(button_flag[2]==1){
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d112      	bne.n	8000c30 <fsm_automatic_run3+0x6fc>
				button_flag[2]=0;
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <fsm_automatic_run3+0x738>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
				status3=HAND_GREEN;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000c12:	2216      	movs	r2, #22
 8000c14:	601a      	str	r2, [r3, #0]
				setTimer0 (OneSec);
 8000c16:	2064      	movs	r0, #100	; 0x64
 8000c18:	f000 ff26 	bl	8001a68 <setTimer0>
				timer=TIME_OUT/OneSec;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <fsm_automatic_run3+0x740>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <fsm_automatic_run3+0x744>)
 8000c22:	fb82 1203 	smull	r1, r2, r2, r3
 8000c26:	1152      	asrs	r2, r2, #5
 8000c28:	17db      	asrs	r3, r3, #31
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000c2e:	6013      	str	r3, [r2, #0]
			}
			if(timer==STOP){
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <fsm_automatic_run3+0x734>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <fsm_automatic_run3+0x70a>
				status3=INIT;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <fsm_automatic_run3+0x73c>)
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <fsm_automatic_run3+0x748>)
 8000c3c:	601a      	str	r2, [r3, #0]
			}
			toogleRed1();
 8000c3e:	f7ff fac1 	bl	80001c4 <toogleRed1>
			toogleYellow();
 8000c42:	f7ff faab 	bl	800019c <toogleYellow>
			redP();
 8000c46:	f7ff faed 	bl	8000224 <redP>
			break;
 8000c4a:	e008      	b.n	8000c5e <fsm_automatic_run3+0x72a>
		default:
			break;
 8000c4c:	bf00      	nop
 8000c4e:	e006      	b.n	8000c5e <fsm_automatic_run3+0x72a>
			break;
 8000c50:	bf00      	nop
 8000c52:	e004      	b.n	8000c5e <fsm_automatic_run3+0x72a>
			break;
 8000c54:	bf00      	nop
 8000c56:	e002      	b.n	8000c5e <fsm_automatic_run3+0x72a>
			break;
 8000c58:	bf00      	nop
 8000c5a:	e000      	b.n	8000c5e <fsm_automatic_run3+0x72a>
			break;
 8000c5c:	bf00      	nop
	}
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200000dc 	.word	0x200000dc
 8000c68:	200000c8 	.word	0x200000c8
 8000c6c:	200000f4 	.word	0x200000f4
 8000c70:	2000000c 	.word	0x2000000c
 8000c74:	2000001c 	.word	0x2000001c
 8000c78:	51eb851f 	.word	0x51eb851f
 8000c7c:	01605b22 	.word	0x01605b22

08000c80 <subkeyProcess>:

//unsigned char is_button_pressed_1s()


void subkeyProcess(unsigned char i)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	button_flag[i] = 1;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <subkeyProcess+0x20>)
 8000c8e:	2101      	movs	r1, #1
 8000c90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	200000f4 	.word	0x200000f4

08000ca4 <button_reading>:
void button_reading()
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	e094      	b.n	8000dda <button_reading+0x136>
	{
		debounceButtonBuffer0[i] = debounceButtonBuffer1[i];
 8000cb0:	79fa      	ldrb	r2, [r7, #7]
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	494d      	ldr	r1, [pc, #308]	; (8000dec <button_reading+0x148>)
 8000cb6:	5c89      	ldrb	r1, [r1, r2]
 8000cb8:	4a4d      	ldr	r2, [pc, #308]	; (8000df0 <button_reading+0x14c>)
 8000cba:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 8000cbc:	79fa      	ldrb	r2, [r7, #7]
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	494c      	ldr	r1, [pc, #304]	; (8000df4 <button_reading+0x150>)
 8000cc2:	5c89      	ldrb	r1, [r1, r2]
 8000cc4:	4a49      	ldr	r2, [pc, #292]	; (8000dec <button_reading+0x148>)
 8000cc6:	54d1      	strb	r1, [r2, r3]
		switch (i)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d832      	bhi.n	8000d34 <button_reading+0x90>
 8000cce:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <button_reading+0x30>)
 8000cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd4:	08000ce5 	.word	0x08000ce5
 8000cd8:	08000cf9 	.word	0x08000cf9
 8000cdc:	08000d0d 	.word	0x08000d0d
 8000ce0:	08000d21 	.word	0x08000d21
		{
			case 0:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_1_GPIO_Port, button_1_Pin);
 8000ce4:	79fc      	ldrb	r4, [r7, #7]
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4843      	ldr	r0, [pc, #268]	; (8000df8 <button_reading+0x154>)
 8000cea:	f001 fad9 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b40      	ldr	r3, [pc, #256]	; (8000df4 <button_reading+0x150>)
 8000cf4:	551a      	strb	r2, [r3, r4]
				break;
 8000cf6:	e022      	b.n	8000d3e <button_reading+0x9a>
			case 1:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_2_GPIO_Port, button_2_Pin);
 8000cf8:	79fc      	ldrb	r4, [r7, #7]
 8000cfa:	2120      	movs	r1, #32
 8000cfc:	483e      	ldr	r0, [pc, #248]	; (8000df8 <button_reading+0x154>)
 8000cfe:	f001 facf 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b3b      	ldr	r3, [pc, #236]	; (8000df4 <button_reading+0x150>)
 8000d08:	551a      	strb	r2, [r3, r4]
				break;
 8000d0a:	e018      	b.n	8000d3e <button_reading+0x9a>
			case 2:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_3_GPIO_Port, button_3_Pin);
 8000d0c:	79fc      	ldrb	r4, [r7, #7]
 8000d0e:	2101      	movs	r1, #1
 8000d10:	483a      	ldr	r0, [pc, #232]	; (8000dfc <button_reading+0x158>)
 8000d12:	f001 fac5 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <button_reading+0x150>)
 8000d1c:	551a      	strb	r2, [r3, r4]
				break;
 8000d1e:	e00e      	b.n	8000d3e <button_reading+0x9a>
			case 3:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_p_GPIO_Port, button_p_Pin);
 8000d20:	79fc      	ldrb	r4, [r7, #7]
 8000d22:	2102      	movs	r1, #2
 8000d24:	4835      	ldr	r0, [pc, #212]	; (8000dfc <button_reading+0x158>)
 8000d26:	f001 fabb 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <button_reading+0x150>)
 8000d30:	551a      	strb	r2, [r3, r4]
				break;
 8000d32:	e004      	b.n	8000d3e <button_reading+0x9a>
			default:
				debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	4a2f      	ldr	r2, [pc, #188]	; (8000df4 <button_reading+0x150>)
 8000d38:	2101      	movs	r1, #1
 8000d3a:	54d1      	strb	r1, [r2, r3]
				break;
 8000d3c:	bf00      	nop
		}
		if((debounceButtonBuffer0[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]))
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	4a2b      	ldr	r2, [pc, #172]	; (8000df0 <button_reading+0x14c>)
 8000d42:	5cd2      	ldrb	r2, [r2, r3]
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4929      	ldr	r1, [pc, #164]	; (8000dec <button_reading+0x148>)
 8000d48:	5ccb      	ldrb	r3, [r1, r3]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d142      	bne.n	8000dd4 <button_reading+0x130>
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	4a26      	ldr	r2, [pc, #152]	; (8000dec <button_reading+0x148>)
 8000d52:	5cd2      	ldrb	r2, [r2, r3]
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4927      	ldr	r1, [pc, #156]	; (8000df4 <button_reading+0x150>)
 8000d58:	5ccb      	ldrb	r3, [r1, r3]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d13a      	bne.n	8000dd4 <button_reading+0x130>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i])
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <button_reading+0x15c>)
 8000d62:	5cd2      	ldrb	r2, [r2, r3]
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	4923      	ldr	r1, [pc, #140]	; (8000df4 <button_reading+0x150>)
 8000d68:	5ccb      	ldrb	r3, [r1, r3]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d015      	beq.n	8000d9a <button_reading+0xf6>
			{
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000d6e:	79fa      	ldrb	r2, [r7, #7]
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	4920      	ldr	r1, [pc, #128]	; (8000df4 <button_reading+0x150>)
 8000d74:	5c89      	ldrb	r1, [r1, r2]
 8000d76:	4a22      	ldr	r2, [pc, #136]	; (8000e00 <button_reading+0x15c>)
 8000d78:	54d1      	strb	r1, [r2, r3]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	4a20      	ldr	r2, [pc, #128]	; (8000e00 <button_reading+0x15c>)
 8000d7e:	5cd3      	ldrb	r3, [r2, r3]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d127      	bne.n	8000dd4 <button_reading+0x130>
				{
					counterForButtonPress1s[i] = DURATION_FOR_HOLDING;
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <button_reading+0x160>)
 8000d88:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					subkeyProcess(i);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff74 	bl	8000c80 <subkeyProcess>
 8000d98:	e01c      	b.n	8000dd4 <button_reading+0x130>
				}
			}
			else
			{
				counterForButtonPress1s[i]--;
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <button_reading+0x160>)
 8000d9e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000da2:	3a01      	subs	r2, #1
 8000da4:	b291      	uxth	r1, r2
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <button_reading+0x160>)
 8000da8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(counterForButtonPress1s[i] == 0)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <button_reading+0x160>)
 8000db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10d      	bne.n	8000dd4 <button_reading+0x130>
				{
					if(buttonBuffer[i]== BUTTON_IS_PRESSED)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <button_reading+0x15c>)
 8000dbc:	5cd3      	ldrb	r3, [r2, r3]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d108      	bne.n	8000dd4 <button_reading+0x130>
					{
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <button_reading+0x160>)
 8000dc6:	2164      	movs	r1, #100	; 0x64
 8000dc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						subkeyProcess(i);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff56 	bl	8000c80 <subkeyProcess>
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	f67f af67 	bls.w	8000cb0 <button_reading+0xc>
					//buttonBuffer[i] = BUTTON_IS_RELEASED;
				}
			}
		}
	}
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd90      	pop	{r4, r7, pc}
 8000dec:	200000b4 	.word	0x200000b4
 8000df0:	200000b0 	.word	0x200000b0
 8000df4:	200000b8 	.word	0x200000b8
 8000df8:	40010800 	.word	0x40010800
 8000dfc:	40010c00 	.word	0x40010c00
 8000e00:	200000ac 	.word	0x200000ac
 8000e04:	200000bc 	.word	0x200000bc

08000e08 <Print_HELLO>:

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
void Print_HELLO()
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
	char str[30];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "HELLO\n\r"), 1000);
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <Print_HELLO+0x28>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 fada 	bl	80043cc <siprintf>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4639      	mov	r1, r7
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	4804      	ldr	r0, [pc, #16]	; (8000e34 <Print_HELLO+0x2c>)
 8000e24:	f002 fe15 	bl	8003a52 <HAL_UART_Transmit>
}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	08004c58 	.word	0x08004c58
 8000e34:	20000194 	.word	0x20000194

08000e38 <Print_TimeOut>:
void Print_TimeOut(int abc){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "timeout: %d\n\r", temp), 1000);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <Print_TimeOut+0x34>)
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f003 fabd 	bl	80043cc <siprintf>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	f107 010c 	add.w	r1, r7, #12
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	4804      	ldr	r0, [pc, #16]	; (8000e70 <Print_TimeOut+0x38>)
 8000e60:	f002 fdf7 	bl	8003a52 <HAL_UART_Transmit>
}
 8000e64:	bf00      	nop
 8000e66:	3730      	adds	r7, #48	; 0x30
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	08004c60 	.word	0x08004c60
 8000e70:	20000194 	.word	0x20000194

08000e74 <Print_Mode>:
	char str[30];
	int temp;
	temp=abc;
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time_P: %d\n\r", temp), 1000);
}
void Print_Mode(int abc){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Mode: %d\n\r", temp), 1000);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <Print_Mode+0x34>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 fa9f 	bl	80043cc <siprintf>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	f107 010c 	add.w	r1, r7, #12
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	4804      	ldr	r0, [pc, #16]	; (8000eac <Print_Mode+0x38>)
 8000e9c:	f002 fdd9 	bl	8003a52 <HAL_UART_Transmit>
}
 8000ea0:	bf00      	nop
 8000ea2:	3730      	adds	r7, #48	; 0x30
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	08004c80 	.word	0x08004c80
 8000eac:	20000194 	.word	0x20000194

08000eb0 <Print_Time>:
void Print_Time(int abc){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time: %d\n\r", temp), 1000);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <Print_Time+0x34>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fa81 	bl	80043cc <siprintf>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	f107 010c 	add.w	r1, r7, #12
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <Print_Time+0x38>)
 8000ed8:	f002 fdbb 	bl	8003a52 <HAL_UART_Transmit>
}
 8000edc:	bf00      	nop
 8000ede:	3730      	adds	r7, #48	; 0x30
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	08004c8c 	.word	0x08004c8c
 8000ee8:	20000194 	.word	0x20000194

08000eec <Print_Time1>:
void Print_Time1(int abc){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	; 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time_1: %d\n\r", temp), 1000);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <Print_Time1+0x34>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fa63 	bl	80043cc <siprintf>
 8000f06:	4603      	mov	r3, r0
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	f107 010c 	add.w	r1, r7, #12
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	4804      	ldr	r0, [pc, #16]	; (8000f24 <Print_Time1+0x38>)
 8000f14:	f002 fd9d 	bl	8003a52 <HAL_UART_Transmit>
}
 8000f18:	bf00      	nop
 8000f1a:	3730      	adds	r7, #48	; 0x30
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	08004c98 	.word	0x08004c98
 8000f24:	20000194 	.word	0x20000194

08000f28 <Print_Time2>:
void Print_Time2(int abc){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	char str[30];
	int temp;
	temp=abc;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "time_2: %d\n\r", temp), 1000);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <Print_Time2+0x34>)
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 fa45 	bl	80043cc <siprintf>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	f107 010c 	add.w	r1, r7, #12
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <Print_Time2+0x38>)
 8000f50:	f002 fd7f 	bl	8003a52 <HAL_UART_Transmit>
}
 8000f54:	bf00      	nop
 8000f56:	3730      	adds	r7, #48	; 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	08004ca8 	.word	0x08004ca8
 8000f60:	20000194 	.word	0x20000194

08000f64 <off_Speaker>:

void off_Speaker(){
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
		__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,0);
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <off_Speaker+0x1c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
		speaker = 0;
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <off_Speaker+0x20>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000104 	.word	0x20000104
 8000f84:	200000c4 	.word	0x200000c4

08000f88 <toogle_Speaker>:
void toogle_Speaker(){
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	if(speaker == 0){
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <toogle_Speaker+0x3c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d108      	bne.n	8000fa6 <toogle_Speaker+0x1e>
		__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,910);
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <toogle_Speaker+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f240 328e 	movw	r2, #910	; 0x38e
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34
		speaker = 1;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <toogle_Speaker+0x3c>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
	}
	else if(speaker == 1){
		__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,0);
		speaker = 0;
	}
}
 8000fa4:	e00a      	b.n	8000fbc <toogle_Speaker+0x34>
	else if(speaker == 1){
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <toogle_Speaker+0x3c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d106      	bne.n	8000fbc <toogle_Speaker+0x34>
		__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,0);
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <toogle_Speaker+0x40>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	635a      	str	r2, [r3, #52]	; 0x34
		speaker = 0;
 8000fb6:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <toogle_Speaker+0x3c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	200000c4 	.word	0x200000c4
 8000fc8:	20000104 	.word	0x20000104

08000fcc <Print_ERROR>:
void Print_ERROR(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
	char str[30];
	if(RED_TIME!=GREEN_TIME+YELLOW_TIME){
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <Print_ERROR+0x48>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <Print_ERROR+0x4c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	441a      	add	r2, r3
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <Print_ERROR+0x50>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d013      	beq.n	800100c <Print_ERROR+0x40>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ERROR 1 reset TIME\n\r"), 1000);
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	490e      	ldr	r1, [pc, #56]	; (8001020 <Print_ERROR+0x54>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f003 f9ef 	bl	80043cc <siprintf>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4639      	mov	r1, r7
 8000ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff8:	480a      	ldr	r0, [pc, #40]	; (8001024 <Print_ERROR+0x58>)
 8000ffa:	f002 fd2a 	bl	8003a52 <HAL_UART_Transmit>
		RED_TIME = GREEN_TIME + YELLOW_TIME;
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <Print_ERROR+0x48>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <Print_ERROR+0x4c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <Print_ERROR+0x50>)
 800100a:	6013      	str	r3, [r2, #0]
	}
}
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000014 	.word	0x20000014
 8001018:	20000018 	.word	0x20000018
 800101c:	20000010 	.word	0x20000010
 8001020:	08004cb8 	.word	0x08004cb8
 8001024:	20000194 	.word	0x20000194

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f000 fd9e 	bl	8001b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f852 	bl	80010d8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init ();
 8001034:	f000 f978 	bl	8001328 <MX_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001038:	f000 f976 	bl	8001328 <MX_GPIO_Init>
  MX_TIM2_Init();
 800103c:	f000 f888 	bl	8001150 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001040:	f000 f948 	bl	80012d4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001044:	f000 f8d0 	bl	80011e8 <MX_TIM3_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001048:	2100      	movs	r1, #0
 800104a:	481a      	ldr	r0, [pc, #104]	; (80010b4 <main+0x8c>)
 800104c:	f001 fe66 	bl	8002d1c <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8001050:	4819      	ldr	r0, [pc, #100]	; (80010b8 <main+0x90>)
 8001052:	f001 fdbf 	bl	8002bd4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */

  SCH_Init();
 8001056:	f000 f9f5 	bl	8001444 <SCH_Init>
  setTimer0(10);
 800105a:	200a      	movs	r0, #10
 800105c:	f000 fd04 	bl	8001a68 <setTimer0>
  setTimer3(10);
 8001060:	200a      	movs	r0, #10
 8001062:	f000 fd15 	bl	8001a90 <setTimer3>



  SCH_Add_Task(timerRun0, 20, 10);
 8001066:	220a      	movs	r2, #10
 8001068:	2114      	movs	r1, #20
 800106a:	4814      	ldr	r0, [pc, #80]	; (80010bc <main+0x94>)
 800106c:	f000 f9f6 	bl	800145c <SCH_Add_Task>
  SCH_Add_Task(timerRun3, 20, 10);
 8001070:	220a      	movs	r2, #10
 8001072:	2114      	movs	r1, #20
 8001074:	4812      	ldr	r0, [pc, #72]	; (80010c0 <main+0x98>)
 8001076:	f000 f9f1 	bl	800145c <SCH_Add_Task>
  SCH_Add_Task(button_reading, 10, 10);
 800107a:	220a      	movs	r2, #10
 800107c:	210a      	movs	r1, #10
 800107e:	4811      	ldr	r0, [pc, #68]	; (80010c4 <main+0x9c>)
 8001080:	f000 f9ec 	bl	800145c <SCH_Add_Task>

  SCH_Add_Task(fsm_automatic_run1, 20, 10);
 8001084:	220a      	movs	r2, #10
 8001086:	2114      	movs	r1, #20
 8001088:	480f      	ldr	r0, [pc, #60]	; (80010c8 <main+0xa0>)
 800108a:	f000 f9e7 	bl	800145c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run2, 20, 10);
 800108e:	220a      	movs	r2, #10
 8001090:	2114      	movs	r1, #20
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <main+0xa4>)
 8001094:	f000 f9e2 	bl	800145c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run3, 20, 10);
 8001098:	220a      	movs	r2, #10
 800109a:	2114      	movs	r1, #20
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <main+0xa8>)
 800109e:	f000 f9dd 	bl	800145c <SCH_Add_Task>
  SCH_Add_Task(fsm_p, 20, 10);
 80010a2:	220a      	movs	r2, #10
 80010a4:	2114      	movs	r1, #20
 80010a6:	480b      	ldr	r0, [pc, #44]	; (80010d4 <main+0xac>)
 80010a8:	f000 f9d8 	bl	800145c <SCH_Add_Task>


  while (1)
  {

	  SCH_Dispatch_Tasks();
 80010ac:	f000 fa9c 	bl	80015e8 <SCH_Dispatch_Tasks>
 80010b0:	e7fc      	b.n	80010ac <main+0x84>
 80010b2:	bf00      	nop
 80010b4:	20000104 	.word	0x20000104
 80010b8:	2000014c 	.word	0x2000014c
 80010bc:	08001ab9 	.word	0x08001ab9
 80010c0:	08001aed 	.word	0x08001aed
 80010c4:	08000ca5 	.word	0x08000ca5
 80010c8:	0800029d 	.word	0x0800029d
 80010cc:	08000385 	.word	0x08000385
 80010d0:	08000535 	.word	0x08000535
 80010d4:	0800046d 	.word	0x0800046d

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b090      	sub	sp, #64	; 0x40
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2228      	movs	r2, #40	; 0x28
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 f968 	bl	80043bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fe:	2301      	movs	r3, #1
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001102:	2310      	movs	r3, #16
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001106:	2300      	movs	r3, #0
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	4618      	mov	r0, r3
 8001110:	f001 f8f6 	bl	8002300 <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800111a:	f000 f98e 	bl	800143a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fb62 	bl	8002800 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001142:	f000 f97a 	bl	800143a <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3740      	adds	r7, #64	; 0x40
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	463b      	mov	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_TIM2_Init+0x94>)
 800116e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001172:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001176:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800117a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_TIM2_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001184:	2209      	movs	r2, #9
 8001186:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_TIM2_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001194:	4813      	ldr	r0, [pc, #76]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001196:	f001 fccd 	bl	8002b34 <HAL_TIM_Base_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011a0:	f000 f94b 	bl	800143a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	4619      	mov	r1, r3
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <MX_TIM2_Init+0x94>)
 80011b2:	f002 f815 	bl	80031e0 <HAL_TIM_ConfigClockSource>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011bc:	f000 f93d 	bl	800143a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_TIM2_Init+0x94>)
 80011ce:	f002 fb89 	bl	80038e4 <HAL_TIMEx_MasterConfigSynchronization>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011d8:	f000 f92f 	bl	800143a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2000014c 	.word	0x2000014c

080011e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
 8001216:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_TIM3_Init+0xe4>)
 800121a:	4a2d      	ldr	r2, [pc, #180]	; (80012d0 <MX_TIM3_Init+0xe8>)
 800121c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001220:	223f      	movs	r2, #63	; 0x3f
 8001222:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <MX_TIM3_Init+0xe4>)
 800122c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001230:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <MX_TIM3_Init+0xe4>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800123e:	4823      	ldr	r0, [pc, #140]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001240:	f001 fc78 	bl	8002b34 <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800124a:	f000 f8f6 	bl	800143a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001258:	4619      	mov	r1, r3
 800125a:	481c      	ldr	r0, [pc, #112]	; (80012cc <MX_TIM3_Init+0xe4>)
 800125c:	f001 ffc0 	bl	80031e0 <HAL_TIM_ConfigClockSource>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001266:	f000 f8e8 	bl	800143a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800126a:	4818      	ldr	r0, [pc, #96]	; (80012cc <MX_TIM3_Init+0xe4>)
 800126c:	f001 fcfe 	bl	8002c6c <HAL_TIM_PWM_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001276:	f000 f8e0 	bl	800143a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	4619      	mov	r1, r3
 8001288:	4810      	ldr	r0, [pc, #64]	; (80012cc <MX_TIM3_Init+0xe4>)
 800128a:	f002 fb2b 	bl	80038e4 <HAL_TIMEx_MasterConfigSynchronization>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001294:	f000 f8d1 	bl	800143a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001298:	2360      	movs	r3, #96	; 0x60
 800129a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	4807      	ldr	r0, [pc, #28]	; (80012cc <MX_TIM3_Init+0xe4>)
 80012b0:	f001 fed8 	bl	8003064 <HAL_TIM_PWM_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012ba:	f000 f8be 	bl	800143a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012be:	4803      	ldr	r0, [pc, #12]	; (80012cc <MX_TIM3_Init+0xe4>)
 80012c0:	f000 fad6 	bl	8001870 <HAL_TIM_MspPostInit>

}
 80012c4:	bf00      	nop
 80012c6:	3738      	adds	r7, #56	; 0x38
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000104 	.word	0x20000104
 80012d0:	40000400 	.word	0x40000400

080012d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_USART2_UART_Init+0x50>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 800130c:	f002 fb54 	bl	80039b8 <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001316:	f000 f890 	bl	800143a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000194 	.word	0x20000194
 8001324:	40004400 	.word	0x40004400

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b34      	ldr	r3, [pc, #208]	; (8001410 <MX_GPIO_Init+0xe8>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a33      	ldr	r2, [pc, #204]	; (8001410 <MX_GPIO_Init+0xe8>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b31      	ldr	r3, [pc, #196]	; (8001410 <MX_GPIO_Init+0xe8>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001354:	4b2e      	ldr	r3, [pc, #184]	; (8001410 <MX_GPIO_Init+0xe8>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a2d      	ldr	r2, [pc, #180]	; (8001410 <MX_GPIO_Init+0xe8>)
 800135a:	f043 0308 	orr.w	r3, r3, #8
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <MX_GPIO_Init+0xe8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ledpa_Pin|led1b_Pin|led2b_Pin|led2a_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001372:	4828      	ldr	r0, [pc, #160]	; (8001414 <MX_GPIO_Init+0xec>)
 8001374:	f000 ffab 	bl	80022ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ledpb_Pin|led1a_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800137e:	4826      	ldr	r0, [pc, #152]	; (8001418 <MX_GPIO_Init+0xf0>)
 8001380:	f000 ffa5 	bl	80022ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001384:	2301      	movs	r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0308 	add.w	r3, r7, #8
 8001394:	4619      	mov	r1, r3
 8001396:	4820      	ldr	r0, [pc, #128]	; (8001418 <MX_GPIO_Init+0xf0>)
 8001398:	f000 fe08 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : button_1_Pin button_2_Pin */
  GPIO_InitStruct.Pin = button_1_Pin|button_2_Pin;
 800139c:	2322      	movs	r3, #34	; 0x22
 800139e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	4619      	mov	r1, r3
 80013ae:	481a      	ldr	r0, [pc, #104]	; (8001418 <MX_GPIO_Init+0xf0>)
 80013b0:	f000 fdfc 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : button_3_Pin button_p_Pin */
  GPIO_InitStruct.Pin = button_3_Pin|button_p_Pin;
 80013b4:	2303      	movs	r3, #3
 80013b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013bc:	2301      	movs	r3, #1
 80013be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	4619      	mov	r1, r3
 80013c6:	4813      	ldr	r0, [pc, #76]	; (8001414 <MX_GPIO_Init+0xec>)
 80013c8:	f000 fdf0 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : ledpa_Pin led1b_Pin led2b_Pin led2a_Pin */
  GPIO_InitStruct.Pin = ledpa_Pin|led1b_Pin|led2b_Pin|led2a_Pin;
 80013cc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80013d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2302      	movs	r3, #2
 80013dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	4619      	mov	r1, r3
 80013e4:	480b      	ldr	r0, [pc, #44]	; (8001414 <MX_GPIO_Init+0xec>)
 80013e6:	f000 fde1 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : ledpb_Pin led1a_Pin */
  GPIO_InitStruct.Pin = ledpb_Pin|led1a_Pin;
 80013ea:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80013ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2302      	movs	r3, #2
 80013fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4619      	mov	r1, r3
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_GPIO_Init+0xf0>)
 8001404:	f000 fdd2 	bl	8001fac <HAL_GPIO_Init>

}
 8001408:	bf00      	nop
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40021000 	.word	0x40021000
 8001414:	40010c00 	.word	0x40010c00
 8001418:	40010800 	.word	0x40010800

0800141c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	if( htim -> Instance == TIM2 ){
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142c:	d101      	bne.n	8001432 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 800142e:	f000 f867 	bl	8001500 <SCH_Update>
		}
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143e:	b672      	cpsid	i
}
 8001440:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001442:	e7fe      	b.n	8001442 <Error_Handler+0x8>

08001444 <SCH_Init>:
#include "main.h"
sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
		current_index_task = 0;
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <SCH_Init+0x14>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	200000d4 	.word	0x200000d4

0800145c <SCH_Add_Task>:

void SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS)
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <SCH_Add_Task+0x98>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b27      	cmp	r3, #39	; 0x27
 800146e:	d83c      	bhi.n	80014ea <SCH_Add_Task+0x8e>
	{

		SCH_tasks_G[current_index_task].pTask = pFunction;
 8001470:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <SCH_Add_Task+0x98>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	4a20      	ldr	r2, [pc, #128]	; (80014f8 <SCH_Add_Task+0x9c>)
 8001478:	460b      	mov	r3, r1
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY/TIMER_CYCLE;
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <SCH_Add_Task+0x98>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <SCH_Add_Task+0xa0>)
 8001490:	fba2 2303 	umull	r2, r3, r2, r3
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	4918      	ldr	r1, [pc, #96]	; (80014f8 <SCH_Add_Task+0x9c>)
 8001498:	4603      	mov	r3, r0
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4403      	add	r3, r0
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	3304      	adds	r3, #4
 80014a4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD/TIMER_CYCLE;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <SCH_Add_Task+0x98>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a13      	ldr	r2, [pc, #76]	; (80014fc <SCH_Add_Task+0xa0>)
 80014b0:	fba2 2303 	umull	r2, r3, r2, r3
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	4910      	ldr	r1, [pc, #64]	; (80014f8 <SCH_Add_Task+0x9c>)
 80014b8:	4603      	mov	r3, r0
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4403      	add	r3, r0
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3308      	adds	r3, #8
 80014c4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <SCH_Add_Task+0x98>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <SCH_Add_Task+0x9c>)
 80014ce:	460b      	mov	r3, r1
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	330c      	adds	r3, #12
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
//		SCH_tasks_G[current_index_task].TaskID = current_index_task;
		current_index_task++;
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <SCH_Add_Task+0x98>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <SCH_Add_Task+0x98>)
 80014e8:	701a      	strb	r2, [r3, #0]
//		return current_index_task-1;
	}
//	return -1;
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	200000d4 	.word	0x200000d4
 80014f8:	200001d8 	.word	0x200001d8
 80014fc:	cccccccd 	.word	0xcccccccd

08001500 <SCH_Update>:

void SCH_Update(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < current_index_task; i++)
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	e05d      	b.n	80015c8 <SCH_Update+0xc8>
	{
		if(SCH_tasks_G[i].Delay > 0)
 800150c:	4934      	ldr	r1, [pc, #208]	; (80015e0 <SCH_Update+0xe0>)
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	3304      	adds	r3, #4
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d012      	beq.n	8001548 <SCH_Update+0x48>
		{
			SCH_tasks_G[i].Delay--;
 8001522:	492f      	ldr	r1, [pc, #188]	; (80015e0 <SCH_Update+0xe0>)
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	3304      	adds	r3, #4
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	1e59      	subs	r1, r3, #1
 8001536:	482a      	ldr	r0, [pc, #168]	; (80015e0 <SCH_Update+0xe0>)
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4403      	add	r3, r0
 8001544:	3304      	adds	r3, #4
 8001546:	6019      	str	r1, [r3, #0]
		}
		if(SCH_tasks_G[i].Delay == 0)
 8001548:	4925      	ldr	r1, [pc, #148]	; (80015e0 <SCH_Update+0xe0>)
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	3304      	adds	r3, #4
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d131      	bne.n	80015c2 <SCH_Update+0xc2>
		{
			SCH_tasks_G[i].RunMe +=1;
 800155e:	4920      	ldr	r1, [pc, #128]	; (80015e0 <SCH_Update+0xe0>)
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	330c      	adds	r3, #12
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	b2d8      	uxtb	r0, r3
 8001574:	491a      	ldr	r1, [pc, #104]	; (80015e0 <SCH_Update+0xe0>)
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	330c      	adds	r3, #12
 8001584:	4602      	mov	r2, r0
 8001586:	701a      	strb	r2, [r3, #0]
			if(SCH_tasks_G[i].Period)
 8001588:	4915      	ldr	r1, [pc, #84]	; (80015e0 <SCH_Update+0xe0>)
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	3308      	adds	r3, #8
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d011      	beq.n	80015c2 <SCH_Update+0xc2>
					SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 800159e:	4910      	ldr	r1, [pc, #64]	; (80015e0 <SCH_Update+0xe0>)
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	3308      	adds	r3, #8
 80015ae:	6819      	ldr	r1, [r3, #0]
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <SCH_Update+0xe0>)
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4403      	add	r3, r0
 80015be:	3304      	adds	r3, #4
 80015c0:	6019      	str	r1, [r3, #0]
	for(int i = 0 ; i < current_index_task; i++)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3301      	adds	r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <SCH_Update+0xe4>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4293      	cmp	r3, r2
 80015d2:	db9b      	blt.n	800150c <SCH_Update+0xc>
		}

	}
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	200001d8 	.word	0x200001d8
 80015e4:	200000d4 	.word	0x200000d4

080015e8 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
	for( int i = 0; i < current_index_task; i++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	e051      	b.n	8001698 <SCH_Dispatch_Tasks+0xb0>
	{
		if(SCH_tasks_G[i].RunMe > 0)
 80015f4:	492e      	ldr	r1, [pc, #184]	; (80016b0 <SCH_Dispatch_Tasks+0xc8>)
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	330c      	adds	r3, #12
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d043      	beq.n	8001692 <SCH_Dispatch_Tasks+0xaa>
		{
			SCH_tasks_G[i].RunMe--;
 800160a:	4929      	ldr	r1, [pc, #164]	; (80016b0 <SCH_Dispatch_Tasks+0xc8>)
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	330c      	adds	r3, #12
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	b2d8      	uxtb	r0, r3
 8001620:	4923      	ldr	r1, [pc, #140]	; (80016b0 <SCH_Dispatch_Tasks+0xc8>)
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	330c      	adds	r3, #12
 8001630:	4602      	mov	r2, r0
 8001632:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 8001634:	491e      	ldr	r1, [pc, #120]	; (80016b0 <SCH_Dispatch_Tasks+0xc8>)
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4798      	blx	r3
			if(SCH_tasks_G[i].Delay == 0 && SCH_tasks_G[i].Period == 0 && SCH_tasks_G[i].RunMe == 0)
 8001646:	491a      	ldr	r1, [pc, #104]	; (80016b0 <SCH_Dispatch_Tasks+0xc8>)
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3304      	adds	r3, #4
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d11a      	bne.n	8001692 <SCH_Dispatch_Tasks+0xaa>
 800165c:	4914      	ldr	r1, [pc, #80]	; (80016b0 <SCH_Dispatch_Tasks+0xc8>)
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	3308      	adds	r3, #8
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10f      	bne.n	8001692 <SCH_Dispatch_Tasks+0xaa>
 8001672:	490f      	ldr	r1, [pc, #60]	; (80016b0 <SCH_Dispatch_Tasks+0xc8>)
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	330c      	adds	r3, #12
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d104      	bne.n	8001692 <SCH_Dispatch_Tasks+0xaa>
			{
				SCH_Delete_Task(i);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	f000 f813 	bl	80016b8 <SCH_Delete_Task>
	for( int i = 0; i < current_index_task; i++)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3301      	adds	r3, #1
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <SCH_Dispatch_Tasks+0xcc>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4293      	cmp	r3, r2
 80016a2:	dba7      	blt.n	80015f4 <SCH_Dispatch_Tasks+0xc>
			}
		}

	}
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200001d8 	.word	0x200001d8
 80016b4:	200000d4 	.word	0x200000d4

080016b8 <SCH_Delete_Task>:

void SCH_Delete_Task(const uint8_t TASK_INDEX)//in array index is taskid
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
   if(TASK_INDEX >= current_index_task)
 80016c2:	4b34      	ldr	r3, [pc, #208]	; (8001794 <SCH_Delete_Task+0xdc>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	79fa      	ldrb	r2, [r7, #7]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d25d      	bcs.n	8001788 <SCH_Delete_Task+0xd0>
   {
	   return ;
   }
   else
   {
	   for( int i = TASK_INDEX; i < current_index_task - 1; i++)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e04d      	b.n	800176e <SCH_Delete_Task+0xb6>
	   {
			SCH_tasks_G[i].pTask = SCH_tasks_G[i + 1].pTask;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	4930      	ldr	r1, [pc, #192]	; (8001798 <SCH_Delete_Task+0xe0>)
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	482c      	ldr	r0, [pc, #176]	; (8001798 <SCH_Delete_Task+0xe0>)
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4403      	add	r3, r0
 80016f2:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Delay = SCH_tasks_G[i + 1].Delay;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	4927      	ldr	r1, [pc, #156]	; (8001798 <SCH_Delete_Task+0xe0>)
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	3304      	adds	r3, #4
 8001706:	6819      	ldr	r1, [r3, #0]
 8001708:	4823      	ldr	r0, [pc, #140]	; (8001798 <SCH_Delete_Task+0xe0>)
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4403      	add	r3, r0
 8001716:	3304      	adds	r3, #4
 8001718:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Period = SCH_tasks_G[i + 1].Period;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	491e      	ldr	r1, [pc, #120]	; (8001798 <SCH_Delete_Task+0xe0>)
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	3308      	adds	r3, #8
 800172c:	6819      	ldr	r1, [r3, #0]
 800172e:	481a      	ldr	r0, [pc, #104]	; (8001798 <SCH_Delete_Task+0xe0>)
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4403      	add	r3, r0
 800173c:	3308      	adds	r3, #8
 800173e:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe = SCH_tasks_G[i + 1].RunMe;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	4914      	ldr	r1, [pc, #80]	; (8001798 <SCH_Delete_Task+0xe0>)
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	330c      	adds	r3, #12
 8001752:	7818      	ldrb	r0, [r3, #0]
 8001754:	4910      	ldr	r1, [pc, #64]	; (8001798 <SCH_Delete_Task+0xe0>)
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	330c      	adds	r3, #12
 8001764:	4602      	mov	r2, r0
 8001766:	701a      	strb	r2, [r3, #0]
	   for( int i = TASK_INDEX; i < current_index_task - 1; i++)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	3301      	adds	r3, #1
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <SCH_Delete_Task+0xdc>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	3b01      	subs	r3, #1
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	429a      	cmp	r2, r3
 8001778:	dbab      	blt.n	80016d2 <SCH_Delete_Task+0x1a>
	   }

	   current_index_task--;
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <SCH_Delete_Task+0xdc>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	3b01      	subs	r3, #1
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SCH_Delete_Task+0xdc>)
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	e000      	b.n	800178a <SCH_Delete_Task+0xd2>
	   return ;
 8001788:	bf00      	nop
//	   return ;
   }
}
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	200000d4 	.word	0x200000d4
 8001798:	200001d8 	.word	0x200001d8

0800179c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_MspInit+0x5c>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <HAL_MspInit+0x5c>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6193      	str	r3, [r2, #24]
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_MspInit+0x5c>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_MspInit+0x5c>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_MspInit+0x5c>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_MspInit+0x5c>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_MspInit+0x60>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_MspInit+0x60>)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000

08001800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001810:	d114      	bne.n	800183c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_TIM_Base_MspInit+0x68>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4a14      	ldr	r2, [pc, #80]	; (8001868 <HAL_TIM_Base_MspInit+0x68>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	61d3      	str	r3, [r2, #28]
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_TIM_Base_MspInit+0x68>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	201c      	movs	r0, #28
 8001830:	f000 fad5 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001834:	201c      	movs	r0, #28
 8001836:	f000 faee 	bl	8001e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800183a:	e010      	b.n	800185e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0a      	ldr	r2, [pc, #40]	; (800186c <HAL_TIM_Base_MspInit+0x6c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d10b      	bne.n	800185e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_TIM_Base_MspInit+0x68>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_TIM_Base_MspInit+0x68>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_TIM_Base_MspInit+0x68>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	40000400 	.word	0x40000400

08001870 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <HAL_TIM_MspPostInit+0x58>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d117      	bne.n	80018c0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_TIM_MspPostInit+0x5c>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <HAL_TIM_MspPostInit+0x5c>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_TIM_MspPostInit+0x5c>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018a8:	2340      	movs	r3, #64	; 0x40
 80018aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2302      	movs	r3, #2
 80018b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	4619      	mov	r1, r3
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <HAL_TIM_MspPostInit+0x60>)
 80018bc:	f000 fb76 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018c0:	bf00      	nop
 80018c2:	3720      	adds	r7, #32
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40000400 	.word	0x40000400
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010800 	.word	0x40010800

080018d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a1f      	ldr	r2, [pc, #124]	; (800196c <HAL_UART_MspInit+0x98>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d137      	bne.n	8001964 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_UART_MspInit+0x9c>)
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <HAL_UART_MspInit+0x9c>)
 80018fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fe:	61d3      	str	r3, [r2, #28]
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_UART_MspInit+0x9c>)
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_UART_MspInit+0x9c>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a17      	ldr	r2, [pc, #92]	; (8001970 <HAL_UART_MspInit+0x9c>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_UART_MspInit+0x9c>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001924:	2304      	movs	r3, #4
 8001926:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	4619      	mov	r1, r3
 8001936:	480f      	ldr	r0, [pc, #60]	; (8001974 <HAL_UART_MspInit+0xa0>)
 8001938:	f000 fb38 	bl	8001fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800193c:	2308      	movs	r3, #8
 800193e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	4619      	mov	r1, r3
 800194e:	4809      	ldr	r0, [pc, #36]	; (8001974 <HAL_UART_MspInit+0xa0>)
 8001950:	f000 fb2c 	bl	8001fac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	2026      	movs	r0, #38	; 0x26
 800195a:	f000 fa40 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800195e:	2026      	movs	r0, #38	; 0x26
 8001960:	f000 fa59 	bl	8001e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001964:	bf00      	nop
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40004400 	.word	0x40004400
 8001970:	40021000 	.word	0x40021000
 8001974:	40010800 	.word	0x40010800

08001978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800197c:	e7fe      	b.n	800197c <NMI_Handler+0x4>

0800197e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <MemManage_Handler+0x4>

0800198a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <BusFault_Handler+0x4>

08001990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <UsageFault_Handler+0x4>

08001996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019be:	f000 f91b 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <TIM2_IRQHandler+0x10>)
 80019ce:	f001 fa41 	bl	8002e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000014c 	.word	0x2000014c

080019dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <USART2_IRQHandler+0x10>)
 80019e2:	f002 f8c9 	bl	8003b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000194 	.word	0x20000194

080019f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f8:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <_sbrk+0x5c>)
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <_sbrk+0x60>)
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <_sbrk+0x64>)
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <_sbrk+0x68>)
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d207      	bcs.n	8001a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a20:	f002 fca2 	bl	8004368 <__errno>
 8001a24:	4603      	mov	r3, r0
 8001a26:	220c      	movs	r2, #12
 8001a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	e009      	b.n	8001a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <_sbrk+0x64>)
 8001a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20002800 	.word	0x20002800
 8001a50:	00000400 	.word	0x00000400
 8001a54:	200000d8 	.word	0x200000d8
 8001a58:	20000510 	.word	0x20000510

08001a5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <setTimer0>:
int timerOut1_counter = 0;

int timerOut2_flag = 0;
int timerOut2_counter = 0;

void setTimer0(int duration){
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 8001a70:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <setTimer0+0x20>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <setTimer0+0x24>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
};
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	200000e0 	.word	0x200000e0
 8001a8c:	200000dc 	.word	0x200000dc

08001a90 <setTimer3>:
};
void setTimer2(int duration){
	timer2_counter = duration;
	timer2_flag = 0;
};
void setTimer3(int duration){
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001a98:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <setTimer3+0x20>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <setTimer3+0x24>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
};
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	200000e8 	.word	0x200000e8
 8001ab4:	200000e4 	.word	0x200000e4

08001ab8 <timerRun0>:
	timerOut2_flag = 0;
	timerOut2_counter = duration;
};


void timerRun0(){
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
	if(timer0_counter > 0 )
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <timerRun0+0x2c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	dd0b      	ble.n	8001adc <timerRun0+0x24>
	{
		timer0_counter --;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <timerRun0+0x2c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <timerRun0+0x2c>)
 8001acc:	6013      	str	r3, [r2, #0]
		if(timer0_counter <=0){
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <timerRun0+0x2c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	dc02      	bgt.n	8001adc <timerRun0+0x24>
			timer0_flag=1;
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <timerRun0+0x30>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
		}
	}
};
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	200000e0 	.word	0x200000e0
 8001ae8:	200000dc 	.word	0x200000dc

08001aec <timerRun3>:
			timer2_flag=1;
		}
	}
};

void timerRun3(){
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
	if(timer3_counter > 0 )
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <timerRun3+0x2c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	dd0b      	ble.n	8001b10 <timerRun3+0x24>
	{
		timer3_counter --;
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <timerRun3+0x2c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <timerRun3+0x2c>)
 8001b00:	6013      	str	r3, [r2, #0]
		if(timer3_counter <=0){
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <timerRun3+0x2c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	dc02      	bgt.n	8001b10 <timerRun3+0x24>
			timer3_flag=1;
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <timerRun3+0x30>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
		}
	}
};
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	200000e8 	.word	0x200000e8
 8001b1c:	200000e4 	.word	0x200000e4

08001b20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b22:	490d      	ldr	r1, [pc, #52]	; (8001b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b24:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b38:	4c0a      	ldr	r4, [pc, #40]	; (8001b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b46:	f7ff ff89 	bl	8001a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f002 fc13 	bl	8004374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b4e:	f7ff fa6b 	bl	8001028 <main>
  bx lr
 8001b52:	4770      	bx	lr
  ldr r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b58:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001b5c:	08004d34 	.word	0x08004d34
  ldr r2, =_sbss
 8001b60:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001b64:	2000050c 	.word	0x2000050c

08001b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC1_2_IRQHandler>
	...

08001b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_Init+0x28>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_Init+0x28>)
 8001b76:	f043 0310 	orr.w	r3, r3, #16
 8001b7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f000 f923 	bl	8001dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b82:	200f      	movs	r0, #15
 8001b84:	f000 f808 	bl	8001b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b88:	f7ff fe08 	bl	800179c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40022000 	.word	0x40022000

08001b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x54>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x58>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f93b 	bl	8001e32 <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00e      	b.n	8001be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b0f      	cmp	r3, #15
 8001bca:	d80a      	bhi.n	8001be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f000 f903 	bl	8001dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <HAL_InitTick+0x5c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000020 	.word	0x20000020
 8001bf0:	20000028 	.word	0x20000028
 8001bf4:	20000024 	.word	0x20000024

08001bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_IncTick+0x1c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_IncTick+0x20>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a03      	ldr	r2, [pc, #12]	; (8001c18 <HAL_IncTick+0x20>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	20000028 	.word	0x20000028
 8001c18:	200004f8 	.word	0x200004f8

08001c1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b02      	ldr	r3, [pc, #8]	; (8001c2c <HAL_GetTick+0x10>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	200004f8 	.word	0x200004f8

08001c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c62:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60d3      	str	r3, [r2, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db0b      	blt.n	8001cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4906      	ldr	r1, [pc, #24]	; (8001cc8 <__NVIC_EnableIRQ+0x34>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e100 	.word	0xe000e100

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	; (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	; (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d94:	d301      	bcc.n	8001d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00f      	b.n	8001dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <SysTick_Config+0x40>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da2:	210f      	movs	r1, #15
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295
 8001da8:	f7ff ff90 	bl	8001ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <SysTick_Config+0x40>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <SysTick_Config+0x40>)
 8001db4:	2207      	movs	r2, #7
 8001db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	e000e010 	.word	0xe000e010

08001dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ff2d 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df0:	f7ff ff42 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	6978      	ldr	r0, [r7, #20]
 8001dfc:	f7ff ff90 	bl	8001d20 <NVIC_EncodePriority>
 8001e00:	4602      	mov	r2, r0
 8001e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e06:	4611      	mov	r1, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff5f 	bl	8001ccc <__NVIC_SetPriority>
}
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff35 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ffa2 	bl	8001d84 <SysTick_Config>
 8001e40:	4603      	mov	r3, r0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d008      	beq.n	8001e72 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2204      	movs	r2, #4
 8001e64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e020      	b.n	8001eb4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 020e 	bic.w	r2, r2, #14
 8001e80:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0201 	bic.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d005      	beq.n	8001ee2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2204      	movs	r2, #4
 8001eda:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e051      	b.n	8001f86 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 020e 	bic.w	r2, r2, #14
 8001ef0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0201 	bic.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <HAL_DMA_Abort_IT+0xd0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d029      	beq.n	8001f60 <HAL_DMA_Abort_IT+0xa0>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a20      	ldr	r2, [pc, #128]	; (8001f94 <HAL_DMA_Abort_IT+0xd4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d022      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x9c>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <HAL_DMA_Abort_IT+0xd8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d01a      	beq.n	8001f56 <HAL_DMA_Abort_IT+0x96>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <HAL_DMA_Abort_IT+0xdc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d012      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x90>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <HAL_DMA_Abort_IT+0xe0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00a      	beq.n	8001f4a <HAL_DMA_Abort_IT+0x8a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1a      	ldr	r2, [pc, #104]	; (8001fa4 <HAL_DMA_Abort_IT+0xe4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d102      	bne.n	8001f44 <HAL_DMA_Abort_IT+0x84>
 8001f3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f42:	e00e      	b.n	8001f62 <HAL_DMA_Abort_IT+0xa2>
 8001f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f48:	e00b      	b.n	8001f62 <HAL_DMA_Abort_IT+0xa2>
 8001f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f4e:	e008      	b.n	8001f62 <HAL_DMA_Abort_IT+0xa2>
 8001f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f54:	e005      	b.n	8001f62 <HAL_DMA_Abort_IT+0xa2>
 8001f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f5a:	e002      	b.n	8001f62 <HAL_DMA_Abort_IT+0xa2>
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	e000      	b.n	8001f62 <HAL_DMA_Abort_IT+0xa2>
 8001f60:	2301      	movs	r3, #1
 8001f62:	4a11      	ldr	r2, [pc, #68]	; (8001fa8 <HAL_DMA_Abort_IT+0xe8>)
 8001f64:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	4798      	blx	r3
    } 
  }
  return status;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40020008 	.word	0x40020008
 8001f94:	4002001c 	.word	0x4002001c
 8001f98:	40020030 	.word	0x40020030
 8001f9c:	40020044 	.word	0x40020044
 8001fa0:	40020058 	.word	0x40020058
 8001fa4:	4002006c 	.word	0x4002006c
 8001fa8:	40020000 	.word	0x40020000

08001fac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b08b      	sub	sp, #44	; 0x2c
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	e148      	b.n	8002252 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	f040 8137 	bne.w	800224c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4aa3      	ldr	r2, [pc, #652]	; (8002270 <HAL_GPIO_Init+0x2c4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d05e      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
 8001fe8:	4aa1      	ldr	r2, [pc, #644]	; (8002270 <HAL_GPIO_Init+0x2c4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d875      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 8001fee:	4aa1      	ldr	r2, [pc, #644]	; (8002274 <HAL_GPIO_Init+0x2c8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d058      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
 8001ff4:	4a9f      	ldr	r2, [pc, #636]	; (8002274 <HAL_GPIO_Init+0x2c8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d86f      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 8001ffa:	4a9f      	ldr	r2, [pc, #636]	; (8002278 <HAL_GPIO_Init+0x2cc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d052      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
 8002000:	4a9d      	ldr	r2, [pc, #628]	; (8002278 <HAL_GPIO_Init+0x2cc>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d869      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 8002006:	4a9d      	ldr	r2, [pc, #628]	; (800227c <HAL_GPIO_Init+0x2d0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d04c      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
 800200c:	4a9b      	ldr	r2, [pc, #620]	; (800227c <HAL_GPIO_Init+0x2d0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d863      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 8002012:	4a9b      	ldr	r2, [pc, #620]	; (8002280 <HAL_GPIO_Init+0x2d4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d046      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
 8002018:	4a99      	ldr	r2, [pc, #612]	; (8002280 <HAL_GPIO_Init+0x2d4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d85d      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 800201e:	2b12      	cmp	r3, #18
 8002020:	d82a      	bhi.n	8002078 <HAL_GPIO_Init+0xcc>
 8002022:	2b12      	cmp	r3, #18
 8002024:	d859      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 8002026:	a201      	add	r2, pc, #4	; (adr r2, 800202c <HAL_GPIO_Init+0x80>)
 8002028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202c:	080020a7 	.word	0x080020a7
 8002030:	08002081 	.word	0x08002081
 8002034:	08002093 	.word	0x08002093
 8002038:	080020d5 	.word	0x080020d5
 800203c:	080020db 	.word	0x080020db
 8002040:	080020db 	.word	0x080020db
 8002044:	080020db 	.word	0x080020db
 8002048:	080020db 	.word	0x080020db
 800204c:	080020db 	.word	0x080020db
 8002050:	080020db 	.word	0x080020db
 8002054:	080020db 	.word	0x080020db
 8002058:	080020db 	.word	0x080020db
 800205c:	080020db 	.word	0x080020db
 8002060:	080020db 	.word	0x080020db
 8002064:	080020db 	.word	0x080020db
 8002068:	080020db 	.word	0x080020db
 800206c:	080020db 	.word	0x080020db
 8002070:	08002089 	.word	0x08002089
 8002074:	0800209d 	.word	0x0800209d
 8002078:	4a82      	ldr	r2, [pc, #520]	; (8002284 <HAL_GPIO_Init+0x2d8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800207e:	e02c      	b.n	80020da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	623b      	str	r3, [r7, #32]
          break;
 8002086:	e029      	b.n	80020dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	3304      	adds	r3, #4
 800208e:	623b      	str	r3, [r7, #32]
          break;
 8002090:	e024      	b.n	80020dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	3308      	adds	r3, #8
 8002098:	623b      	str	r3, [r7, #32]
          break;
 800209a:	e01f      	b.n	80020dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	330c      	adds	r3, #12
 80020a2:	623b      	str	r3, [r7, #32]
          break;
 80020a4:	e01a      	b.n	80020dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020ae:	2304      	movs	r3, #4
 80020b0:	623b      	str	r3, [r7, #32]
          break;
 80020b2:	e013      	b.n	80020dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020bc:	2308      	movs	r3, #8
 80020be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	611a      	str	r2, [r3, #16]
          break;
 80020c6:	e009      	b.n	80020dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020c8:	2308      	movs	r3, #8
 80020ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	615a      	str	r2, [r3, #20]
          break;
 80020d2:	e003      	b.n	80020dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
          break;
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x130>
          break;
 80020da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2bff      	cmp	r3, #255	; 0xff
 80020e0:	d801      	bhi.n	80020e6 <HAL_GPIO_Init+0x13a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	e001      	b.n	80020ea <HAL_GPIO_Init+0x13e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3304      	adds	r3, #4
 80020ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2bff      	cmp	r3, #255	; 0xff
 80020f0:	d802      	bhi.n	80020f8 <HAL_GPIO_Init+0x14c>
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	e002      	b.n	80020fe <HAL_GPIO_Init+0x152>
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	3b08      	subs	r3, #8
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	210f      	movs	r1, #15
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	401a      	ands	r2, r3
 8002110:	6a39      	ldr	r1, [r7, #32]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	431a      	orrs	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8090 	beq.w	800224c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800212c:	4b56      	ldr	r3, [pc, #344]	; (8002288 <HAL_GPIO_Init+0x2dc>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	4a55      	ldr	r2, [pc, #340]	; (8002288 <HAL_GPIO_Init+0x2dc>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6193      	str	r3, [r2, #24]
 8002138:	4b53      	ldr	r3, [pc, #332]	; (8002288 <HAL_GPIO_Init+0x2dc>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002144:	4a51      	ldr	r2, [pc, #324]	; (800228c <HAL_GPIO_Init+0x2e0>)
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002150:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	220f      	movs	r2, #15
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4013      	ands	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a49      	ldr	r2, [pc, #292]	; (8002290 <HAL_GPIO_Init+0x2e4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00d      	beq.n	800218c <HAL_GPIO_Init+0x1e0>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a48      	ldr	r2, [pc, #288]	; (8002294 <HAL_GPIO_Init+0x2e8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <HAL_GPIO_Init+0x1dc>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a47      	ldr	r2, [pc, #284]	; (8002298 <HAL_GPIO_Init+0x2ec>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d101      	bne.n	8002184 <HAL_GPIO_Init+0x1d8>
 8002180:	2302      	movs	r3, #2
 8002182:	e004      	b.n	800218e <HAL_GPIO_Init+0x1e2>
 8002184:	2303      	movs	r3, #3
 8002186:	e002      	b.n	800218e <HAL_GPIO_Init+0x1e2>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <HAL_GPIO_Init+0x1e2>
 800218c:	2300      	movs	r3, #0
 800218e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002190:	f002 0203 	and.w	r2, r2, #3
 8002194:	0092      	lsls	r2, r2, #2
 8002196:	4093      	lsls	r3, r2
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800219e:	493b      	ldr	r1, [pc, #236]	; (800228c <HAL_GPIO_Init+0x2e0>)
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	3302      	adds	r3, #2
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d006      	beq.n	80021c6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021b8:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_GPIO_Init+0x2f0>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4937      	ldr	r1, [pc, #220]	; (800229c <HAL_GPIO_Init+0x2f0>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021c6:	4b35      	ldr	r3, [pc, #212]	; (800229c <HAL_GPIO_Init+0x2f0>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	4933      	ldr	r1, [pc, #204]	; (800229c <HAL_GPIO_Init+0x2f0>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d006      	beq.n	80021ee <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021e0:	4b2e      	ldr	r3, [pc, #184]	; (800229c <HAL_GPIO_Init+0x2f0>)
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	492d      	ldr	r1, [pc, #180]	; (800229c <HAL_GPIO_Init+0x2f0>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
 80021ec:	e006      	b.n	80021fc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ee:	4b2b      	ldr	r3, [pc, #172]	; (800229c <HAL_GPIO_Init+0x2f0>)
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	4929      	ldr	r1, [pc, #164]	; (800229c <HAL_GPIO_Init+0x2f0>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d006      	beq.n	8002216 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002208:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_GPIO_Init+0x2f0>)
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	4923      	ldr	r1, [pc, #140]	; (800229c <HAL_GPIO_Init+0x2f0>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	608b      	str	r3, [r1, #8]
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002216:	4b21      	ldr	r3, [pc, #132]	; (800229c <HAL_GPIO_Init+0x2f0>)
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	43db      	mvns	r3, r3
 800221e:	491f      	ldr	r1, [pc, #124]	; (800229c <HAL_GPIO_Init+0x2f0>)
 8002220:	4013      	ands	r3, r2
 8002222:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_GPIO_Init+0x2f0>)
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	4919      	ldr	r1, [pc, #100]	; (800229c <HAL_GPIO_Init+0x2f0>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	60cb      	str	r3, [r1, #12]
 800223c:	e006      	b.n	800224c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_GPIO_Init+0x2f0>)
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	43db      	mvns	r3, r3
 8002246:	4915      	ldr	r1, [pc, #84]	; (800229c <HAL_GPIO_Init+0x2f0>)
 8002248:	4013      	ands	r3, r2
 800224a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	3301      	adds	r3, #1
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	f47f aeaf 	bne.w	8001fc0 <HAL_GPIO_Init+0x14>
  }
}
 8002262:	bf00      	nop
 8002264:	bf00      	nop
 8002266:	372c      	adds	r7, #44	; 0x2c
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	10320000 	.word	0x10320000
 8002274:	10310000 	.word	0x10310000
 8002278:	10220000 	.word	0x10220000
 800227c:	10210000 	.word	0x10210000
 8002280:	10120000 	.word	0x10120000
 8002284:	10110000 	.word	0x10110000
 8002288:	40021000 	.word	0x40021000
 800228c:	40010000 	.word	0x40010000
 8002290:	40010800 	.word	0x40010800
 8002294:	40010c00 	.word	0x40010c00
 8002298:	40011000 	.word	0x40011000
 800229c:	40010400 	.word	0x40010400

080022a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	887b      	ldrh	r3, [r7, #2]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	e001      	b.n	80022c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	807b      	strh	r3, [r7, #2]
 80022da:	4613      	mov	r3, r2
 80022dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022de:	787b      	ldrb	r3, [r7, #1]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e4:	887a      	ldrh	r2, [r7, #2]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022ea:	e003      	b.n	80022f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022ec:	887b      	ldrh	r3, [r7, #2]
 80022ee:	041a      	lsls	r2, r3, #16
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	611a      	str	r2, [r3, #16]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e26c      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8087 	beq.w	800242e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002320:	4b92      	ldr	r3, [pc, #584]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b04      	cmp	r3, #4
 800232a:	d00c      	beq.n	8002346 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800232c:	4b8f      	ldr	r3, [pc, #572]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	2b08      	cmp	r3, #8
 8002336:	d112      	bne.n	800235e <HAL_RCC_OscConfig+0x5e>
 8002338:	4b8c      	ldr	r3, [pc, #560]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002344:	d10b      	bne.n	800235e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002346:	4b89      	ldr	r3, [pc, #548]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d06c      	beq.n	800242c <HAL_RCC_OscConfig+0x12c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d168      	bne.n	800242c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e246      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x76>
 8002368:	4b80      	ldr	r3, [pc, #512]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a7f      	ldr	r2, [pc, #508]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800236e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	e02e      	b.n	80023d4 <HAL_RCC_OscConfig+0xd4>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x98>
 800237e:	4b7b      	ldr	r3, [pc, #492]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a7a      	ldr	r2, [pc, #488]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b78      	ldr	r3, [pc, #480]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a77      	ldr	r2, [pc, #476]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e01d      	b.n	80023d4 <HAL_RCC_OscConfig+0xd4>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0xbc>
 80023a2:	4b72      	ldr	r3, [pc, #456]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a71      	ldr	r2, [pc, #452]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b6f      	ldr	r3, [pc, #444]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a6e      	ldr	r2, [pc, #440]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e00b      	b.n	80023d4 <HAL_RCC_OscConfig+0xd4>
 80023bc:	4b6b      	ldr	r3, [pc, #428]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a6a      	ldr	r2, [pc, #424]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b68      	ldr	r3, [pc, #416]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a67      	ldr	r2, [pc, #412]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff fc1e 	bl	8001c1c <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7ff fc1a 	bl	8001c1c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1fa      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b5d      	ldr	r3, [pc, #372]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0xe4>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff fc0a 	bl	8001c1c <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240c:	f7ff fc06 	bl	8001c1c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e1e6      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x10c>
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d063      	beq.n	8002502 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800243a:	4b4c      	ldr	r3, [pc, #304]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002446:	4b49      	ldr	r3, [pc, #292]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b08      	cmp	r3, #8
 8002450:	d11c      	bne.n	800248c <HAL_RCC_OscConfig+0x18c>
 8002452:	4b46      	ldr	r3, [pc, #280]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d116      	bne.n	800248c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	4b43      	ldr	r3, [pc, #268]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_RCC_OscConfig+0x176>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d001      	beq.n	8002476 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e1ba      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4939      	ldr	r1, [pc, #228]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248a:	e03a      	b.n	8002502 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d020      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002494:	4b36      	ldr	r3, [pc, #216]	; (8002570 <HAL_RCC_OscConfig+0x270>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7ff fbbf 	bl	8001c1c <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a2:	f7ff fbbb 	bl	8001c1c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e19b      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	4b2a      	ldr	r3, [pc, #168]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4927      	ldr	r1, [pc, #156]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]
 80024d4:	e015      	b.n	8002502 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d6:	4b26      	ldr	r3, [pc, #152]	; (8002570 <HAL_RCC_OscConfig+0x270>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7ff fb9e 	bl	8001c1c <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e4:	f7ff fb9a 	bl	8001c1c <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e17a      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d03a      	beq.n	8002584 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d019      	beq.n	800254a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <HAL_RCC_OscConfig+0x274>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251c:	f7ff fb7e 	bl	8001c1c <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002524:	f7ff fb7a 	bl	8001c1c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e15a      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002542:	2001      	movs	r0, #1
 8002544:	f000 fad8 	bl	8002af8 <RCC_Delay>
 8002548:	e01c      	b.n	8002584 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_RCC_OscConfig+0x274>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002550:	f7ff fb64 	bl	8001c1c <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002556:	e00f      	b.n	8002578 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002558:	f7ff fb60 	bl	8001c1c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d908      	bls.n	8002578 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e140      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
 8002570:	42420000 	.word	0x42420000
 8002574:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b9e      	ldr	r3, [pc, #632]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1e9      	bne.n	8002558 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a6 	beq.w	80026de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b97      	ldr	r3, [pc, #604]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10d      	bne.n	80025be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	4b94      	ldr	r3, [pc, #592]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	4a93      	ldr	r2, [pc, #588]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ac:	61d3      	str	r3, [r2, #28]
 80025ae:	4b91      	ldr	r3, [pc, #580]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ba:	2301      	movs	r3, #1
 80025bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025be:	4b8e      	ldr	r3, [pc, #568]	; (80027f8 <HAL_RCC_OscConfig+0x4f8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d118      	bne.n	80025fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ca:	4b8b      	ldr	r3, [pc, #556]	; (80027f8 <HAL_RCC_OscConfig+0x4f8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a8a      	ldr	r2, [pc, #552]	; (80027f8 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d6:	f7ff fb21 	bl	8001c1c <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025de:	f7ff fb1d 	bl	8001c1c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b64      	cmp	r3, #100	; 0x64
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e0fd      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	4b81      	ldr	r3, [pc, #516]	; (80027f8 <HAL_RCC_OscConfig+0x4f8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x312>
 8002604:	4b7b      	ldr	r3, [pc, #492]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4a7a      	ldr	r2, [pc, #488]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6213      	str	r3, [r2, #32]
 8002610:	e02d      	b.n	800266e <HAL_RCC_OscConfig+0x36e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x334>
 800261a:	4b76      	ldr	r3, [pc, #472]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	4a75      	ldr	r2, [pc, #468]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	6213      	str	r3, [r2, #32]
 8002626:	4b73      	ldr	r3, [pc, #460]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4a72      	ldr	r2, [pc, #456]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	f023 0304 	bic.w	r3, r3, #4
 8002630:	6213      	str	r3, [r2, #32]
 8002632:	e01c      	b.n	800266e <HAL_RCC_OscConfig+0x36e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b05      	cmp	r3, #5
 800263a:	d10c      	bne.n	8002656 <HAL_RCC_OscConfig+0x356>
 800263c:	4b6d      	ldr	r3, [pc, #436]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4a6c      	ldr	r2, [pc, #432]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	f043 0304 	orr.w	r3, r3, #4
 8002646:	6213      	str	r3, [r2, #32]
 8002648:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4a69      	ldr	r2, [pc, #420]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6213      	str	r3, [r2, #32]
 8002654:	e00b      	b.n	800266e <HAL_RCC_OscConfig+0x36e>
 8002656:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a66      	ldr	r2, [pc, #408]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	6213      	str	r3, [r2, #32]
 8002662:	4b64      	ldr	r3, [pc, #400]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4a63      	ldr	r2, [pc, #396]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	f023 0304 	bic.w	r3, r3, #4
 800266c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d015      	beq.n	80026a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7ff fad1 	bl	8001c1c <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267c:	e00a      	b.n	8002694 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7ff facd 	bl	8001c1c <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	; 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e0ab      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002694:	4b57      	ldr	r3, [pc, #348]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ee      	beq.n	800267e <HAL_RCC_OscConfig+0x37e>
 80026a0:	e014      	b.n	80026cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a2:	f7ff fabb 	bl	8001c1c <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7ff fab7 	bl	8001c1c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e095      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c0:	4b4c      	ldr	r3, [pc, #304]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ee      	bne.n	80026aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026cc:	7dfb      	ldrb	r3, [r7, #23]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d105      	bne.n	80026de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d2:	4b48      	ldr	r3, [pc, #288]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4a47      	ldr	r2, [pc, #284]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8081 	beq.w	80027ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e8:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d061      	beq.n	80027b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d146      	bne.n	800278a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fc:	4b3f      	ldr	r3, [pc, #252]	; (80027fc <HAL_RCC_OscConfig+0x4fc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002702:	f7ff fa8b 	bl	8001c1c <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270a:	f7ff fa87 	bl	8001c1c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e067      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271c:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002730:	d108      	bne.n	8002744 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002732:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	492d      	ldr	r1, [pc, #180]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002744:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a19      	ldr	r1, [r3, #32]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	430b      	orrs	r3, r1
 8002756:	4927      	ldr	r1, [pc, #156]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275c:	4b27      	ldr	r3, [pc, #156]	; (80027fc <HAL_RCC_OscConfig+0x4fc>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7ff fa5b 	bl	8001c1c <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276a:	f7ff fa57 	bl	8001c1c <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e037      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x46a>
 8002788:	e02f      	b.n	80027ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278a:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <HAL_RCC_OscConfig+0x4fc>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7ff fa44 	bl	8001c1c <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002798:	f7ff fa40 	bl	8001c1c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e020      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x498>
 80027b6:	e018      	b.n	80027ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e013      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d001      	beq.n	80027ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40007000 	.word	0x40007000
 80027fc:	42420060 	.word	0x42420060

08002800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0d0      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b6a      	ldr	r3, [pc, #424]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d910      	bls.n	8002844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b67      	ldr	r3, [pc, #412]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0207 	bic.w	r2, r3, #7
 800282a:	4965      	ldr	r1, [pc, #404]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b63      	ldr	r3, [pc, #396]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0b8      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d020      	beq.n	8002892 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800285c:	4b59      	ldr	r3, [pc, #356]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a58      	ldr	r2, [pc, #352]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002866:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002874:	4b53      	ldr	r3, [pc, #332]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a52      	ldr	r2, [pc, #328]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800287e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002880:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	494d      	ldr	r1, [pc, #308]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d040      	beq.n	8002920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d115      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e07f      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	4b41      	ldr	r3, [pc, #260]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e073      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b3d      	ldr	r3, [pc, #244]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e06b      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028de:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f023 0203 	bic.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4936      	ldr	r1, [pc, #216]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f0:	f7ff f994 	bl	8001c1c <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	e00a      	b.n	800290e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7ff f990 	bl	8001c1c <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e053      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 020c 	and.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	429a      	cmp	r2, r3
 800291e:	d1eb      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d210      	bcs.n	8002950 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 0207 	bic.w	r2, r3, #7
 8002936:	4922      	ldr	r1, [pc, #136]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e032      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4916      	ldr	r1, [pc, #88]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	490e      	ldr	r1, [pc, #56]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800298e:	f000 f821 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 8002992:	4602      	mov	r2, r0
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	490a      	ldr	r1, [pc, #40]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	5ccb      	ldrb	r3, [r1, r3]
 80029a2:	fa22 f303 	lsr.w	r3, r2, r3
 80029a6:	4a09      	ldr	r2, [pc, #36]	; (80029cc <HAL_RCC_ClockConfig+0x1cc>)
 80029a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_RCC_ClockConfig+0x1d0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff f8f2 	bl	8001b98 <HAL_InitTick>

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40022000 	.word	0x40022000
 80029c4:	40021000 	.word	0x40021000
 80029c8:	08004ce0 	.word	0x08004ce0
 80029cc:	20000020 	.word	0x20000020
 80029d0:	20000024 	.word	0x20000024

080029d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d4:	b490      	push	{r4, r7}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029da:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029dc:	1d3c      	adds	r4, r7, #4
 80029de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029e4:	f240 2301 	movw	r3, #513	; 0x201
 80029e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	2300      	movs	r3, #0
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d002      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x40>
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0x46>
 8002a12:	e02d      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a16:	623b      	str	r3, [r7, #32]
      break;
 8002a18:	e02d      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	0c9b      	lsrs	r3, r3, #18
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a26:	4413      	add	r3, r2
 8002a28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a2c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d013      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	0c5b      	lsrs	r3, r3, #17
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a46:	4413      	add	r3, r2
 8002a48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a52:	fb02 f203 	mul.w	r2, r2, r3
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5e:	e004      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	4a0b      	ldr	r2, [pc, #44]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a64:	fb02 f303 	mul.w	r3, r2, r3
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	623b      	str	r3, [r7, #32]
      break;
 8002a6e:	e002      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a72:	623b      	str	r3, [r7, #32]
      break;
 8002a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a76:	6a3b      	ldr	r3, [r7, #32]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3728      	adds	r7, #40	; 0x28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc90      	pop	{r4, r7}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	08004cd0 	.word	0x08004cd0
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	007a1200 	.word	0x007a1200
 8002a90:	003d0900 	.word	0x003d0900

08002a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a98:	4b02      	ldr	r3, [pc, #8]	; (8002aa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	20000020 	.word	0x20000020

08002aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aac:	f7ff fff2 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	4903      	ldr	r1, [pc, #12]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002abe:	5ccb      	ldrb	r3, [r1, r3]
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	08004cf0 	.word	0x08004cf0

08002ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ad4:	f7ff ffde 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	0adb      	lsrs	r3, r3, #11
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4903      	ldr	r1, [pc, #12]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	08004cf0 	.word	0x08004cf0

08002af8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b00:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <RCC_Delay+0x34>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <RCC_Delay+0x38>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	0a5b      	lsrs	r3, r3, #9
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b14:	bf00      	nop
  }
  while (Delay --);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1e5a      	subs	r2, r3, #1
 8002b1a:	60fa      	str	r2, [r7, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f9      	bne.n	8002b14 <RCC_Delay+0x1c>
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	20000020 	.word	0x20000020
 8002b30:	10624dd3 	.word	0x10624dd3

08002b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e041      	b.n	8002bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe fe50 	bl	8001800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3304      	adds	r3, #4
 8002b70:	4619      	mov	r1, r3
 8002b72:	4610      	mov	r0, r2
 8002b74:	f000 fc1c 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d001      	beq.n	8002bec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e035      	b.n	8002c58 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <HAL_TIM_Base_Start_IT+0x90>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d009      	beq.n	8002c22 <HAL_TIM_Base_Start_IT+0x4e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c16:	d004      	beq.n	8002c22 <HAL_TIM_Base_Start_IT+0x4e>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <HAL_TIM_Base_Start_IT+0x94>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d111      	bne.n	8002c46 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b06      	cmp	r3, #6
 8002c32:	d010      	beq.n	8002c56 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c44:	e007      	b.n	8002c56 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40000400 	.word	0x40000400

08002c6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e041      	b.n	8002d02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f839 	bl	8002d0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	f000 fb80 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_TIM_PWM_Start+0x24>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	bf14      	ite	ne
 8002d38:	2301      	movne	r3, #1
 8002d3a:	2300      	moveq	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	e022      	b.n	8002d86 <HAL_TIM_PWM_Start+0x6a>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d109      	bne.n	8002d5a <HAL_TIM_PWM_Start+0x3e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	bf14      	ite	ne
 8002d52:	2301      	movne	r3, #1
 8002d54:	2300      	moveq	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	e015      	b.n	8002d86 <HAL_TIM_PWM_Start+0x6a>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d109      	bne.n	8002d74 <HAL_TIM_PWM_Start+0x58>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e008      	b.n	8002d86 <HAL_TIM_PWM_Start+0x6a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	bf14      	ite	ne
 8002d80:	2301      	movne	r3, #1
 8002d82:	2300      	moveq	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e059      	b.n	8002e42 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d104      	bne.n	8002d9e <HAL_TIM_PWM_Start+0x82>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d9c:	e013      	b.n	8002dc6 <HAL_TIM_PWM_Start+0xaa>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d104      	bne.n	8002dae <HAL_TIM_PWM_Start+0x92>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dac:	e00b      	b.n	8002dc6 <HAL_TIM_PWM_Start+0xaa>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d104      	bne.n	8002dbe <HAL_TIM_PWM_Start+0xa2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dbc:	e003      	b.n	8002dc6 <HAL_TIM_PWM_Start+0xaa>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	6839      	ldr	r1, [r7, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fd64 	bl	800389c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <HAL_TIM_PWM_Start+0x130>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d107      	bne.n	8002dee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a16      	ldr	r2, [pc, #88]	; (8002e4c <HAL_TIM_PWM_Start+0x130>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d009      	beq.n	8002e0c <HAL_TIM_PWM_Start+0xf0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e00:	d004      	beq.n	8002e0c <HAL_TIM_PWM_Start+0xf0>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <HAL_TIM_PWM_Start+0x134>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d111      	bne.n	8002e30 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b06      	cmp	r3, #6
 8002e1c:	d010      	beq.n	8002e40 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2e:	e007      	b.n	8002e40 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	40000400 	.word	0x40000400

08002e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d122      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d11b      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0202 	mvn.w	r2, #2
 8002e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa6f 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8002e9c:	e005      	b.n	8002eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fa62 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fa71 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d122      	bne.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d11b      	bne.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0204 	mvn.w	r2, #4
 8002ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa45 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fa38 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa47 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d122      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d11b      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0208 	mvn.w	r2, #8
 8002f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fa1b 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8002f44:	e005      	b.n	8002f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa0e 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fa1d 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d122      	bne.n	8002fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d11b      	bne.n	8002fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0210 	mvn.w	r2, #16
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2208      	movs	r2, #8
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f9f1 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f9e4 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f9f3 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0201 	mvn.w	r2, #1
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe fa22 	bl	800141c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b80      	cmp	r3, #128	; 0x80
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff0:	2b80      	cmp	r3, #128	; 0x80
 8002ff2:	d107      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fcd1 	bl	80039a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f9b7 	bl	800339e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b20      	cmp	r3, #32
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b20      	cmp	r3, #32
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0220 	mvn.w	r2, #32
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fc9c 	bl	8003994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800307a:	2302      	movs	r3, #2
 800307c:	e0ac      	b.n	80031d8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b0c      	cmp	r3, #12
 800308a:	f200 809f 	bhi.w	80031cc <HAL_TIM_PWM_ConfigChannel+0x168>
 800308e:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030c9 	.word	0x080030c9
 8003098:	080031cd 	.word	0x080031cd
 800309c:	080031cd 	.word	0x080031cd
 80030a0:	080031cd 	.word	0x080031cd
 80030a4:	08003109 	.word	0x08003109
 80030a8:	080031cd 	.word	0x080031cd
 80030ac:	080031cd 	.word	0x080031cd
 80030b0:	080031cd 	.word	0x080031cd
 80030b4:	0800314b 	.word	0x0800314b
 80030b8:	080031cd 	.word	0x080031cd
 80030bc:	080031cd 	.word	0x080031cd
 80030c0:	080031cd 	.word	0x080031cd
 80030c4:	0800318b 	.word	0x0800318b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f9c6 	bl	8003460 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0208 	orr.w	r2, r2, #8
 80030e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0204 	bic.w	r2, r2, #4
 80030f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6999      	ldr	r1, [r3, #24]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	619a      	str	r2, [r3, #24]
      break;
 8003106:	e062      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fa0c 	bl	800352c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6999      	ldr	r1, [r3, #24]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	021a      	lsls	r2, r3, #8
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	619a      	str	r2, [r3, #24]
      break;
 8003148:	e041      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fa55 	bl	8003600 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0208 	orr.w	r2, r2, #8
 8003164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0204 	bic.w	r2, r2, #4
 8003174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69d9      	ldr	r1, [r3, #28]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	61da      	str	r2, [r3, #28]
      break;
 8003188:	e021      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fa9f 	bl	80036d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69da      	ldr	r2, [r3, #28]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69d9      	ldr	r1, [r3, #28]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	021a      	lsls	r2, r3, #8
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	61da      	str	r2, [r3, #28]
      break;
 80031ca:	e000      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80031cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_TIM_ConfigClockSource+0x18>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e0b3      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x180>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003216:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800321e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003230:	d03e      	beq.n	80032b0 <HAL_TIM_ConfigClockSource+0xd0>
 8003232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003236:	f200 8087 	bhi.w	8003348 <HAL_TIM_ConfigClockSource+0x168>
 800323a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323e:	f000 8085 	beq.w	800334c <HAL_TIM_ConfigClockSource+0x16c>
 8003242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003246:	d87f      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
 8003248:	2b70      	cmp	r3, #112	; 0x70
 800324a:	d01a      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0xa2>
 800324c:	2b70      	cmp	r3, #112	; 0x70
 800324e:	d87b      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
 8003250:	2b60      	cmp	r3, #96	; 0x60
 8003252:	d050      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0x116>
 8003254:	2b60      	cmp	r3, #96	; 0x60
 8003256:	d877      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
 8003258:	2b50      	cmp	r3, #80	; 0x50
 800325a:	d03c      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0xf6>
 800325c:	2b50      	cmp	r3, #80	; 0x50
 800325e:	d873      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
 8003260:	2b40      	cmp	r3, #64	; 0x40
 8003262:	d058      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x136>
 8003264:	2b40      	cmp	r3, #64	; 0x40
 8003266:	d86f      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
 8003268:	2b30      	cmp	r3, #48	; 0x30
 800326a:	d064      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x156>
 800326c:	2b30      	cmp	r3, #48	; 0x30
 800326e:	d86b      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
 8003270:	2b20      	cmp	r3, #32
 8003272:	d060      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x156>
 8003274:	2b20      	cmp	r3, #32
 8003276:	d867      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d05c      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x156>
 800327c:	2b10      	cmp	r3, #16
 800327e:	d05a      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003280:	e062      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6899      	ldr	r1, [r3, #8]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f000 fae4 	bl	800385e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	609a      	str	r2, [r3, #8]
      break;
 80032ae:	e04e      	b.n	800334e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	6899      	ldr	r1, [r3, #8]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f000 facd 	bl	800385e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032d2:	609a      	str	r2, [r3, #8]
      break;
 80032d4:	e03b      	b.n	800334e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	461a      	mov	r2, r3
 80032e4:	f000 fa44 	bl	8003770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2150      	movs	r1, #80	; 0x50
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fa9b 	bl	800382a <TIM_ITRx_SetConfig>
      break;
 80032f4:	e02b      	b.n	800334e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	461a      	mov	r2, r3
 8003304:	f000 fa62 	bl	80037cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2160      	movs	r1, #96	; 0x60
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fa8b 	bl	800382a <TIM_ITRx_SetConfig>
      break;
 8003314:	e01b      	b.n	800334e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6859      	ldr	r1, [r3, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	461a      	mov	r2, r3
 8003324:	f000 fa24 	bl	8003770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2140      	movs	r1, #64	; 0x40
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fa7b 	bl	800382a <TIM_ITRx_SetConfig>
      break;
 8003334:	e00b      	b.n	800334e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f000 fa72 	bl	800382a <TIM_ITRx_SetConfig>
        break;
 8003346:	e002      	b.n	800334e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003348:	bf00      	nop
 800334a:	e000      	b.n	800334e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800334c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a25      	ldr	r2, [pc, #148]	; (8003458 <TIM_Base_SetConfig+0xa8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d007      	beq.n	80033d8 <TIM_Base_SetConfig+0x28>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d003      	beq.n	80033d8 <TIM_Base_SetConfig+0x28>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a22      	ldr	r2, [pc, #136]	; (800345c <TIM_Base_SetConfig+0xac>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d108      	bne.n	80033ea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a1a      	ldr	r2, [pc, #104]	; (8003458 <TIM_Base_SetConfig+0xa8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <TIM_Base_SetConfig+0x52>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f8:	d003      	beq.n	8003402 <TIM_Base_SetConfig+0x52>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a17      	ldr	r2, [pc, #92]	; (800345c <TIM_Base_SetConfig+0xac>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d108      	bne.n	8003414 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a07      	ldr	r2, [pc, #28]	; (8003458 <TIM_Base_SetConfig+0xa8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d103      	bne.n	8003448 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	615a      	str	r2, [r3, #20]
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr
 8003458:	40012c00 	.word	0x40012c00
 800345c:	40000400 	.word	0x40000400

08003460 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f023 0201 	bic.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0303 	bic.w	r3, r3, #3
 8003496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f023 0302 	bic.w	r3, r3, #2
 80034a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a1c      	ldr	r2, [pc, #112]	; (8003528 <TIM_OC1_SetConfig+0xc8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d10c      	bne.n	80034d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f023 0308 	bic.w	r3, r3, #8
 80034c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f023 0304 	bic.w	r3, r3, #4
 80034d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a13      	ldr	r2, [pc, #76]	; (8003528 <TIM_OC1_SetConfig+0xc8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d111      	bne.n	8003502 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	621a      	str	r2, [r3, #32]
}
 800351c:	bf00      	nop
 800351e:	371c      	adds	r7, #28
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40012c00 	.word	0x40012c00

0800352c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f023 0210 	bic.w	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	021b      	lsls	r3, r3, #8
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f023 0320 	bic.w	r3, r3, #32
 8003576:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <TIM_OC2_SetConfig+0xd0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d10d      	bne.n	80035a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a14      	ldr	r2, [pc, #80]	; (80035fc <TIM_OC2_SetConfig+0xd0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d113      	bne.n	80035d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	621a      	str	r2, [r3, #32]
}
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	40012c00 	.word	0x40012c00

08003600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0303 	bic.w	r3, r3, #3
 8003636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <TIM_OC3_SetConfig+0xd0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10d      	bne.n	800367a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003664:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a14      	ldr	r2, [pc, #80]	; (80036d0 <TIM_OC3_SetConfig+0xd0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d113      	bne.n	80036aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	621a      	str	r2, [r3, #32]
}
 80036c4:	bf00      	nop
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40012c00 	.word	0x40012c00

080036d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800371e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	031b      	lsls	r3, r3, #12
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a0f      	ldr	r2, [pc, #60]	; (800376c <TIM_OC4_SetConfig+0x98>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d109      	bne.n	8003748 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800373a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	019b      	lsls	r3, r3, #6
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	40012c00 	.word	0x40012c00

08003770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	f023 0201 	bic.w	r2, r3, #1
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800379a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f023 030a 	bic.w	r3, r3, #10
 80037ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	621a      	str	r2, [r3, #32]
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr

080037cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f023 0210 	bic.w	r2, r3, #16
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	031b      	lsls	r3, r3, #12
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003808:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	621a      	str	r2, [r3, #32]
}
 8003820:	bf00      	nop
 8003822:	371c      	adds	r7, #28
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800382a:	b480      	push	{r7}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	f043 0307 	orr.w	r3, r3, #7
 800384c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	609a      	str	r2, [r3, #8]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800385e:	b480      	push	{r7}
 8003860:	b087      	sub	sp, #28
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003878:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	021a      	lsls	r2, r3, #8
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	431a      	orrs	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	4313      	orrs	r3, r2
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	609a      	str	r2, [r3, #8]
}
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	2201      	movs	r2, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a1a      	ldr	r2, [r3, #32]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	43db      	mvns	r3, r3
 80038be:	401a      	ands	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a1a      	ldr	r2, [r3, #32]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f003 031f 	and.w	r3, r3, #31
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	431a      	orrs	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	621a      	str	r2, [r3, #32]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e041      	b.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a14      	ldr	r2, [pc, #80]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d009      	beq.n	8003954 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d004      	beq.n	8003954 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a10      	ldr	r2, [pc, #64]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d10c      	bne.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	4313      	orrs	r3, r2
 8003964:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40000400 	.word	0x40000400

08003994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e03f      	b.n	8003a4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd ff78 	bl	80018d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2224      	movs	r2, #36	; 0x24
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fc25 	bl	800424c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b08a      	sub	sp, #40	; 0x28
 8003a56:	af02      	add	r7, sp, #8
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	603b      	str	r3, [r7, #0]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d17c      	bne.n	8003b6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_UART_Transmit+0x2c>
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e075      	b.n	8003b6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_UART_Transmit+0x3e>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e06e      	b.n	8003b6e <HAL_UART_Transmit+0x11c>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2221      	movs	r2, #33	; 0x21
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aa6:	f7fe f8b9 	bl	8001c1c <HAL_GetTick>
 8003aaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	88fa      	ldrh	r2, [r7, #6]
 8003ab0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	88fa      	ldrh	r2, [r7, #6]
 8003ab6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac0:	d108      	bne.n	8003ad4 <HAL_UART_Transmit+0x82>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d104      	bne.n	8003ad4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	e003      	b.n	8003adc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ae4:	e02a      	b.n	8003b3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2200      	movs	r2, #0
 8003aee:	2180      	movs	r1, #128	; 0x80
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 fa11 	bl	8003f18 <UART_WaitOnFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e036      	b.n	8003b6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10b      	bne.n	8003b1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	3302      	adds	r3, #2
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	e007      	b.n	8003b2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	781a      	ldrb	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1cf      	bne.n	8003ae6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2140      	movs	r1, #64	; 0x40
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f9e1 	bl	8003f18 <UART_WaitOnFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e006      	b.n	8003b6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e000      	b.n	8003b6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
  }
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	; 0x28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10d      	bne.n	8003bca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_UART_IRQHandler+0x52>
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fa99 	bl	80040fa <UART_Receive_IT>
      return;
 8003bc8:	e17b      	b.n	8003ec2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80b1 	beq.w	8003d34 <HAL_UART_IRQHandler+0x1bc>
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d105      	bne.n	8003be8 <HAL_UART_IRQHandler+0x70>
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 80a6 	beq.w	8003d34 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_UART_IRQHandler+0x90>
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	f043 0201 	orr.w	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_UART_IRQHandler+0xb0>
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f043 0202 	orr.w	r2, r3, #2
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_UART_IRQHandler+0xd0>
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f043 0204 	orr.w	r2, r3, #4
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00f      	beq.n	8003c72 <HAL_UART_IRQHandler+0xfa>
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d104      	bne.n	8003c66 <HAL_UART_IRQHandler+0xee>
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f043 0208 	orr.w	r2, r3, #8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 811e 	beq.w	8003eb8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <HAL_UART_IRQHandler+0x11e>
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fa32 	bl	80040fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <HAL_UART_IRQHandler+0x146>
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d031      	beq.n	8003d22 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f974 	bl	8003fac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d023      	beq.n	8003d1a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d013      	beq.n	8003d12 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	4a76      	ldr	r2, [pc, #472]	; (8003ec8 <HAL_UART_IRQHandler+0x350>)
 8003cf0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe f8e2 	bl	8001ec0 <HAL_DMA_Abort_IT>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d016      	beq.n	8003d30 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	e00e      	b.n	8003d30 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f8ec 	bl	8003ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	e00a      	b.n	8003d30 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f8e8 	bl	8003ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d20:	e006      	b.n	8003d30 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8e4 	bl	8003ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d2e:	e0c3      	b.n	8003eb8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d30:	bf00      	nop
    return;
 8003d32:	e0c1      	b.n	8003eb8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	f040 80a1 	bne.w	8003e80 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 809b 	beq.w	8003e80 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8095 	beq.w	8003e80 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d04e      	beq.n	8003e18 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003d84:	8a3b      	ldrh	r3, [r7, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8098 	beq.w	8003ebc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d90:	8a3a      	ldrh	r2, [r7, #16]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	f080 8092 	bcs.w	8003ebc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8a3a      	ldrh	r2, [r7, #16]
 8003d9c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d02b      	beq.n	8003e00 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003db6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0210 	bic.w	r2, r2, #16
 8003df4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe f825 	bl	8001e4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f876 	bl	8003f02 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e16:	e051      	b.n	8003ebc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d047      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003e30:	8a7b      	ldrh	r3, [r7, #18]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d044      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e44:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0210 	bic.w	r2, r2, #16
 8003e72:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e74:	8a7b      	ldrh	r3, [r7, #18]
 8003e76:	4619      	mov	r1, r3
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f842 	bl	8003f02 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e7e:	e01f      	b.n	8003ec0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <HAL_UART_IRQHandler+0x324>
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f8c9 	bl	800402c <UART_Transmit_IT>
    return;
 8003e9a:	e012      	b.n	8003ec2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00d      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x34a>
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f90a 	bl	80040ca <UART_EndTransmit_IT>
    return;
 8003eb6:	e004      	b.n	8003ec2 <HAL_UART_IRQHandler+0x34a>
    return;
 8003eb8:	bf00      	nop
 8003eba:	e002      	b.n	8003ec2 <HAL_UART_IRQHandler+0x34a>
      return;
 8003ebc:	bf00      	nop
 8003ebe:	e000      	b.n	8003ec2 <HAL_UART_IRQHandler+0x34a>
      return;
 8003ec0:	bf00      	nop
  }
}
 8003ec2:	3728      	adds	r7, #40	; 0x28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	08004005 	.word	0x08004005

08003ecc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr

08003ef0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr

08003f02 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f28:	e02c      	b.n	8003f84 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d028      	beq.n	8003f84 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f38:	f7fd fe70 	bl	8001c1c <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d21d      	bcs.n	8003f84 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f56:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695a      	ldr	r2, [r3, #20]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0201 	bic.w	r2, r2, #1
 8003f66:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e00f      	b.n	8003fa4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d0c3      	beq.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fc2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d107      	bne.n	8003fec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0210 	bic.w	r2, r2, #16
 8003fea:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr

08004004 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f7ff ff66 	bl	8003ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b21      	cmp	r3, #33	; 0x21
 800403e:	d13e      	bne.n	80040be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004048:	d114      	bne.n	8004074 <UART_Transmit_IT+0x48>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d110      	bne.n	8004074 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004066:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	1c9a      	adds	r2, r3, #2
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	621a      	str	r2, [r3, #32]
 8004072:	e008      	b.n	8004086 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	1c59      	adds	r1, r3, #1
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6211      	str	r1, [r2, #32]
 800407e:	781a      	ldrb	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29b      	uxth	r3, r3
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	4619      	mov	r1, r3
 8004094:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10f      	bne.n	80040ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040be:	2302      	movs	r3, #2
  }
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr

080040ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff feee 	bl	8003ecc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b22      	cmp	r3, #34	; 0x22
 800410c:	f040 8099 	bne.w	8004242 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004118:	d117      	bne.n	800414a <UART_Receive_IT+0x50>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d113      	bne.n	800414a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	b29b      	uxth	r3, r3
 8004134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004138:	b29a      	uxth	r2, r3
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	1c9a      	adds	r2, r3, #2
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	629a      	str	r2, [r3, #40]	; 0x28
 8004148:	e026      	b.n	8004198 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004150:	2300      	movs	r3, #0
 8004152:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415c:	d007      	beq.n	800416e <UART_Receive_IT+0x74>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10a      	bne.n	800417c <UART_Receive_IT+0x82>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	701a      	strb	r2, [r3, #0]
 800417a:	e008      	b.n	800418e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004188:	b2da      	uxtb	r2, r3
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	4619      	mov	r1, r3
 80041a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d148      	bne.n	800423e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0220 	bic.w	r2, r2, #32
 80041ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d123      	bne.n	8004234 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0210 	bic.w	r2, r2, #16
 8004200:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b10      	cmp	r3, #16
 800420e:	d10a      	bne.n	8004226 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800422a:	4619      	mov	r1, r3
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff fe68 	bl	8003f02 <HAL_UARTEx_RxEventCallback>
 8004232:	e002      	b.n	800423a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff fe52 	bl	8003ede <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e002      	b.n	8004244 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	e000      	b.n	8004244 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004242:	2302      	movs	r3, #2
  }
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004286:	f023 030c 	bic.w	r3, r3, #12
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	430b      	orrs	r3, r1
 8004292:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699a      	ldr	r2, [r3, #24]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a2c      	ldr	r2, [pc, #176]	; (8004360 <UART_SetConfig+0x114>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d103      	bne.n	80042bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042b4:	f7fe fc0c 	bl	8002ad0 <HAL_RCC_GetPCLK2Freq>
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	e002      	b.n	80042c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042bc:	f7fe fbf4 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 80042c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	009a      	lsls	r2, r3, #2
 80042cc:	441a      	add	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	4a22      	ldr	r2, [pc, #136]	; (8004364 <UART_SetConfig+0x118>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	0119      	lsls	r1, r3, #4
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	009a      	lsls	r2, r3, #2
 80042ec:	441a      	add	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042f8:	4b1a      	ldr	r3, [pc, #104]	; (8004364 <UART_SetConfig+0x118>)
 80042fa:	fba3 0302 	umull	r0, r3, r3, r2
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	2064      	movs	r0, #100	; 0x64
 8004302:	fb00 f303 	mul.w	r3, r0, r3
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	3332      	adds	r3, #50	; 0x32
 800430c:	4a15      	ldr	r2, [pc, #84]	; (8004364 <UART_SetConfig+0x118>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004318:	4419      	add	r1, r3
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4613      	mov	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	009a      	lsls	r2, r3, #2
 8004324:	441a      	add	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <UART_SetConfig+0x118>)
 8004332:	fba3 0302 	umull	r0, r3, r3, r2
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	2064      	movs	r0, #100	; 0x64
 800433a:	fb00 f303 	mul.w	r3, r0, r3
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	3332      	adds	r3, #50	; 0x32
 8004344:	4a07      	ldr	r2, [pc, #28]	; (8004364 <UART_SetConfig+0x118>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	f003 020f 	and.w	r2, r3, #15
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	440a      	add	r2, r1
 8004356:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40013800 	.word	0x40013800
 8004364:	51eb851f 	.word	0x51eb851f

08004368 <__errno>:
 8004368:	4b01      	ldr	r3, [pc, #4]	; (8004370 <__errno+0x8>)
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	2000002c 	.word	0x2000002c

08004374 <__libc_init_array>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	2600      	movs	r6, #0
 8004378:	4d0c      	ldr	r5, [pc, #48]	; (80043ac <__libc_init_array+0x38>)
 800437a:	4c0d      	ldr	r4, [pc, #52]	; (80043b0 <__libc_init_array+0x3c>)
 800437c:	1b64      	subs	r4, r4, r5
 800437e:	10a4      	asrs	r4, r4, #2
 8004380:	42a6      	cmp	r6, r4
 8004382:	d109      	bne.n	8004398 <__libc_init_array+0x24>
 8004384:	f000 fc5c 	bl	8004c40 <_init>
 8004388:	2600      	movs	r6, #0
 800438a:	4d0a      	ldr	r5, [pc, #40]	; (80043b4 <__libc_init_array+0x40>)
 800438c:	4c0a      	ldr	r4, [pc, #40]	; (80043b8 <__libc_init_array+0x44>)
 800438e:	1b64      	subs	r4, r4, r5
 8004390:	10a4      	asrs	r4, r4, #2
 8004392:	42a6      	cmp	r6, r4
 8004394:	d105      	bne.n	80043a2 <__libc_init_array+0x2e>
 8004396:	bd70      	pop	{r4, r5, r6, pc}
 8004398:	f855 3b04 	ldr.w	r3, [r5], #4
 800439c:	4798      	blx	r3
 800439e:	3601      	adds	r6, #1
 80043a0:	e7ee      	b.n	8004380 <__libc_init_array+0xc>
 80043a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a6:	4798      	blx	r3
 80043a8:	3601      	adds	r6, #1
 80043aa:	e7f2      	b.n	8004392 <__libc_init_array+0x1e>
 80043ac:	08004d2c 	.word	0x08004d2c
 80043b0:	08004d2c 	.word	0x08004d2c
 80043b4:	08004d2c 	.word	0x08004d2c
 80043b8:	08004d30 	.word	0x08004d30

080043bc <memset>:
 80043bc:	4603      	mov	r3, r0
 80043be:	4402      	add	r2, r0
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d100      	bne.n	80043c6 <memset+0xa>
 80043c4:	4770      	bx	lr
 80043c6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ca:	e7f9      	b.n	80043c0 <memset+0x4>

080043cc <siprintf>:
 80043cc:	b40e      	push	{r1, r2, r3}
 80043ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043d2:	b500      	push	{lr}
 80043d4:	b09c      	sub	sp, #112	; 0x70
 80043d6:	ab1d      	add	r3, sp, #116	; 0x74
 80043d8:	9002      	str	r0, [sp, #8]
 80043da:	9006      	str	r0, [sp, #24]
 80043dc:	9107      	str	r1, [sp, #28]
 80043de:	9104      	str	r1, [sp, #16]
 80043e0:	4808      	ldr	r0, [pc, #32]	; (8004404 <siprintf+0x38>)
 80043e2:	4909      	ldr	r1, [pc, #36]	; (8004408 <siprintf+0x3c>)
 80043e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80043e8:	9105      	str	r1, [sp, #20]
 80043ea:	6800      	ldr	r0, [r0, #0]
 80043ec:	a902      	add	r1, sp, #8
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	f000 f868 	bl	80044c4 <_svfiprintf_r>
 80043f4:	2200      	movs	r2, #0
 80043f6:	9b02      	ldr	r3, [sp, #8]
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	b01c      	add	sp, #112	; 0x70
 80043fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004400:	b003      	add	sp, #12
 8004402:	4770      	bx	lr
 8004404:	2000002c 	.word	0x2000002c
 8004408:	ffff0208 	.word	0xffff0208

0800440c <__ssputs_r>:
 800440c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004410:	688e      	ldr	r6, [r1, #8]
 8004412:	4682      	mov	sl, r0
 8004414:	429e      	cmp	r6, r3
 8004416:	460c      	mov	r4, r1
 8004418:	4690      	mov	r8, r2
 800441a:	461f      	mov	r7, r3
 800441c:	d838      	bhi.n	8004490 <__ssputs_r+0x84>
 800441e:	898a      	ldrh	r2, [r1, #12]
 8004420:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004424:	d032      	beq.n	800448c <__ssputs_r+0x80>
 8004426:	6825      	ldr	r5, [r4, #0]
 8004428:	6909      	ldr	r1, [r1, #16]
 800442a:	3301      	adds	r3, #1
 800442c:	eba5 0901 	sub.w	r9, r5, r1
 8004430:	6965      	ldr	r5, [r4, #20]
 8004432:	444b      	add	r3, r9
 8004434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800443c:	106d      	asrs	r5, r5, #1
 800443e:	429d      	cmp	r5, r3
 8004440:	bf38      	it	cc
 8004442:	461d      	movcc	r5, r3
 8004444:	0553      	lsls	r3, r2, #21
 8004446:	d531      	bpl.n	80044ac <__ssputs_r+0xa0>
 8004448:	4629      	mov	r1, r5
 800444a:	f000 fb53 	bl	8004af4 <_malloc_r>
 800444e:	4606      	mov	r6, r0
 8004450:	b950      	cbnz	r0, 8004468 <__ssputs_r+0x5c>
 8004452:	230c      	movs	r3, #12
 8004454:	f04f 30ff 	mov.w	r0, #4294967295
 8004458:	f8ca 3000 	str.w	r3, [sl]
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004462:	81a3      	strh	r3, [r4, #12]
 8004464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004468:	464a      	mov	r2, r9
 800446a:	6921      	ldr	r1, [r4, #16]
 800446c:	f000 face 	bl	8004a0c <memcpy>
 8004470:	89a3      	ldrh	r3, [r4, #12]
 8004472:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447a:	81a3      	strh	r3, [r4, #12]
 800447c:	6126      	str	r6, [r4, #16]
 800447e:	444e      	add	r6, r9
 8004480:	6026      	str	r6, [r4, #0]
 8004482:	463e      	mov	r6, r7
 8004484:	6165      	str	r5, [r4, #20]
 8004486:	eba5 0509 	sub.w	r5, r5, r9
 800448a:	60a5      	str	r5, [r4, #8]
 800448c:	42be      	cmp	r6, r7
 800448e:	d900      	bls.n	8004492 <__ssputs_r+0x86>
 8004490:	463e      	mov	r6, r7
 8004492:	4632      	mov	r2, r6
 8004494:	4641      	mov	r1, r8
 8004496:	6820      	ldr	r0, [r4, #0]
 8004498:	f000 fac6 	bl	8004a28 <memmove>
 800449c:	68a3      	ldr	r3, [r4, #8]
 800449e:	6822      	ldr	r2, [r4, #0]
 80044a0:	1b9b      	subs	r3, r3, r6
 80044a2:	4432      	add	r2, r6
 80044a4:	2000      	movs	r0, #0
 80044a6:	60a3      	str	r3, [r4, #8]
 80044a8:	6022      	str	r2, [r4, #0]
 80044aa:	e7db      	b.n	8004464 <__ssputs_r+0x58>
 80044ac:	462a      	mov	r2, r5
 80044ae:	f000 fb7b 	bl	8004ba8 <_realloc_r>
 80044b2:	4606      	mov	r6, r0
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d1e1      	bne.n	800447c <__ssputs_r+0x70>
 80044b8:	4650      	mov	r0, sl
 80044ba:	6921      	ldr	r1, [r4, #16]
 80044bc:	f000 face 	bl	8004a5c <_free_r>
 80044c0:	e7c7      	b.n	8004452 <__ssputs_r+0x46>
	...

080044c4 <_svfiprintf_r>:
 80044c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c8:	4698      	mov	r8, r3
 80044ca:	898b      	ldrh	r3, [r1, #12]
 80044cc:	4607      	mov	r7, r0
 80044ce:	061b      	lsls	r3, r3, #24
 80044d0:	460d      	mov	r5, r1
 80044d2:	4614      	mov	r4, r2
 80044d4:	b09d      	sub	sp, #116	; 0x74
 80044d6:	d50e      	bpl.n	80044f6 <_svfiprintf_r+0x32>
 80044d8:	690b      	ldr	r3, [r1, #16]
 80044da:	b963      	cbnz	r3, 80044f6 <_svfiprintf_r+0x32>
 80044dc:	2140      	movs	r1, #64	; 0x40
 80044de:	f000 fb09 	bl	8004af4 <_malloc_r>
 80044e2:	6028      	str	r0, [r5, #0]
 80044e4:	6128      	str	r0, [r5, #16]
 80044e6:	b920      	cbnz	r0, 80044f2 <_svfiprintf_r+0x2e>
 80044e8:	230c      	movs	r3, #12
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	e0d1      	b.n	8004696 <_svfiprintf_r+0x1d2>
 80044f2:	2340      	movs	r3, #64	; 0x40
 80044f4:	616b      	str	r3, [r5, #20]
 80044f6:	2300      	movs	r3, #0
 80044f8:	9309      	str	r3, [sp, #36]	; 0x24
 80044fa:	2320      	movs	r3, #32
 80044fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004500:	2330      	movs	r3, #48	; 0x30
 8004502:	f04f 0901 	mov.w	r9, #1
 8004506:	f8cd 800c 	str.w	r8, [sp, #12]
 800450a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80046b0 <_svfiprintf_r+0x1ec>
 800450e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004512:	4623      	mov	r3, r4
 8004514:	469a      	mov	sl, r3
 8004516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800451a:	b10a      	cbz	r2, 8004520 <_svfiprintf_r+0x5c>
 800451c:	2a25      	cmp	r2, #37	; 0x25
 800451e:	d1f9      	bne.n	8004514 <_svfiprintf_r+0x50>
 8004520:	ebba 0b04 	subs.w	fp, sl, r4
 8004524:	d00b      	beq.n	800453e <_svfiprintf_r+0x7a>
 8004526:	465b      	mov	r3, fp
 8004528:	4622      	mov	r2, r4
 800452a:	4629      	mov	r1, r5
 800452c:	4638      	mov	r0, r7
 800452e:	f7ff ff6d 	bl	800440c <__ssputs_r>
 8004532:	3001      	adds	r0, #1
 8004534:	f000 80aa 	beq.w	800468c <_svfiprintf_r+0x1c8>
 8004538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800453a:	445a      	add	r2, fp
 800453c:	9209      	str	r2, [sp, #36]	; 0x24
 800453e:	f89a 3000 	ldrb.w	r3, [sl]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80a2 	beq.w	800468c <_svfiprintf_r+0x1c8>
 8004548:	2300      	movs	r3, #0
 800454a:	f04f 32ff 	mov.w	r2, #4294967295
 800454e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004552:	f10a 0a01 	add.w	sl, sl, #1
 8004556:	9304      	str	r3, [sp, #16]
 8004558:	9307      	str	r3, [sp, #28]
 800455a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800455e:	931a      	str	r3, [sp, #104]	; 0x68
 8004560:	4654      	mov	r4, sl
 8004562:	2205      	movs	r2, #5
 8004564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004568:	4851      	ldr	r0, [pc, #324]	; (80046b0 <_svfiprintf_r+0x1ec>)
 800456a:	f000 fa41 	bl	80049f0 <memchr>
 800456e:	9a04      	ldr	r2, [sp, #16]
 8004570:	b9d8      	cbnz	r0, 80045aa <_svfiprintf_r+0xe6>
 8004572:	06d0      	lsls	r0, r2, #27
 8004574:	bf44      	itt	mi
 8004576:	2320      	movmi	r3, #32
 8004578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800457c:	0711      	lsls	r1, r2, #28
 800457e:	bf44      	itt	mi
 8004580:	232b      	movmi	r3, #43	; 0x2b
 8004582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004586:	f89a 3000 	ldrb.w	r3, [sl]
 800458a:	2b2a      	cmp	r3, #42	; 0x2a
 800458c:	d015      	beq.n	80045ba <_svfiprintf_r+0xf6>
 800458e:	4654      	mov	r4, sl
 8004590:	2000      	movs	r0, #0
 8004592:	f04f 0c0a 	mov.w	ip, #10
 8004596:	9a07      	ldr	r2, [sp, #28]
 8004598:	4621      	mov	r1, r4
 800459a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800459e:	3b30      	subs	r3, #48	; 0x30
 80045a0:	2b09      	cmp	r3, #9
 80045a2:	d94e      	bls.n	8004642 <_svfiprintf_r+0x17e>
 80045a4:	b1b0      	cbz	r0, 80045d4 <_svfiprintf_r+0x110>
 80045a6:	9207      	str	r2, [sp, #28]
 80045a8:	e014      	b.n	80045d4 <_svfiprintf_r+0x110>
 80045aa:	eba0 0308 	sub.w	r3, r0, r8
 80045ae:	fa09 f303 	lsl.w	r3, r9, r3
 80045b2:	4313      	orrs	r3, r2
 80045b4:	46a2      	mov	sl, r4
 80045b6:	9304      	str	r3, [sp, #16]
 80045b8:	e7d2      	b.n	8004560 <_svfiprintf_r+0x9c>
 80045ba:	9b03      	ldr	r3, [sp, #12]
 80045bc:	1d19      	adds	r1, r3, #4
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	9103      	str	r1, [sp, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bfbb      	ittet	lt
 80045c6:	425b      	neglt	r3, r3
 80045c8:	f042 0202 	orrlt.w	r2, r2, #2
 80045cc:	9307      	strge	r3, [sp, #28]
 80045ce:	9307      	strlt	r3, [sp, #28]
 80045d0:	bfb8      	it	lt
 80045d2:	9204      	strlt	r2, [sp, #16]
 80045d4:	7823      	ldrb	r3, [r4, #0]
 80045d6:	2b2e      	cmp	r3, #46	; 0x2e
 80045d8:	d10c      	bne.n	80045f4 <_svfiprintf_r+0x130>
 80045da:	7863      	ldrb	r3, [r4, #1]
 80045dc:	2b2a      	cmp	r3, #42	; 0x2a
 80045de:	d135      	bne.n	800464c <_svfiprintf_r+0x188>
 80045e0:	9b03      	ldr	r3, [sp, #12]
 80045e2:	3402      	adds	r4, #2
 80045e4:	1d1a      	adds	r2, r3, #4
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	9203      	str	r2, [sp, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bfb8      	it	lt
 80045ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80045f2:	9305      	str	r3, [sp, #20]
 80045f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80046c0 <_svfiprintf_r+0x1fc>
 80045f8:	2203      	movs	r2, #3
 80045fa:	4650      	mov	r0, sl
 80045fc:	7821      	ldrb	r1, [r4, #0]
 80045fe:	f000 f9f7 	bl	80049f0 <memchr>
 8004602:	b140      	cbz	r0, 8004616 <_svfiprintf_r+0x152>
 8004604:	2340      	movs	r3, #64	; 0x40
 8004606:	eba0 000a 	sub.w	r0, r0, sl
 800460a:	fa03 f000 	lsl.w	r0, r3, r0
 800460e:	9b04      	ldr	r3, [sp, #16]
 8004610:	3401      	adds	r4, #1
 8004612:	4303      	orrs	r3, r0
 8004614:	9304      	str	r3, [sp, #16]
 8004616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800461a:	2206      	movs	r2, #6
 800461c:	4825      	ldr	r0, [pc, #148]	; (80046b4 <_svfiprintf_r+0x1f0>)
 800461e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004622:	f000 f9e5 	bl	80049f0 <memchr>
 8004626:	2800      	cmp	r0, #0
 8004628:	d038      	beq.n	800469c <_svfiprintf_r+0x1d8>
 800462a:	4b23      	ldr	r3, [pc, #140]	; (80046b8 <_svfiprintf_r+0x1f4>)
 800462c:	bb1b      	cbnz	r3, 8004676 <_svfiprintf_r+0x1b2>
 800462e:	9b03      	ldr	r3, [sp, #12]
 8004630:	3307      	adds	r3, #7
 8004632:	f023 0307 	bic.w	r3, r3, #7
 8004636:	3308      	adds	r3, #8
 8004638:	9303      	str	r3, [sp, #12]
 800463a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800463c:	4433      	add	r3, r6
 800463e:	9309      	str	r3, [sp, #36]	; 0x24
 8004640:	e767      	b.n	8004512 <_svfiprintf_r+0x4e>
 8004642:	460c      	mov	r4, r1
 8004644:	2001      	movs	r0, #1
 8004646:	fb0c 3202 	mla	r2, ip, r2, r3
 800464a:	e7a5      	b.n	8004598 <_svfiprintf_r+0xd4>
 800464c:	2300      	movs	r3, #0
 800464e:	f04f 0c0a 	mov.w	ip, #10
 8004652:	4619      	mov	r1, r3
 8004654:	3401      	adds	r4, #1
 8004656:	9305      	str	r3, [sp, #20]
 8004658:	4620      	mov	r0, r4
 800465a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800465e:	3a30      	subs	r2, #48	; 0x30
 8004660:	2a09      	cmp	r2, #9
 8004662:	d903      	bls.n	800466c <_svfiprintf_r+0x1a8>
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0c5      	beq.n	80045f4 <_svfiprintf_r+0x130>
 8004668:	9105      	str	r1, [sp, #20]
 800466a:	e7c3      	b.n	80045f4 <_svfiprintf_r+0x130>
 800466c:	4604      	mov	r4, r0
 800466e:	2301      	movs	r3, #1
 8004670:	fb0c 2101 	mla	r1, ip, r1, r2
 8004674:	e7f0      	b.n	8004658 <_svfiprintf_r+0x194>
 8004676:	ab03      	add	r3, sp, #12
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	462a      	mov	r2, r5
 800467c:	4638      	mov	r0, r7
 800467e:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <_svfiprintf_r+0x1f8>)
 8004680:	a904      	add	r1, sp, #16
 8004682:	f3af 8000 	nop.w
 8004686:	1c42      	adds	r2, r0, #1
 8004688:	4606      	mov	r6, r0
 800468a:	d1d6      	bne.n	800463a <_svfiprintf_r+0x176>
 800468c:	89ab      	ldrh	r3, [r5, #12]
 800468e:	065b      	lsls	r3, r3, #25
 8004690:	f53f af2c 	bmi.w	80044ec <_svfiprintf_r+0x28>
 8004694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004696:	b01d      	add	sp, #116	; 0x74
 8004698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469c:	ab03      	add	r3, sp, #12
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	462a      	mov	r2, r5
 80046a2:	4638      	mov	r0, r7
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <_svfiprintf_r+0x1f8>)
 80046a6:	a904      	add	r1, sp, #16
 80046a8:	f000 f87c 	bl	80047a4 <_printf_i>
 80046ac:	e7eb      	b.n	8004686 <_svfiprintf_r+0x1c2>
 80046ae:	bf00      	nop
 80046b0:	08004cf8 	.word	0x08004cf8
 80046b4:	08004d02 	.word	0x08004d02
 80046b8:	00000000 	.word	0x00000000
 80046bc:	0800440d 	.word	0x0800440d
 80046c0:	08004cfe 	.word	0x08004cfe

080046c4 <_printf_common>:
 80046c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c8:	4616      	mov	r6, r2
 80046ca:	4699      	mov	r9, r3
 80046cc:	688a      	ldr	r2, [r1, #8]
 80046ce:	690b      	ldr	r3, [r1, #16]
 80046d0:	4607      	mov	r7, r0
 80046d2:	4293      	cmp	r3, r2
 80046d4:	bfb8      	it	lt
 80046d6:	4613      	movlt	r3, r2
 80046d8:	6033      	str	r3, [r6, #0]
 80046da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046de:	460c      	mov	r4, r1
 80046e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046e4:	b10a      	cbz	r2, 80046ea <_printf_common+0x26>
 80046e6:	3301      	adds	r3, #1
 80046e8:	6033      	str	r3, [r6, #0]
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	0699      	lsls	r1, r3, #26
 80046ee:	bf42      	ittt	mi
 80046f0:	6833      	ldrmi	r3, [r6, #0]
 80046f2:	3302      	addmi	r3, #2
 80046f4:	6033      	strmi	r3, [r6, #0]
 80046f6:	6825      	ldr	r5, [r4, #0]
 80046f8:	f015 0506 	ands.w	r5, r5, #6
 80046fc:	d106      	bne.n	800470c <_printf_common+0x48>
 80046fe:	f104 0a19 	add.w	sl, r4, #25
 8004702:	68e3      	ldr	r3, [r4, #12]
 8004704:	6832      	ldr	r2, [r6, #0]
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	42ab      	cmp	r3, r5
 800470a:	dc28      	bgt.n	800475e <_printf_common+0x9a>
 800470c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004710:	1e13      	subs	r3, r2, #0
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	bf18      	it	ne
 8004716:	2301      	movne	r3, #1
 8004718:	0692      	lsls	r2, r2, #26
 800471a:	d42d      	bmi.n	8004778 <_printf_common+0xb4>
 800471c:	4649      	mov	r1, r9
 800471e:	4638      	mov	r0, r7
 8004720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004724:	47c0      	blx	r8
 8004726:	3001      	adds	r0, #1
 8004728:	d020      	beq.n	800476c <_printf_common+0xa8>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	68e5      	ldr	r5, [r4, #12]
 800472e:	f003 0306 	and.w	r3, r3, #6
 8004732:	2b04      	cmp	r3, #4
 8004734:	bf18      	it	ne
 8004736:	2500      	movne	r5, #0
 8004738:	6832      	ldr	r2, [r6, #0]
 800473a:	f04f 0600 	mov.w	r6, #0
 800473e:	68a3      	ldr	r3, [r4, #8]
 8004740:	bf08      	it	eq
 8004742:	1aad      	subeq	r5, r5, r2
 8004744:	6922      	ldr	r2, [r4, #16]
 8004746:	bf08      	it	eq
 8004748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800474c:	4293      	cmp	r3, r2
 800474e:	bfc4      	itt	gt
 8004750:	1a9b      	subgt	r3, r3, r2
 8004752:	18ed      	addgt	r5, r5, r3
 8004754:	341a      	adds	r4, #26
 8004756:	42b5      	cmp	r5, r6
 8004758:	d11a      	bne.n	8004790 <_printf_common+0xcc>
 800475a:	2000      	movs	r0, #0
 800475c:	e008      	b.n	8004770 <_printf_common+0xac>
 800475e:	2301      	movs	r3, #1
 8004760:	4652      	mov	r2, sl
 8004762:	4649      	mov	r1, r9
 8004764:	4638      	mov	r0, r7
 8004766:	47c0      	blx	r8
 8004768:	3001      	adds	r0, #1
 800476a:	d103      	bne.n	8004774 <_printf_common+0xb0>
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004774:	3501      	adds	r5, #1
 8004776:	e7c4      	b.n	8004702 <_printf_common+0x3e>
 8004778:	2030      	movs	r0, #48	; 0x30
 800477a:	18e1      	adds	r1, r4, r3
 800477c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004786:	4422      	add	r2, r4
 8004788:	3302      	adds	r3, #2
 800478a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800478e:	e7c5      	b.n	800471c <_printf_common+0x58>
 8004790:	2301      	movs	r3, #1
 8004792:	4622      	mov	r2, r4
 8004794:	4649      	mov	r1, r9
 8004796:	4638      	mov	r0, r7
 8004798:	47c0      	blx	r8
 800479a:	3001      	adds	r0, #1
 800479c:	d0e6      	beq.n	800476c <_printf_common+0xa8>
 800479e:	3601      	adds	r6, #1
 80047a0:	e7d9      	b.n	8004756 <_printf_common+0x92>
	...

080047a4 <_printf_i>:
 80047a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047a8:	460c      	mov	r4, r1
 80047aa:	7e27      	ldrb	r7, [r4, #24]
 80047ac:	4691      	mov	r9, r2
 80047ae:	2f78      	cmp	r7, #120	; 0x78
 80047b0:	4680      	mov	r8, r0
 80047b2:	469a      	mov	sl, r3
 80047b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80047b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047ba:	d807      	bhi.n	80047cc <_printf_i+0x28>
 80047bc:	2f62      	cmp	r7, #98	; 0x62
 80047be:	d80a      	bhi.n	80047d6 <_printf_i+0x32>
 80047c0:	2f00      	cmp	r7, #0
 80047c2:	f000 80d9 	beq.w	8004978 <_printf_i+0x1d4>
 80047c6:	2f58      	cmp	r7, #88	; 0x58
 80047c8:	f000 80a4 	beq.w	8004914 <_printf_i+0x170>
 80047cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047d4:	e03a      	b.n	800484c <_printf_i+0xa8>
 80047d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047da:	2b15      	cmp	r3, #21
 80047dc:	d8f6      	bhi.n	80047cc <_printf_i+0x28>
 80047de:	a001      	add	r0, pc, #4	; (adr r0, 80047e4 <_printf_i+0x40>)
 80047e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80047e4:	0800483d 	.word	0x0800483d
 80047e8:	08004851 	.word	0x08004851
 80047ec:	080047cd 	.word	0x080047cd
 80047f0:	080047cd 	.word	0x080047cd
 80047f4:	080047cd 	.word	0x080047cd
 80047f8:	080047cd 	.word	0x080047cd
 80047fc:	08004851 	.word	0x08004851
 8004800:	080047cd 	.word	0x080047cd
 8004804:	080047cd 	.word	0x080047cd
 8004808:	080047cd 	.word	0x080047cd
 800480c:	080047cd 	.word	0x080047cd
 8004810:	0800495f 	.word	0x0800495f
 8004814:	08004881 	.word	0x08004881
 8004818:	08004941 	.word	0x08004941
 800481c:	080047cd 	.word	0x080047cd
 8004820:	080047cd 	.word	0x080047cd
 8004824:	08004981 	.word	0x08004981
 8004828:	080047cd 	.word	0x080047cd
 800482c:	08004881 	.word	0x08004881
 8004830:	080047cd 	.word	0x080047cd
 8004834:	080047cd 	.word	0x080047cd
 8004838:	08004949 	.word	0x08004949
 800483c:	680b      	ldr	r3, [r1, #0]
 800483e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004842:	1d1a      	adds	r2, r3, #4
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	600a      	str	r2, [r1, #0]
 8004848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800484c:	2301      	movs	r3, #1
 800484e:	e0a4      	b.n	800499a <_printf_i+0x1f6>
 8004850:	6825      	ldr	r5, [r4, #0]
 8004852:	6808      	ldr	r0, [r1, #0]
 8004854:	062e      	lsls	r6, r5, #24
 8004856:	f100 0304 	add.w	r3, r0, #4
 800485a:	d50a      	bpl.n	8004872 <_printf_i+0xce>
 800485c:	6805      	ldr	r5, [r0, #0]
 800485e:	600b      	str	r3, [r1, #0]
 8004860:	2d00      	cmp	r5, #0
 8004862:	da03      	bge.n	800486c <_printf_i+0xc8>
 8004864:	232d      	movs	r3, #45	; 0x2d
 8004866:	426d      	negs	r5, r5
 8004868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800486c:	230a      	movs	r3, #10
 800486e:	485e      	ldr	r0, [pc, #376]	; (80049e8 <_printf_i+0x244>)
 8004870:	e019      	b.n	80048a6 <_printf_i+0x102>
 8004872:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004876:	6805      	ldr	r5, [r0, #0]
 8004878:	600b      	str	r3, [r1, #0]
 800487a:	bf18      	it	ne
 800487c:	b22d      	sxthne	r5, r5
 800487e:	e7ef      	b.n	8004860 <_printf_i+0xbc>
 8004880:	680b      	ldr	r3, [r1, #0]
 8004882:	6825      	ldr	r5, [r4, #0]
 8004884:	1d18      	adds	r0, r3, #4
 8004886:	6008      	str	r0, [r1, #0]
 8004888:	0628      	lsls	r0, r5, #24
 800488a:	d501      	bpl.n	8004890 <_printf_i+0xec>
 800488c:	681d      	ldr	r5, [r3, #0]
 800488e:	e002      	b.n	8004896 <_printf_i+0xf2>
 8004890:	0669      	lsls	r1, r5, #25
 8004892:	d5fb      	bpl.n	800488c <_printf_i+0xe8>
 8004894:	881d      	ldrh	r5, [r3, #0]
 8004896:	2f6f      	cmp	r7, #111	; 0x6f
 8004898:	bf0c      	ite	eq
 800489a:	2308      	moveq	r3, #8
 800489c:	230a      	movne	r3, #10
 800489e:	4852      	ldr	r0, [pc, #328]	; (80049e8 <_printf_i+0x244>)
 80048a0:	2100      	movs	r1, #0
 80048a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048a6:	6866      	ldr	r6, [r4, #4]
 80048a8:	2e00      	cmp	r6, #0
 80048aa:	bfa8      	it	ge
 80048ac:	6821      	ldrge	r1, [r4, #0]
 80048ae:	60a6      	str	r6, [r4, #8]
 80048b0:	bfa4      	itt	ge
 80048b2:	f021 0104 	bicge.w	r1, r1, #4
 80048b6:	6021      	strge	r1, [r4, #0]
 80048b8:	b90d      	cbnz	r5, 80048be <_printf_i+0x11a>
 80048ba:	2e00      	cmp	r6, #0
 80048bc:	d04d      	beq.n	800495a <_printf_i+0x1b6>
 80048be:	4616      	mov	r6, r2
 80048c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80048c4:	fb03 5711 	mls	r7, r3, r1, r5
 80048c8:	5dc7      	ldrb	r7, [r0, r7]
 80048ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048ce:	462f      	mov	r7, r5
 80048d0:	42bb      	cmp	r3, r7
 80048d2:	460d      	mov	r5, r1
 80048d4:	d9f4      	bls.n	80048c0 <_printf_i+0x11c>
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d10b      	bne.n	80048f2 <_printf_i+0x14e>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	07df      	lsls	r7, r3, #31
 80048de:	d508      	bpl.n	80048f2 <_printf_i+0x14e>
 80048e0:	6923      	ldr	r3, [r4, #16]
 80048e2:	6861      	ldr	r1, [r4, #4]
 80048e4:	4299      	cmp	r1, r3
 80048e6:	bfde      	ittt	le
 80048e8:	2330      	movle	r3, #48	; 0x30
 80048ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048f2:	1b92      	subs	r2, r2, r6
 80048f4:	6122      	str	r2, [r4, #16]
 80048f6:	464b      	mov	r3, r9
 80048f8:	4621      	mov	r1, r4
 80048fa:	4640      	mov	r0, r8
 80048fc:	f8cd a000 	str.w	sl, [sp]
 8004900:	aa03      	add	r2, sp, #12
 8004902:	f7ff fedf 	bl	80046c4 <_printf_common>
 8004906:	3001      	adds	r0, #1
 8004908:	d14c      	bne.n	80049a4 <_printf_i+0x200>
 800490a:	f04f 30ff 	mov.w	r0, #4294967295
 800490e:	b004      	add	sp, #16
 8004910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004914:	4834      	ldr	r0, [pc, #208]	; (80049e8 <_printf_i+0x244>)
 8004916:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800491a:	680e      	ldr	r6, [r1, #0]
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004922:	061f      	lsls	r7, r3, #24
 8004924:	600e      	str	r6, [r1, #0]
 8004926:	d514      	bpl.n	8004952 <_printf_i+0x1ae>
 8004928:	07d9      	lsls	r1, r3, #31
 800492a:	bf44      	itt	mi
 800492c:	f043 0320 	orrmi.w	r3, r3, #32
 8004930:	6023      	strmi	r3, [r4, #0]
 8004932:	b91d      	cbnz	r5, 800493c <_printf_i+0x198>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	f023 0320 	bic.w	r3, r3, #32
 800493a:	6023      	str	r3, [r4, #0]
 800493c:	2310      	movs	r3, #16
 800493e:	e7af      	b.n	80048a0 <_printf_i+0xfc>
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	f043 0320 	orr.w	r3, r3, #32
 8004946:	6023      	str	r3, [r4, #0]
 8004948:	2378      	movs	r3, #120	; 0x78
 800494a:	4828      	ldr	r0, [pc, #160]	; (80049ec <_printf_i+0x248>)
 800494c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004950:	e7e3      	b.n	800491a <_printf_i+0x176>
 8004952:	065e      	lsls	r6, r3, #25
 8004954:	bf48      	it	mi
 8004956:	b2ad      	uxthmi	r5, r5
 8004958:	e7e6      	b.n	8004928 <_printf_i+0x184>
 800495a:	4616      	mov	r6, r2
 800495c:	e7bb      	b.n	80048d6 <_printf_i+0x132>
 800495e:	680b      	ldr	r3, [r1, #0]
 8004960:	6826      	ldr	r6, [r4, #0]
 8004962:	1d1d      	adds	r5, r3, #4
 8004964:	6960      	ldr	r0, [r4, #20]
 8004966:	600d      	str	r5, [r1, #0]
 8004968:	0635      	lsls	r5, r6, #24
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	d501      	bpl.n	8004972 <_printf_i+0x1ce>
 800496e:	6018      	str	r0, [r3, #0]
 8004970:	e002      	b.n	8004978 <_printf_i+0x1d4>
 8004972:	0671      	lsls	r1, r6, #25
 8004974:	d5fb      	bpl.n	800496e <_printf_i+0x1ca>
 8004976:	8018      	strh	r0, [r3, #0]
 8004978:	2300      	movs	r3, #0
 800497a:	4616      	mov	r6, r2
 800497c:	6123      	str	r3, [r4, #16]
 800497e:	e7ba      	b.n	80048f6 <_printf_i+0x152>
 8004980:	680b      	ldr	r3, [r1, #0]
 8004982:	1d1a      	adds	r2, r3, #4
 8004984:	600a      	str	r2, [r1, #0]
 8004986:	681e      	ldr	r6, [r3, #0]
 8004988:	2100      	movs	r1, #0
 800498a:	4630      	mov	r0, r6
 800498c:	6862      	ldr	r2, [r4, #4]
 800498e:	f000 f82f 	bl	80049f0 <memchr>
 8004992:	b108      	cbz	r0, 8004998 <_printf_i+0x1f4>
 8004994:	1b80      	subs	r0, r0, r6
 8004996:	6060      	str	r0, [r4, #4]
 8004998:	6863      	ldr	r3, [r4, #4]
 800499a:	6123      	str	r3, [r4, #16]
 800499c:	2300      	movs	r3, #0
 800499e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a2:	e7a8      	b.n	80048f6 <_printf_i+0x152>
 80049a4:	4632      	mov	r2, r6
 80049a6:	4649      	mov	r1, r9
 80049a8:	4640      	mov	r0, r8
 80049aa:	6923      	ldr	r3, [r4, #16]
 80049ac:	47d0      	blx	sl
 80049ae:	3001      	adds	r0, #1
 80049b0:	d0ab      	beq.n	800490a <_printf_i+0x166>
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	079b      	lsls	r3, r3, #30
 80049b6:	d413      	bmi.n	80049e0 <_printf_i+0x23c>
 80049b8:	68e0      	ldr	r0, [r4, #12]
 80049ba:	9b03      	ldr	r3, [sp, #12]
 80049bc:	4298      	cmp	r0, r3
 80049be:	bfb8      	it	lt
 80049c0:	4618      	movlt	r0, r3
 80049c2:	e7a4      	b.n	800490e <_printf_i+0x16a>
 80049c4:	2301      	movs	r3, #1
 80049c6:	4632      	mov	r2, r6
 80049c8:	4649      	mov	r1, r9
 80049ca:	4640      	mov	r0, r8
 80049cc:	47d0      	blx	sl
 80049ce:	3001      	adds	r0, #1
 80049d0:	d09b      	beq.n	800490a <_printf_i+0x166>
 80049d2:	3501      	adds	r5, #1
 80049d4:	68e3      	ldr	r3, [r4, #12]
 80049d6:	9903      	ldr	r1, [sp, #12]
 80049d8:	1a5b      	subs	r3, r3, r1
 80049da:	42ab      	cmp	r3, r5
 80049dc:	dcf2      	bgt.n	80049c4 <_printf_i+0x220>
 80049de:	e7eb      	b.n	80049b8 <_printf_i+0x214>
 80049e0:	2500      	movs	r5, #0
 80049e2:	f104 0619 	add.w	r6, r4, #25
 80049e6:	e7f5      	b.n	80049d4 <_printf_i+0x230>
 80049e8:	08004d09 	.word	0x08004d09
 80049ec:	08004d1a 	.word	0x08004d1a

080049f0 <memchr>:
 80049f0:	4603      	mov	r3, r0
 80049f2:	b510      	push	{r4, lr}
 80049f4:	b2c9      	uxtb	r1, r1
 80049f6:	4402      	add	r2, r0
 80049f8:	4293      	cmp	r3, r2
 80049fa:	4618      	mov	r0, r3
 80049fc:	d101      	bne.n	8004a02 <memchr+0x12>
 80049fe:	2000      	movs	r0, #0
 8004a00:	e003      	b.n	8004a0a <memchr+0x1a>
 8004a02:	7804      	ldrb	r4, [r0, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	428c      	cmp	r4, r1
 8004a08:	d1f6      	bne.n	80049f8 <memchr+0x8>
 8004a0a:	bd10      	pop	{r4, pc}

08004a0c <memcpy>:
 8004a0c:	440a      	add	r2, r1
 8004a0e:	4291      	cmp	r1, r2
 8004a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a14:	d100      	bne.n	8004a18 <memcpy+0xc>
 8004a16:	4770      	bx	lr
 8004a18:	b510      	push	{r4, lr}
 8004a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a1e:	4291      	cmp	r1, r2
 8004a20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a24:	d1f9      	bne.n	8004a1a <memcpy+0xe>
 8004a26:	bd10      	pop	{r4, pc}

08004a28 <memmove>:
 8004a28:	4288      	cmp	r0, r1
 8004a2a:	b510      	push	{r4, lr}
 8004a2c:	eb01 0402 	add.w	r4, r1, r2
 8004a30:	d902      	bls.n	8004a38 <memmove+0x10>
 8004a32:	4284      	cmp	r4, r0
 8004a34:	4623      	mov	r3, r4
 8004a36:	d807      	bhi.n	8004a48 <memmove+0x20>
 8004a38:	1e43      	subs	r3, r0, #1
 8004a3a:	42a1      	cmp	r1, r4
 8004a3c:	d008      	beq.n	8004a50 <memmove+0x28>
 8004a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a46:	e7f8      	b.n	8004a3a <memmove+0x12>
 8004a48:	4601      	mov	r1, r0
 8004a4a:	4402      	add	r2, r0
 8004a4c:	428a      	cmp	r2, r1
 8004a4e:	d100      	bne.n	8004a52 <memmove+0x2a>
 8004a50:	bd10      	pop	{r4, pc}
 8004a52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a5a:	e7f7      	b.n	8004a4c <memmove+0x24>

08004a5c <_free_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	4605      	mov	r5, r0
 8004a60:	2900      	cmp	r1, #0
 8004a62:	d043      	beq.n	8004aec <_free_r+0x90>
 8004a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a68:	1f0c      	subs	r4, r1, #4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	bfb8      	it	lt
 8004a6e:	18e4      	addlt	r4, r4, r3
 8004a70:	f000 f8d0 	bl	8004c14 <__malloc_lock>
 8004a74:	4a1e      	ldr	r2, [pc, #120]	; (8004af0 <_free_r+0x94>)
 8004a76:	6813      	ldr	r3, [r2, #0]
 8004a78:	4610      	mov	r0, r2
 8004a7a:	b933      	cbnz	r3, 8004a8a <_free_r+0x2e>
 8004a7c:	6063      	str	r3, [r4, #4]
 8004a7e:	6014      	str	r4, [r2, #0]
 8004a80:	4628      	mov	r0, r5
 8004a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a86:	f000 b8cb 	b.w	8004c20 <__malloc_unlock>
 8004a8a:	42a3      	cmp	r3, r4
 8004a8c:	d90a      	bls.n	8004aa4 <_free_r+0x48>
 8004a8e:	6821      	ldr	r1, [r4, #0]
 8004a90:	1862      	adds	r2, r4, r1
 8004a92:	4293      	cmp	r3, r2
 8004a94:	bf01      	itttt	eq
 8004a96:	681a      	ldreq	r2, [r3, #0]
 8004a98:	685b      	ldreq	r3, [r3, #4]
 8004a9a:	1852      	addeq	r2, r2, r1
 8004a9c:	6022      	streq	r2, [r4, #0]
 8004a9e:	6063      	str	r3, [r4, #4]
 8004aa0:	6004      	str	r4, [r0, #0]
 8004aa2:	e7ed      	b.n	8004a80 <_free_r+0x24>
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	b10b      	cbz	r3, 8004aae <_free_r+0x52>
 8004aaa:	42a3      	cmp	r3, r4
 8004aac:	d9fa      	bls.n	8004aa4 <_free_r+0x48>
 8004aae:	6811      	ldr	r1, [r2, #0]
 8004ab0:	1850      	adds	r0, r2, r1
 8004ab2:	42a0      	cmp	r0, r4
 8004ab4:	d10b      	bne.n	8004ace <_free_r+0x72>
 8004ab6:	6820      	ldr	r0, [r4, #0]
 8004ab8:	4401      	add	r1, r0
 8004aba:	1850      	adds	r0, r2, r1
 8004abc:	4283      	cmp	r3, r0
 8004abe:	6011      	str	r1, [r2, #0]
 8004ac0:	d1de      	bne.n	8004a80 <_free_r+0x24>
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	4401      	add	r1, r0
 8004ac8:	6011      	str	r1, [r2, #0]
 8004aca:	6053      	str	r3, [r2, #4]
 8004acc:	e7d8      	b.n	8004a80 <_free_r+0x24>
 8004ace:	d902      	bls.n	8004ad6 <_free_r+0x7a>
 8004ad0:	230c      	movs	r3, #12
 8004ad2:	602b      	str	r3, [r5, #0]
 8004ad4:	e7d4      	b.n	8004a80 <_free_r+0x24>
 8004ad6:	6820      	ldr	r0, [r4, #0]
 8004ad8:	1821      	adds	r1, r4, r0
 8004ada:	428b      	cmp	r3, r1
 8004adc:	bf01      	itttt	eq
 8004ade:	6819      	ldreq	r1, [r3, #0]
 8004ae0:	685b      	ldreq	r3, [r3, #4]
 8004ae2:	1809      	addeq	r1, r1, r0
 8004ae4:	6021      	streq	r1, [r4, #0]
 8004ae6:	6063      	str	r3, [r4, #4]
 8004ae8:	6054      	str	r4, [r2, #4]
 8004aea:	e7c9      	b.n	8004a80 <_free_r+0x24>
 8004aec:	bd38      	pop	{r3, r4, r5, pc}
 8004aee:	bf00      	nop
 8004af0:	200000ec 	.word	0x200000ec

08004af4 <_malloc_r>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	1ccd      	adds	r5, r1, #3
 8004af8:	f025 0503 	bic.w	r5, r5, #3
 8004afc:	3508      	adds	r5, #8
 8004afe:	2d0c      	cmp	r5, #12
 8004b00:	bf38      	it	cc
 8004b02:	250c      	movcc	r5, #12
 8004b04:	2d00      	cmp	r5, #0
 8004b06:	4606      	mov	r6, r0
 8004b08:	db01      	blt.n	8004b0e <_malloc_r+0x1a>
 8004b0a:	42a9      	cmp	r1, r5
 8004b0c:	d903      	bls.n	8004b16 <_malloc_r+0x22>
 8004b0e:	230c      	movs	r3, #12
 8004b10:	6033      	str	r3, [r6, #0]
 8004b12:	2000      	movs	r0, #0
 8004b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b16:	f000 f87d 	bl	8004c14 <__malloc_lock>
 8004b1a:	4921      	ldr	r1, [pc, #132]	; (8004ba0 <_malloc_r+0xac>)
 8004b1c:	680a      	ldr	r2, [r1, #0]
 8004b1e:	4614      	mov	r4, r2
 8004b20:	b99c      	cbnz	r4, 8004b4a <_malloc_r+0x56>
 8004b22:	4f20      	ldr	r7, [pc, #128]	; (8004ba4 <_malloc_r+0xb0>)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	b923      	cbnz	r3, 8004b32 <_malloc_r+0x3e>
 8004b28:	4621      	mov	r1, r4
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f000 f862 	bl	8004bf4 <_sbrk_r>
 8004b30:	6038      	str	r0, [r7, #0]
 8004b32:	4629      	mov	r1, r5
 8004b34:	4630      	mov	r0, r6
 8004b36:	f000 f85d 	bl	8004bf4 <_sbrk_r>
 8004b3a:	1c43      	adds	r3, r0, #1
 8004b3c:	d123      	bne.n	8004b86 <_malloc_r+0x92>
 8004b3e:	230c      	movs	r3, #12
 8004b40:	4630      	mov	r0, r6
 8004b42:	6033      	str	r3, [r6, #0]
 8004b44:	f000 f86c 	bl	8004c20 <__malloc_unlock>
 8004b48:	e7e3      	b.n	8004b12 <_malloc_r+0x1e>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	1b5b      	subs	r3, r3, r5
 8004b4e:	d417      	bmi.n	8004b80 <_malloc_r+0x8c>
 8004b50:	2b0b      	cmp	r3, #11
 8004b52:	d903      	bls.n	8004b5c <_malloc_r+0x68>
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	441c      	add	r4, r3
 8004b58:	6025      	str	r5, [r4, #0]
 8004b5a:	e004      	b.n	8004b66 <_malloc_r+0x72>
 8004b5c:	6863      	ldr	r3, [r4, #4]
 8004b5e:	42a2      	cmp	r2, r4
 8004b60:	bf0c      	ite	eq
 8004b62:	600b      	streq	r3, [r1, #0]
 8004b64:	6053      	strne	r3, [r2, #4]
 8004b66:	4630      	mov	r0, r6
 8004b68:	f000 f85a 	bl	8004c20 <__malloc_unlock>
 8004b6c:	f104 000b 	add.w	r0, r4, #11
 8004b70:	1d23      	adds	r3, r4, #4
 8004b72:	f020 0007 	bic.w	r0, r0, #7
 8004b76:	1ac2      	subs	r2, r0, r3
 8004b78:	d0cc      	beq.n	8004b14 <_malloc_r+0x20>
 8004b7a:	1a1b      	subs	r3, r3, r0
 8004b7c:	50a3      	str	r3, [r4, r2]
 8004b7e:	e7c9      	b.n	8004b14 <_malloc_r+0x20>
 8004b80:	4622      	mov	r2, r4
 8004b82:	6864      	ldr	r4, [r4, #4]
 8004b84:	e7cc      	b.n	8004b20 <_malloc_r+0x2c>
 8004b86:	1cc4      	adds	r4, r0, #3
 8004b88:	f024 0403 	bic.w	r4, r4, #3
 8004b8c:	42a0      	cmp	r0, r4
 8004b8e:	d0e3      	beq.n	8004b58 <_malloc_r+0x64>
 8004b90:	1a21      	subs	r1, r4, r0
 8004b92:	4630      	mov	r0, r6
 8004b94:	f000 f82e 	bl	8004bf4 <_sbrk_r>
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d1dd      	bne.n	8004b58 <_malloc_r+0x64>
 8004b9c:	e7cf      	b.n	8004b3e <_malloc_r+0x4a>
 8004b9e:	bf00      	nop
 8004ba0:	200000ec 	.word	0x200000ec
 8004ba4:	200000f0 	.word	0x200000f0

08004ba8 <_realloc_r>:
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004baa:	4607      	mov	r7, r0
 8004bac:	4614      	mov	r4, r2
 8004bae:	460e      	mov	r6, r1
 8004bb0:	b921      	cbnz	r1, 8004bbc <_realloc_r+0x14>
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004bb8:	f7ff bf9c 	b.w	8004af4 <_malloc_r>
 8004bbc:	b922      	cbnz	r2, 8004bc8 <_realloc_r+0x20>
 8004bbe:	f7ff ff4d 	bl	8004a5c <_free_r>
 8004bc2:	4625      	mov	r5, r4
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bc8:	f000 f830 	bl	8004c2c <_malloc_usable_size_r>
 8004bcc:	42a0      	cmp	r0, r4
 8004bce:	d20f      	bcs.n	8004bf0 <_realloc_r+0x48>
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	f7ff ff8e 	bl	8004af4 <_malloc_r>
 8004bd8:	4605      	mov	r5, r0
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	d0f2      	beq.n	8004bc4 <_realloc_r+0x1c>
 8004bde:	4631      	mov	r1, r6
 8004be0:	4622      	mov	r2, r4
 8004be2:	f7ff ff13 	bl	8004a0c <memcpy>
 8004be6:	4631      	mov	r1, r6
 8004be8:	4638      	mov	r0, r7
 8004bea:	f7ff ff37 	bl	8004a5c <_free_r>
 8004bee:	e7e9      	b.n	8004bc4 <_realloc_r+0x1c>
 8004bf0:	4635      	mov	r5, r6
 8004bf2:	e7e7      	b.n	8004bc4 <_realloc_r+0x1c>

08004bf4 <_sbrk_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	4d05      	ldr	r5, [pc, #20]	; (8004c10 <_sbrk_r+0x1c>)
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	602b      	str	r3, [r5, #0]
 8004c00:	f7fc fef6 	bl	80019f0 <_sbrk>
 8004c04:	1c43      	adds	r3, r0, #1
 8004c06:	d102      	bne.n	8004c0e <_sbrk_r+0x1a>
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	b103      	cbz	r3, 8004c0e <_sbrk_r+0x1a>
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
 8004c10:	200004fc 	.word	0x200004fc

08004c14 <__malloc_lock>:
 8004c14:	4801      	ldr	r0, [pc, #4]	; (8004c1c <__malloc_lock+0x8>)
 8004c16:	f000 b811 	b.w	8004c3c <__retarget_lock_acquire_recursive>
 8004c1a:	bf00      	nop
 8004c1c:	20000504 	.word	0x20000504

08004c20 <__malloc_unlock>:
 8004c20:	4801      	ldr	r0, [pc, #4]	; (8004c28 <__malloc_unlock+0x8>)
 8004c22:	f000 b80c 	b.w	8004c3e <__retarget_lock_release_recursive>
 8004c26:	bf00      	nop
 8004c28:	20000504 	.word	0x20000504

08004c2c <_malloc_usable_size_r>:
 8004c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c30:	1f18      	subs	r0, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	bfbc      	itt	lt
 8004c36:	580b      	ldrlt	r3, [r1, r0]
 8004c38:	18c0      	addlt	r0, r0, r3
 8004c3a:	4770      	bx	lr

08004c3c <__retarget_lock_acquire_recursive>:
 8004c3c:	4770      	bx	lr

08004c3e <__retarget_lock_release_recursive>:
 8004c3e:	4770      	bx	lr

08004c40 <_init>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	bf00      	nop
 8004c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c46:	bc08      	pop	{r3}
 8004c48:	469e      	mov	lr, r3
 8004c4a:	4770      	bx	lr

08004c4c <_fini>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	bf00      	nop
 8004c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c52:	bc08      	pop	{r3}
 8004c54:	469e      	mov	lr, r3
 8004c56:	4770      	bx	lr
